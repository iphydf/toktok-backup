{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226/commits"
        },
        "html": {
            "href": "https://github.com/TokTok/hs-tokstyle/pull/226"
        },
        "issue": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
        },
        "statuses": {
            "href": "https://api.github.com/repos/TokTok/hs-tokstyle/statuses/231cece8f0787895a175f35ba7e95dc54fee087a"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
        "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
        "followers_url": "https://api.github.com/users/robinlinden/followers",
        "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
        "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/robinlinden",
        "id": 8304462,
        "login": "robinlinden",
        "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
        "organizations_url": "https://api.github.com/users/robinlinden/orgs",
        "received_events_url": "https://api.github.com/users/robinlinden/received_events",
        "repos_url": "https://api.github.com/users/robinlinden/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/robinlinden"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
            "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
            "followers_url": "https://api.github.com/users/robinlinden/followers",
            "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
            "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/robinlinden",
            "id": 8304462,
            "login": "robinlinden",
            "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
            "organizations_url": "https://api.github.com/users/robinlinden/orgs",
            "received_events_url": "https://api.github.com/users/robinlinden/received_events",
            "repos_url": "https://api.github.com/users/robinlinden/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/robinlinden"
        }
    ],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "TokTok:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TokTok/hs-tokstyle/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TokTok/hs-tokstyle/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TokTok/hs-tokstyle/branches{/branch}",
            "clone_url": "https://github.com/TokTok/hs-tokstyle.git",
            "collaborators_url": "https://api.github.com/repos/TokTok/hs-tokstyle/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TokTok/hs-tokstyle/comments{/number}",
            "commits_url": "https://api.github.com/repos/TokTok/hs-tokstyle/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TokTok/hs-tokstyle/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TokTok/hs-tokstyle/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TokTok/hs-tokstyle/contributors",
            "created_at": "2016-09-21T17:32:41Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TokTok/hs-tokstyle/deployments",
            "description": "Style checker for TokTok C projects",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TokTok/hs-tokstyle/downloads",
            "events_url": "https://api.github.com/repos/TokTok/hs-tokstyle/events",
            "fork": false,
            "forks": 5,
            "forks_count": 5,
            "forks_url": "https://api.github.com/repos/TokTok/hs-tokstyle/forks",
            "full_name": "TokTok/hs-tokstyle",
            "git_commits_url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/tags{/sha}",
            "git_url": "git://github.com/TokTok/hs-tokstyle.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd/",
            "hooks_url": "https://api.github.com/repos/TokTok/hs-tokstyle/hooks",
            "html_url": "https://github.com/TokTok/hs-tokstyle",
            "id": 68841716,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues{/number}",
            "keys_url": "https://api.github.com/repos/TokTok/hs-tokstyle/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TokTok/hs-tokstyle/labels{/name}",
            "language": "Haskell",
            "languages_url": "https://api.github.com/repos/TokTok/hs-tokstyle/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/TokTok/hs-tokstyle/merges",
            "milestones_url": "https://api.github.com/repos/TokTok/hs-tokstyle/milestones{/number}",
            "mirror_url": null,
            "name": "hs-tokstyle",
            "node_id": "MDEwOlJlcG9zaXRvcnk2ODg0MTcxNg==",
            "notifications_url": "https://api.github.com/repos/TokTok/hs-tokstyle/notifications{?since,all,participating}",
            "open_issues": 4,
            "open_issues_count": 4,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
                "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
                "followers_url": "https://api.github.com/users/TokTok/followers",
                "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
                "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TokTok",
                "id": 17427091,
                "login": "TokTok",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
                "organizations_url": "https://api.github.com/users/TokTok/orgs",
                "received_events_url": "https://api.github.com/users/TokTok/received_events",
                "repos_url": "https://api.github.com/users/TokTok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/TokTok"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls{/number}",
            "pushed_at": "2024-02-12T10:39:02Z",
            "releases_url": "https://api.github.com/repos/TokTok/hs-tokstyle/releases{/id}",
            "size": 663,
            "ssh_url": "git@github.com:TokTok/hs-tokstyle.git",
            "stargazers_count": 3,
            "stargazers_url": "https://api.github.com/repos/TokTok/hs-tokstyle/stargazers",
            "statuses_url": "https://api.github.com/repos/TokTok/hs-tokstyle/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TokTok/hs-tokstyle/subscribers",
            "subscription_url": "https://api.github.com/repos/TokTok/hs-tokstyle/subscription",
            "svn_url": "https://github.com/TokTok/hs-tokstyle",
            "tags_url": "https://api.github.com/repos/TokTok/hs-tokstyle/tags",
            "teams_url": "https://api.github.com/repos/TokTok/hs-tokstyle/teams",
            "topics": [
                "c",
                "linter",
                "style"
            ],
            "trees_url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/trees{/sha}",
            "updated_at": "2023-12-28T23:46:51Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle",
            "visibility": "public",
            "watchers": 3,
            "watchers_count": 3,
            "web_commit_signoff_required": false
        },
        "sha": "059749abb4ec1fed583558857b62e6b42e3cc802",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
            "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
            "followers_url": "https://api.github.com/users/TokTok/followers",
            "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
            "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TokTok",
            "id": 17427091,
            "login": "TokTok",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
            "organizations_url": "https://api.github.com/users/TokTok/orgs",
            "received_events_url": "https://api.github.com/users/TokTok/received_events",
            "repos_url": "https://api.github.com/users/TokTok/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/TokTok"
        }
    },
    "body": "\n\n<!-- Reviewable:start -->\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/TokTok/hs-tokstyle/226)\n<!-- Reviewable:end -->\n",
    "closed_at": "2023-12-26T16:52:32Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436512137"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436512137"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this one is available in clang-tidy as well: https://releases.llvm.org/14.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-simplify-boolean-expr.html",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T15:42:04Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436512137",
            "id": 1436512137,
            "line": 31,
            "node_id": "PRRC_kwDOBBpw9M5Vn2-J",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 31,
            "original_position": 31,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 31,
            "pull_request_review_id": 1796443913,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436512137/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T16:51:40Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436512137",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436530900"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436530900"
                }
            },
            "author_association": "MEMBER",
            "body": "clang-tidy has https://clang.llvm.org/extra/clang-tidy/checks/misc/const-correctness.html which I think matches this check.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T16:34:50Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436530900",
            "id": 1436530900,
            "line": 133,
            "node_id": "PRRC_kwDOBBpw9M5Vn7jU",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 133,
            "pull_request_review_id": 1796443913,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436530900/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T16:51:40Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436530900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436533865"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436533865"
                }
            },
            "author_association": "MEMBER",
            "body": "clang-tidy has https://clang.llvm.org/extra/clang-tidy/checks/performance/unnecessary-value-param.html which should be able to detect this.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T16:43:37Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`\n+\n+Warns if a variable can be marked as `const`, i.e. it is only initialised and\n+then never assigned again. Pointer types are exempt, i.e. `int *p = get_p();`\n+is fine and doesn't need to be written as `int *const p = get_p();`, but\n+`int q = get_q();`, if then `q` is never assigned again, should be written as\n+`const int q = get_q();`.\n+\n+**Reason:** `const` makes the no-assign local invariant clear. We exempt pointer\n+types at the moment, because making that change in toxcore would be a lot of\n+work and we perceive less value in that than in local integer constants, since\n+pointers, especially aggregate object pointers, already change less often.\n+\n+## `-Wdeclared-once` (global)\n+\n+Checks that any function is declared exactly once.\n+\n+**Reason:** functions should never be declared in multiple files, and within the\n+same file, declaring it twice is unnecessary and confusing.\n+\n+## `-Wdecls-have-defns` (global)\n+\n+Checks that all function declarations also have matching definitions.\n+\n+**Reason:** extern function declarations without definitions are not implemented\n+and cannot be used. This likely means the declaration was forgotten when\n+deleting a function.\n+\n+## `-Wdoc-comments` (global)\n+\n+Checks that doc comments on function definitions match the ones on their\n+corresponding declarations.\n+\n+**Reason:** ideally, documentation should be only in one place, but if it is\n+duplicated, it should not be different.\n+\n+## `-Wenum-defines`\n+\n+Suggests using `enum` instead of a sequence of `#define`s for enumerations.\n+Only matches sequences of `#define`s longer than 5 to avoid some false positives.\n+Also, the sequence must have a common prefix of at least 2 components. I.e.\n+`AAA` is not a sufficient common prefix, but `AAA_BBB` is.\n+Lastly, we only require enums for small-int enums, i.e. all enumerators have a\n+constant int expression value less than or equal to 255.\n+\n+**Reason:** `enum` constants are safer, and can potentially be type-checked\n+more thoroughly.\n+\n+## `-Wenum-from-int` (global)\n+\n+Checks that `_from_int` functions for `enum`s are complete.\n+\n+**Reason:** ensures that no enumerators are missed in conversion functions that\n+turn `int`s into `enum`s. Type-cast is not permitted, because some values of\n+type `int` are not in the enumeration.\n+\n+## `-Wenum-names`\n+\n+Checks that `enum` value constants have the same prefix as the `enum` type,\n+except they should be SCREAMING_CASE instead of Camel_Snake. There are currently\n+37 exemptions to this rule. New enums should follow the naming convention.\n+\n+**Reason:** this naming convention helps identify the type of an `enum` constant\n+at first glance.\n+\n+## `-Wenum-to-string` (global)\n+\n+Checks that `_to_string` functions for `enum`s are complete.\n+\n+**Reason:** we provide `to_string` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wenum-unpack` (global)\n+\n+Checks that `_unpack` functions for `enum`s are complete.\n+\n+**Reason:** we provide `unpack` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wfunc-prototypes`\n+\n+Checks that empty parameter lists in C functions are written as `(void)`.\n+\n+**Reason:** old-style empty parameter lists written as `()` are risky, because\n+C interprets them as variadic. GCC warns about this but sometimes misses one.\n+\n+## `-Wfunc-scopes`\n+\n+Checks that static function definitions are marked with `static`.\n+\n+In C, a function is `static` even if the definition doesn't use `static`, but\n+there happens to be another declaration of the function which does.\n+\n+**Reason:** static/extern qualification of functions should be visible locally.\n+It takes mental effort otherwise to look up the declaration to check for storage\n+qualifiers.\n+\n+## `-Wglobal-funcs`\n+\n+Checks that no extern functions are declared in .c files.\n+\n+Extern functions must only be declared in .h files. In .c files all declarations\n+must be static.\n+\n+**Reason:** extern declarations in .c files mean that we depend on a function\n+not declared in a .h file we can include. This means we're depending on an\n+unexported implementation detail, and there is no compiler that can check\n+whether our declaration matches the implementation's definition.\n+\n+## `-Wlarge-struct-params`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436533865",
            "id": 1436533865,
            "line": 246,
            "node_id": "PRRC_kwDOBBpw9M5Vn8Rp",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 246,
            "original_position": 246,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 246,
            "pull_request_review_id": 1796443913,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436533865/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T16:51:40Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436533865",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436534531"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436534531"
                }
            },
            "author_association": "MEMBER",
            "body": "-Wformat-nonliteral could probably do this too?",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T16:45:51Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`\n+\n+Warns if a variable can be marked as `const`, i.e. it is only initialised and\n+then never assigned again. Pointer types are exempt, i.e. `int *p = get_p();`\n+is fine and doesn't need to be written as `int *const p = get_p();`, but\n+`int q = get_q();`, if then `q` is never assigned again, should be written as\n+`const int q = get_q();`.\n+\n+**Reason:** `const` makes the no-assign local invariant clear. We exempt pointer\n+types at the moment, because making that change in toxcore would be a lot of\n+work and we perceive less value in that than in local integer constants, since\n+pointers, especially aggregate object pointers, already change less often.\n+\n+## `-Wdeclared-once` (global)\n+\n+Checks that any function is declared exactly once.\n+\n+**Reason:** functions should never be declared in multiple files, and within the\n+same file, declaring it twice is unnecessary and confusing.\n+\n+## `-Wdecls-have-defns` (global)\n+\n+Checks that all function declarations also have matching definitions.\n+\n+**Reason:** extern function declarations without definitions are not implemented\n+and cannot be used. This likely means the declaration was forgotten when\n+deleting a function.\n+\n+## `-Wdoc-comments` (global)\n+\n+Checks that doc comments on function definitions match the ones on their\n+corresponding declarations.\n+\n+**Reason:** ideally, documentation should be only in one place, but if it is\n+duplicated, it should not be different.\n+\n+## `-Wenum-defines`\n+\n+Suggests using `enum` instead of a sequence of `#define`s for enumerations.\n+Only matches sequences of `#define`s longer than 5 to avoid some false positives.\n+Also, the sequence must have a common prefix of at least 2 components. I.e.\n+`AAA` is not a sufficient common prefix, but `AAA_BBB` is.\n+Lastly, we only require enums for small-int enums, i.e. all enumerators have a\n+constant int expression value less than or equal to 255.\n+\n+**Reason:** `enum` constants are safer, and can potentially be type-checked\n+more thoroughly.\n+\n+## `-Wenum-from-int` (global)\n+\n+Checks that `_from_int` functions for `enum`s are complete.\n+\n+**Reason:** ensures that no enumerators are missed in conversion functions that\n+turn `int`s into `enum`s. Type-cast is not permitted, because some values of\n+type `int` are not in the enumeration.\n+\n+## `-Wenum-names`\n+\n+Checks that `enum` value constants have the same prefix as the `enum` type,\n+except they should be SCREAMING_CASE instead of Camel_Snake. There are currently\n+37 exemptions to this rule. New enums should follow the naming convention.\n+\n+**Reason:** this naming convention helps identify the type of an `enum` constant\n+at first glance.\n+\n+## `-Wenum-to-string` (global)\n+\n+Checks that `_to_string` functions for `enum`s are complete.\n+\n+**Reason:** we provide `to_string` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wenum-unpack` (global)\n+\n+Checks that `_unpack` functions for `enum`s are complete.\n+\n+**Reason:** we provide `unpack` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wfunc-prototypes`\n+\n+Checks that empty parameter lists in C functions are written as `(void)`.\n+\n+**Reason:** old-style empty parameter lists written as `()` are risky, because\n+C interprets them as variadic. GCC warns about this but sometimes misses one.\n+\n+## `-Wfunc-scopes`\n+\n+Checks that static function definitions are marked with `static`.\n+\n+In C, a function is `static` even if the definition doesn't use `static`, but\n+there happens to be another declaration of the function which does.\n+\n+**Reason:** static/extern qualification of functions should be visible locally.\n+It takes mental effort otherwise to look up the declaration to check for storage\n+qualifiers.\n+\n+## `-Wglobal-funcs`\n+\n+Checks that no extern functions are declared in .c files.\n+\n+Extern functions must only be declared in .h files. In .c files all declarations\n+must be static.\n+\n+**Reason:** extern declarations in .c files mean that we depend on a function\n+not declared in a .h file we can include. This means we're depending on an\n+unexported implementation detail, and there is no compiler that can check\n+whether our declaration matches the implementation's definition.\n+\n+## `-Wlarge-struct-params`\n+\n+Checks that large structs are passed by pointer rather than by value.\n+\n+Exemptions are enums and some well-known small structs:\n+\n+- `Family`\n+- `IP4`\n+- `Logger_Level`\n+- `Net_Packet_Type`\n+- `Onion_Connection_Status`\n+- `Packet`\n+- `Packet_Direction`\n+- `Socket`\n+- `State_Type`\n+\n+and anything with one of the following prefixes, which are probably enums:\n+\n+- `Group_`\n+- `MSI`\n+- `Tox_`\n+- `Toxav_`\n+\n+**Reason:** some structs in toxcore are up to 5MB in size, which would cause\n+stack overflows. Since we can't currently measure the size, we avoid any struct\n+passing altogether apart from some well-known exemptions.\n+\n+## `-Wlogger-calls`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436534531",
            "id": 1436534531,
            "line": 273,
            "node_id": "PRRC_kwDOBBpw9M5Vn8cD",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 273,
            "original_position": 273,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 273,
            "pull_request_review_id": 1796443913,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436534531/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T16:51:40Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436534531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436564280"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436564280"
                }
            },
            "author_association": "MEMBER",
            "body": "That's good, but apparently it doesn't always trigger correctly. We have `\"*\"` enabled in clang-tidy, but I wrote this despite clang-tidy existing, being in use, and yet we had these. All linters written here are things we found that no other tool found, and thus wanted to fix everywhere.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:15:44Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436564280",
            "id": 1436564280,
            "in_reply_to_id": 1436512137,
            "line": 31,
            "node_id": "PRRC_kwDOBBpw9M5VoDs4",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 31,
            "original_position": 31,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 31,
            "pull_request_review_id": 1796519385,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436564280/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:15:44Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436564280",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436565973"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436565973"
                }
            },
            "author_association": "MEMBER",
            "body": "Again I implemented this because clang-tidy didn't catch it, or not in the way we wanted it. I'll have a look at both of these to see if anything has improved since I did this.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:21:14Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436565973",
            "id": 1436565973,
            "in_reply_to_id": 1436530900,
            "line": 133,
            "node_id": "PRRC_kwDOBBpw9M5VoEHV",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 133,
            "pull_request_review_id": 1796521897,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436565973/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:21:14Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436565973",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436566400"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436566400"
                }
            },
            "author_association": "MEMBER",
            "body": "Not quite. We actually want it to be a true string literal, not a thing composed of macros and strings and not a bunch of string literals concatenated.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:22:13Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`\n+\n+Warns if a variable can be marked as `const`, i.e. it is only initialised and\n+then never assigned again. Pointer types are exempt, i.e. `int *p = get_p();`\n+is fine and doesn't need to be written as `int *const p = get_p();`, but\n+`int q = get_q();`, if then `q` is never assigned again, should be written as\n+`const int q = get_q();`.\n+\n+**Reason:** `const` makes the no-assign local invariant clear. We exempt pointer\n+types at the moment, because making that change in toxcore would be a lot of\n+work and we perceive less value in that than in local integer constants, since\n+pointers, especially aggregate object pointers, already change less often.\n+\n+## `-Wdeclared-once` (global)\n+\n+Checks that any function is declared exactly once.\n+\n+**Reason:** functions should never be declared in multiple files, and within the\n+same file, declaring it twice is unnecessary and confusing.\n+\n+## `-Wdecls-have-defns` (global)\n+\n+Checks that all function declarations also have matching definitions.\n+\n+**Reason:** extern function declarations without definitions are not implemented\n+and cannot be used. This likely means the declaration was forgotten when\n+deleting a function.\n+\n+## `-Wdoc-comments` (global)\n+\n+Checks that doc comments on function definitions match the ones on their\n+corresponding declarations.\n+\n+**Reason:** ideally, documentation should be only in one place, but if it is\n+duplicated, it should not be different.\n+\n+## `-Wenum-defines`\n+\n+Suggests using `enum` instead of a sequence of `#define`s for enumerations.\n+Only matches sequences of `#define`s longer than 5 to avoid some false positives.\n+Also, the sequence must have a common prefix of at least 2 components. I.e.\n+`AAA` is not a sufficient common prefix, but `AAA_BBB` is.\n+Lastly, we only require enums for small-int enums, i.e. all enumerators have a\n+constant int expression value less than or equal to 255.\n+\n+**Reason:** `enum` constants are safer, and can potentially be type-checked\n+more thoroughly.\n+\n+## `-Wenum-from-int` (global)\n+\n+Checks that `_from_int` functions for `enum`s are complete.\n+\n+**Reason:** ensures that no enumerators are missed in conversion functions that\n+turn `int`s into `enum`s. Type-cast is not permitted, because some values of\n+type `int` are not in the enumeration.\n+\n+## `-Wenum-names`\n+\n+Checks that `enum` value constants have the same prefix as the `enum` type,\n+except they should be SCREAMING_CASE instead of Camel_Snake. There are currently\n+37 exemptions to this rule. New enums should follow the naming convention.\n+\n+**Reason:** this naming convention helps identify the type of an `enum` constant\n+at first glance.\n+\n+## `-Wenum-to-string` (global)\n+\n+Checks that `_to_string` functions for `enum`s are complete.\n+\n+**Reason:** we provide `to_string` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wenum-unpack` (global)\n+\n+Checks that `_unpack` functions for `enum`s are complete.\n+\n+**Reason:** we provide `unpack` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wfunc-prototypes`\n+\n+Checks that empty parameter lists in C functions are written as `(void)`.\n+\n+**Reason:** old-style empty parameter lists written as `()` are risky, because\n+C interprets them as variadic. GCC warns about this but sometimes misses one.\n+\n+## `-Wfunc-scopes`\n+\n+Checks that static function definitions are marked with `static`.\n+\n+In C, a function is `static` even if the definition doesn't use `static`, but\n+there happens to be another declaration of the function which does.\n+\n+**Reason:** static/extern qualification of functions should be visible locally.\n+It takes mental effort otherwise to look up the declaration to check for storage\n+qualifiers.\n+\n+## `-Wglobal-funcs`\n+\n+Checks that no extern functions are declared in .c files.\n+\n+Extern functions must only be declared in .h files. In .c files all declarations\n+must be static.\n+\n+**Reason:** extern declarations in .c files mean that we depend on a function\n+not declared in a .h file we can include. This means we're depending on an\n+unexported implementation detail, and there is no compiler that can check\n+whether our declaration matches the implementation's definition.\n+\n+## `-Wlarge-struct-params`\n+\n+Checks that large structs are passed by pointer rather than by value.\n+\n+Exemptions are enums and some well-known small structs:\n+\n+- `Family`\n+- `IP4`\n+- `Logger_Level`\n+- `Net_Packet_Type`\n+- `Onion_Connection_Status`\n+- `Packet`\n+- `Packet_Direction`\n+- `Socket`\n+- `State_Type`\n+\n+and anything with one of the following prefixes, which are probably enums:\n+\n+- `Group_`\n+- `MSI`\n+- `Tox_`\n+- `Toxav_`\n+\n+**Reason:** some structs in toxcore are up to 5MB in size, which would cause\n+stack overflows. Since we can't currently measure the size, we avoid any struct\n+passing altogether apart from some well-known exemptions.\n+\n+## `-Wlogger-calls`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436566400",
            "id": 1436566400,
            "in_reply_to_id": 1436534531,
            "line": 273,
            "node_id": "PRRC_kwDOBBpw9M5VoEOA",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 273,
            "original_position": 273,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 273,
            "pull_request_review_id": 1796522368,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436566400/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:22:14Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436566400",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436570114"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436570114"
                }
            },
            "author_association": "MEMBER",
            "body": "Not quite:\r\n\r\n> The check is only applied to parameters of types that are expensive to copy which means they are not trivially copyable or have a non-trivial copy constructor or destructor.\r\n\r\nAll our types are trivially copyable. That doesn't mean they are cheap to copy.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:34:35Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`\n+\n+Warns if a variable can be marked as `const`, i.e. it is only initialised and\n+then never assigned again. Pointer types are exempt, i.e. `int *p = get_p();`\n+is fine and doesn't need to be written as `int *const p = get_p();`, but\n+`int q = get_q();`, if then `q` is never assigned again, should be written as\n+`const int q = get_q();`.\n+\n+**Reason:** `const` makes the no-assign local invariant clear. We exempt pointer\n+types at the moment, because making that change in toxcore would be a lot of\n+work and we perceive less value in that than in local integer constants, since\n+pointers, especially aggregate object pointers, already change less often.\n+\n+## `-Wdeclared-once` (global)\n+\n+Checks that any function is declared exactly once.\n+\n+**Reason:** functions should never be declared in multiple files, and within the\n+same file, declaring it twice is unnecessary and confusing.\n+\n+## `-Wdecls-have-defns` (global)\n+\n+Checks that all function declarations also have matching definitions.\n+\n+**Reason:** extern function declarations without definitions are not implemented\n+and cannot be used. This likely means the declaration was forgotten when\n+deleting a function.\n+\n+## `-Wdoc-comments` (global)\n+\n+Checks that doc comments on function definitions match the ones on their\n+corresponding declarations.\n+\n+**Reason:** ideally, documentation should be only in one place, but if it is\n+duplicated, it should not be different.\n+\n+## `-Wenum-defines`\n+\n+Suggests using `enum` instead of a sequence of `#define`s for enumerations.\n+Only matches sequences of `#define`s longer than 5 to avoid some false positives.\n+Also, the sequence must have a common prefix of at least 2 components. I.e.\n+`AAA` is not a sufficient common prefix, but `AAA_BBB` is.\n+Lastly, we only require enums for small-int enums, i.e. all enumerators have a\n+constant int expression value less than or equal to 255.\n+\n+**Reason:** `enum` constants are safer, and can potentially be type-checked\n+more thoroughly.\n+\n+## `-Wenum-from-int` (global)\n+\n+Checks that `_from_int` functions for `enum`s are complete.\n+\n+**Reason:** ensures that no enumerators are missed in conversion functions that\n+turn `int`s into `enum`s. Type-cast is not permitted, because some values of\n+type `int` are not in the enumeration.\n+\n+## `-Wenum-names`\n+\n+Checks that `enum` value constants have the same prefix as the `enum` type,\n+except they should be SCREAMING_CASE instead of Camel_Snake. There are currently\n+37 exemptions to this rule. New enums should follow the naming convention.\n+\n+**Reason:** this naming convention helps identify the type of an `enum` constant\n+at first glance.\n+\n+## `-Wenum-to-string` (global)\n+\n+Checks that `_to_string` functions for `enum`s are complete.\n+\n+**Reason:** we provide `to_string` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wenum-unpack` (global)\n+\n+Checks that `_unpack` functions for `enum`s are complete.\n+\n+**Reason:** we provide `unpack` functions for `enum` but don't want to\n+manually maintain them. This linter checks that the function is exactly what\n+we want it to be, and the error message will say what the function should look\n+like.\n+\n+## `-Wfunc-prototypes`\n+\n+Checks that empty parameter lists in C functions are written as `(void)`.\n+\n+**Reason:** old-style empty parameter lists written as `()` are risky, because\n+C interprets them as variadic. GCC warns about this but sometimes misses one.\n+\n+## `-Wfunc-scopes`\n+\n+Checks that static function definitions are marked with `static`.\n+\n+In C, a function is `static` even if the definition doesn't use `static`, but\n+there happens to be another declaration of the function which does.\n+\n+**Reason:** static/extern qualification of functions should be visible locally.\n+It takes mental effort otherwise to look up the declaration to check for storage\n+qualifiers.\n+\n+## `-Wglobal-funcs`\n+\n+Checks that no extern functions are declared in .c files.\n+\n+Extern functions must only be declared in .h files. In .c files all declarations\n+must be static.\n+\n+**Reason:** extern declarations in .c files mean that we depend on a function\n+not declared in a .h file we can include. This means we're depending on an\n+unexported implementation detail, and there is no compiler that can check\n+whether our declaration matches the implementation's definition.\n+\n+## `-Wlarge-struct-params`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436570114",
            "id": 1436570114,
            "in_reply_to_id": 1436533865,
            "line": 246,
            "node_id": "PRRC_kwDOBBpw9M5VoFIC",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 246,
            "original_position": 246,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 246,
            "pull_request_review_id": 1796527466,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436570114/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:34:35Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436570114",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436572102"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436572102"
                }
            },
            "author_association": "MEMBER",
            "body": "I see this one is newer than our clang-tidy version (14). I'll upgrade and see if it works.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:41:01Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436572102",
            "id": 1436572102,
            "in_reply_to_id": 1436530900,
            "line": 133,
            "node_id": "PRRC_kwDOBBpw9M5VoFnG",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 133,
            "pull_request_review_id": 1796530301,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436572102/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:41:02Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436572102",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436575051"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436575051"
                }
            },
            "author_association": "MEMBER",
            "body": "I tested it. I removed const [here](https://github.com/TokTok/c-toxcore/blob/master/toxcore/DHT.c#L297) and ran only misc-const-correctness, and got no warnings. Let me know if I'm doing something wrong.",
            "commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "created_at": "2023-12-26T18:50:51Z",
            "diff_hunk": "@@ -0,0 +1,452 @@\n+# Cimple-based linters (`check-cimple`)\n+\n+There are currently 35 linters implemented, out of which 8 perform global analyses.\n+In the list below, the global ones are marked specially.\n+\n+## `-Wassert`\n+\n+Checks whether `assert` is side-effect-free. Only pure expressions\n+(no function calls, no assignments) and an allowlist of exemptions are permitted\n+within `assert`. The current list of exemptions is:\n+\n+- `make_family`\n+- `memcmp`\n+- `shared_key_is_empty`\n+- `tox_events_get_size`\n+\n+**Reason:** `assert` is compiled out in `NDEBUG` builds, so should not influence\n+logic of the code in debug modes to avoid different behaviours in different\n+compilation modes.\n+\n+## `-Wboolean-return`\n+\n+Checks for functions that always return constant integers and thus seem to be\n+semantically boolean functions. E.g. a function returning -1 for error and 0 for\n+success should rather return `false` for error and `true` for success and change\n+its return type to `bool`.\n+\n+**Reason:** boolean returns using `bool` (or an `enum` type) are clearer than\n+ones returning an `int` that happens to only have 2 possible values.\n+\n+## `-Wbooleans`\n+\n+Checks for if/else statements that return true/false and could be simplified to\n+just return. E.g.:\n+\n+```cpp\n+bool foo(void) {\n+  if (check_something()) {\n+    return false;\n+  }\n+  return true;\n+}\n+```\n+\n+could be simplified to:\n+\n+```cpp\n+bool foo(void) {\n+  return !check_something();\n+}\n+```\n+\n+Also checks for the use of `true` or `false` in binary expressions. E.g.\n+`a == true` should be `a` and `a != true` should be `!a`.\n+\n+**Reason:** simpler code is easier to read.\n+\n+## `-Wcallback-names`\n+\n+Checks for naming conventions for callbacks. Callback names should end in\n+`callback`, but the following list of suffixes is permitted:\n+\n+- `callback`\n+- `cb`\n+- `function`\n+- `handler`\n+\n+**Reason:** naming conventions help quickly understand the code.\n+\n+## `-Wcallgraph` (global)\n+\n+Performs various call graph related checks:\n+\n+- There should be no unused functions. Even unused `extern` functions are not\n+  permitted, except for the exported library interface.\n+- Only a subset of standard library, POSIX, WinAPI, or Darwin API functions are\n+  allowed. Any use of unvetted functions (such as `setjmp`) is not permitted.\n+- Recursion is not allowed outside of a few exemptions that should be fixed.\n+  Code should be written to use iteration, instead, possibly with a manually\n+  managed stack to keep intermediate results for algorithms like DFS.\n+\n+**Reason:**\n+\n+- Unused symbols require useless maintenance.\n+- We want to keep control over how much of the standard library we use.\n+- Unbounded recursion can cause stack overflows and makes it impossible to\n+  statically determine the maximum stack memory requirements of a program, which\n+  is especially useful in embedded software.\n+\n+## `-Wcalloc-args`\n+\n+Checks that `mem_alloc`, `mem_valloc`, and `mem_vrealloc` are used correctly:\n+\n+- The `size` argument (e.g. for `mem_alloc`, the second argument) should be a\n+  pure `sizeof` expression without additions or multiplications.\n+- There should be no `sizeof` in the `nmemb` argument of a memory allocation\n+  call.\n+\n+**Reason:** we want to avoid arbitrary computations in allocation sizes to\n+ensure the allocation size is exactly correct for the type of the object\n+being allocated.\n+\n+## `-Wcalloc-type`\n+\n+Checks that `mem_alloc` and other `calloc`-like functions are cast to the\n+correct type. The types in the `sizeof` expression and the type-cast expression\n+must be the same. Also, `calloc`-like functions should not be used for built-in\n+types such as `uint8_t` arrays. For this, use `mem_balloc`, instead.\n+\n+**Reason:** ensures that the allocation size is appropriate for the allocated\n+object. This makes allocation functions behave more like C++ `new`. For byte\n+arrays, we provide a separate function that doesn't need to zero out its memory\n+for efficiency and to make it easier to detect logic errors using msan or\n+valgrind that can detect uninitialised memory use.\n+\n+## `-Wcompound-init`\n+\n+Checks that compound literals aren't used in initialisations. E.g.:\n+\n+```cpp\n+Foo foo = (Foo){0};\n+```\n+\n+should be written as:\n+\n+```cpp\n+Foo foo = {0};\n+```\n+\n+**Reason:** compound literals aren't needed in initialisations. Without them,\n+the code is clearer.\n+\n+## `-Wconstness`",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#discussion_r1436575051",
            "id": 1436575051,
            "in_reply_to_id": 1436530900,
            "line": 133,
            "node_id": "PRRC_kwDOBBpw9M5VoGVL",
            "original_commit_id": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "original_line": 133,
            "original_position": 133,
            "original_start_line": null,
            "path": "doc/cimple.md",
            "position": 133,
            "pull_request_review_id": 1796535793,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436575051/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2023-12-26T18:50:51Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments/1436575051",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "MEMBER",
            "body": "I didn't know toktok-releaser merged even with unresolved conversations, but oh well.",
            "created_at": "2023-12-26T16:52:59Z",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#issuecomment-1869661249",
            "id": 1869661249,
            "issue_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226",
            "node_id": "IC_kwDOBBpw9M5vcMRB",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/comments/1869661249/reactions"
            },
            "updated_at": "2023-12-26T16:52:59Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/comments/1869661249",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> I didn't know toktok-releaser merged even with unresolved conversations, but oh well.\r\n\r\nFixed that. It won't do that again.",
            "created_at": "2023-12-26T18:51:21Z",
            "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226#issuecomment-1869716242",
            "id": 1869716242,
            "issue_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226",
            "node_id": "IC_kwDOBBpw9M5vcZsS",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/comments/1869716242/reactions"
            },
            "updated_at": "2023-12-26T18:51:21Z",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/comments/1869716242",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "comments_url": "https://api.github.com/repos/TokTok/hs-tokstyle/commits/231cece8f0787895a175f35ba7e95dc54fee087a/comments",
            "commit": {
                "author": {
                    "date": "2023-12-26T15:24:10Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2023-12-26T15:35:49Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "message": "docs: Add documentation for all cimple linters.",
                "tree": {
                    "sha": "ecb8a6158f273d71c033c1a411578ac8bb6afae5",
                    "url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/trees/ecb8a6158f273d71c033c1a411578ac8bb6afae5"
                },
                "url": "https://api.github.com/repos/TokTok/hs-tokstyle/git/commits/231cece8f0787895a175f35ba7e95dc54fee087a",
                "verification": {
                    "payload": "tree ecb8a6158f273d71c033c1a411578ac8bb6afae5\nparent 059749abb4ec1fed583558857b62e6b42e3cc802\nauthor iphydf <iphydf@users.noreply.github.com> 1703604250 +0000\ncommitter iphydf <iphydf@users.noreply.github.com> 1703604949 +0000\n\ndocs: Add documentation for all cimple linters.\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEqQ4tlxH906HdaIgsOFXbotdEA8kFAmWK8tYACgkQOFXbotdE\nA8lwgggAmKdTJQMMODRJuX7A+z4JShBiveTr7HajGBL/fAvBABk174B2h+aldktQ\nOqna+KUDIwJWnEt2md/BUFS4+ktorBixFceSF9QhibG1TRIMDuALfKpA/zijYqwn\npR7Chl0yYEGqCJ3sxZEvUudc49aaIwSfgkvDWqvhrVJ9HO1jyZ2P8fWDpF82IIjF\nf3ogn1rm4N+QniXumlHyrHj9K2ernYBliqxTTEMIDYCHVcNe9Uxuxf6yEIvoGZnD\nSUnH2eGSd3X59PVmBPbM7xb3EnuhKDO7f7QPpCgu++0IqKIPPBnCQgvBUs8uVE3D\ngaKG8pOhudbX4x9swMn++k51M/4kPQ==\n=xybu\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "html_url": "https://github.com/TokTok/hs-tokstyle/commit/231cece8f0787895a175f35ba7e95dc54fee087a",
            "node_id": "C_kwDOBFTjI9oAKDIzMWNlY2U4ZjA3ODc4OTVhMTc1ZjM1YmE3ZTk1ZGM1NGZlZTA4N2E",
            "parents": [
                {
                    "html_url": "https://github.com/TokTok/hs-tokstyle/commit/059749abb4ec1fed583558857b62e6b42e3cc802",
                    "sha": "059749abb4ec1fed583558857b62e6b42e3cc802",
                    "url": "https://api.github.com/repos/TokTok/hs-tokstyle/commits/059749abb4ec1fed583558857b62e6b42e3cc802"
                }
            ],
            "sha": "231cece8f0787895a175f35ba7e95dc54fee087a",
            "url": "https://api.github.com/repos/TokTok/hs-tokstyle/commits/231cece8f0787895a175f35ba7e95dc54fee087a"
        }
    ],
    "commits_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226/commits",
    "created_at": "2023-12-26T15:27:17Z",
    "diff_url": "https://github.com/TokTok/hs-tokstyle/pull/226.diff",
    "draft": false,
    "head": {
        "label": "iphydf:docs",
        "ref": "docs",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/iphydf/hs-tokstyle/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/iphydf/hs-tokstyle/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/iphydf/hs-tokstyle/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/iphydf/hs-tokstyle/branches{/branch}",
            "clone_url": "https://github.com/iphydf/hs-tokstyle.git",
            "collaborators_url": "https://api.github.com/repos/iphydf/hs-tokstyle/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/iphydf/hs-tokstyle/comments{/number}",
            "commits_url": "https://api.github.com/repos/iphydf/hs-tokstyle/commits{/sha}",
            "compare_url": "https://api.github.com/repos/iphydf/hs-tokstyle/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/iphydf/hs-tokstyle/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/iphydf/hs-tokstyle/contributors",
            "created_at": "2016-11-02T19:03:37Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/iphydf/hs-tokstyle/deployments",
            "description": "Style checker for TokTok C projects",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/iphydf/hs-tokstyle/downloads",
            "events_url": "https://api.github.com/repos/iphydf/hs-tokstyle/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/iphydf/hs-tokstyle/forks",
            "full_name": "iphydf/hs-tokstyle",
            "git_commits_url": "https://api.github.com/repos/iphydf/hs-tokstyle/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/iphydf/hs-tokstyle/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/iphydf/hs-tokstyle/git/tags{/sha}",
            "git_url": "git://github.com/iphydf/hs-tokstyle.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd/",
            "hooks_url": "https://api.github.com/repos/iphydf/hs-tokstyle/hooks",
            "html_url": "https://github.com/iphydf/hs-tokstyle",
            "id": 72672035,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/iphydf/hs-tokstyle/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/iphydf/hs-tokstyle/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/iphydf/hs-tokstyle/issues{/number}",
            "keys_url": "https://api.github.com/repos/iphydf/hs-tokstyle/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/iphydf/hs-tokstyle/labels{/name}",
            "language": "Haskell",
            "languages_url": "https://api.github.com/repos/iphydf/hs-tokstyle/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/iphydf/hs-tokstyle/merges",
            "milestones_url": "https://api.github.com/repos/iphydf/hs-tokstyle/milestones{/number}",
            "mirror_url": null,
            "name": "hs-tokstyle",
            "node_id": "MDEwOlJlcG9zaXRvcnk3MjY3MjAzNQ==",
            "notifications_url": "https://api.github.com/repos/iphydf/hs-tokstyle/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/iphydf/hs-tokstyle/pulls{/number}",
            "pushed_at": "2024-02-12T10:38:55Z",
            "releases_url": "https://api.github.com/repos/iphydf/hs-tokstyle/releases{/id}",
            "size": 585,
            "ssh_url": "git@github.com:iphydf/hs-tokstyle.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/iphydf/hs-tokstyle/stargazers",
            "statuses_url": "https://api.github.com/repos/iphydf/hs-tokstyle/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/iphydf/hs-tokstyle/subscribers",
            "subscription_url": "https://api.github.com/repos/iphydf/hs-tokstyle/subscription",
            "svn_url": "https://github.com/iphydf/hs-tokstyle",
            "tags_url": "https://api.github.com/repos/iphydf/hs-tokstyle/tags",
            "teams_url": "https://api.github.com/repos/iphydf/hs-tokstyle/teams",
            "topics": [
                "c",
                "linter",
                "style"
            ],
            "trees_url": "https://api.github.com/repos/iphydf/hs-tokstyle/git/trees{/sha}",
            "updated_at": "2023-12-28T23:50:16Z",
            "url": "https://api.github.com/repos/iphydf/hs-tokstyle",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "231cece8f0787895a175f35ba7e95dc54fee087a",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        }
    },
    "html_url": "https://github.com/TokTok/hs-tokstyle/pull/226",
    "id": 1657327879,
    "issue_url": "https://api.github.com/repos/TokTok/hs-tokstyle/issues/226",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "231cece8f0787895a175f35ba7e95dc54fee087a",
    "merged_at": "2023-12-26T16:52:31Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 151,
        "created_at": "2021-12-25T02:17:28Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        },
        "description": null,
        "due_on": null,
        "html_url": "https://github.com/TokTok/hs-tokstyle/milestone/7",
        "id": 7517680,
        "labels_url": "https://api.github.com/repos/TokTok/hs-tokstyle/milestones/7/labels",
        "node_id": "MI_kwDOBBpw9M4AcrXw",
        "number": 7,
        "open_issues": 3,
        "state": "open",
        "title": "v0.0.9",
        "updated_at": "2024-02-12T10:19:06Z",
        "url": "https://api.github.com/repos/TokTok/hs-tokstyle/milestones/7"
    },
    "node_id": "PR_kwDOBBpw9M5iyNEH",
    "number": 226,
    "patch_url": "https://github.com/TokTok/hs-tokstyle/pull/226.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/TokTok/hs-tokstyle/statuses/231cece8f0787895a175f35ba7e95dc54fee087a",
    "title": "docs: Add documentation for all cimple linters.",
    "updated_at": "2023-12-26T18:51:22Z",
    "url": "https://api.github.com/repos/TokTok/hs-tokstyle/pulls/226",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
        "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
        "followers_url": "https://api.github.com/users/iphydf/followers",
        "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
        "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/iphydf",
        "id": 10647936,
        "login": "iphydf",
        "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
        "organizations_url": "https://api.github.com/users/iphydf/orgs",
        "received_events_url": "https://api.github.com/users/iphydf/received_events",
        "repos_url": "https://api.github.com/users/iphydf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/iphydf"
    }
}