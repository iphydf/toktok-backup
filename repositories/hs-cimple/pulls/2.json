{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/issues/2/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2/commits"
        },
        "html": {
            "href": "https://github.com/TokTok/hs-cimple/pull/2"
        },
        "issue": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/issues/2"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2"
        },
        "statuses": {
            "href": "https://api.github.com/repos/TokTok/hs-cimple/statuses/d3e313b6656dc45374bedd35b25eb1b8cbfde013"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "TokTok:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TokTok/hs-cimple/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TokTok/hs-cimple/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TokTok/hs-cimple/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TokTok/hs-cimple/branches{/branch}",
            "clone_url": "https://github.com/TokTok/hs-cimple.git",
            "collaborators_url": "https://api.github.com/repos/TokTok/hs-cimple/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TokTok/hs-cimple/comments{/number}",
            "commits_url": "https://api.github.com/repos/TokTok/hs-cimple/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TokTok/hs-cimple/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TokTok/hs-cimple/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TokTok/hs-cimple/contributors",
            "created_at": "2020-04-10T00:24:08Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TokTok/hs-cimple/deployments",
            "description": "Cimple and Apidsl language parsers and tools",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TokTok/hs-cimple/downloads",
            "events_url": "https://api.github.com/repos/TokTok/hs-cimple/events",
            "fork": false,
            "forks": 1,
            "forks_count": 1,
            "forks_url": "https://api.github.com/repos/TokTok/hs-cimple/forks",
            "full_name": "TokTok/hs-cimple",
            "git_commits_url": "https://api.github.com/repos/TokTok/hs-cimple/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TokTok/hs-cimple/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TokTok/hs-cimple/git/tags{/sha}",
            "git_url": "git://github.com/TokTok/hs-cimple.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd/",
            "hooks_url": "https://api.github.com/repos/TokTok/hs-cimple/hooks",
            "html_url": "https://github.com/TokTok/hs-cimple",
            "id": 254506750,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TokTok/hs-cimple/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TokTok/hs-cimple/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TokTok/hs-cimple/issues{/number}",
            "keys_url": "https://api.github.com/repos/TokTok/hs-cimple/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TokTok/hs-cimple/labels{/name}",
            "language": "Haskell",
            "languages_url": "https://api.github.com/repos/TokTok/hs-cimple/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/TokTok/hs-cimple/merges",
            "milestones_url": "https://api.github.com/repos/TokTok/hs-cimple/milestones{/number}",
            "mirror_url": null,
            "name": "hs-cimple",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNTQ1MDY3NTA=",
            "notifications_url": "https://api.github.com/repos/TokTok/hs-cimple/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
                "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
                "followers_url": "https://api.github.com/users/TokTok/followers",
                "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
                "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TokTok",
                "id": 17427091,
                "login": "TokTok",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
                "organizations_url": "https://api.github.com/users/TokTok/orgs",
                "received_events_url": "https://api.github.com/users/TokTok/received_events",
                "repos_url": "https://api.github.com/users/TokTok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/TokTok"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls{/number}",
            "pushed_at": "2024-02-04T08:23:40Z",
            "releases_url": "https://api.github.com/repos/TokTok/hs-cimple/releases{/id}",
            "size": 408,
            "ssh_url": "git@github.com:TokTok/hs-cimple.git",
            "stargazers_count": 2,
            "stargazers_url": "https://api.github.com/repos/TokTok/hs-cimple/stargazers",
            "statuses_url": "https://api.github.com/repos/TokTok/hs-cimple/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TokTok/hs-cimple/subscribers",
            "subscription_url": "https://api.github.com/repos/TokTok/hs-cimple/subscription",
            "svn_url": "https://github.com/TokTok/hs-cimple",
            "tags_url": "https://api.github.com/repos/TokTok/hs-cimple/tags",
            "teams_url": "https://api.github.com/repos/TokTok/hs-cimple/teams",
            "topics": [
                "c",
                "dsl",
                "parser"
            ],
            "trees_url": "https://api.github.com/repos/TokTok/hs-cimple/git/trees{/sha}",
            "updated_at": "2022-03-18T20:24:23Z",
            "url": "https://api.github.com/repos/TokTok/hs-cimple",
            "visibility": "public",
            "watchers": 2,
            "watchers_count": 2,
            "web_commit_signoff_required": false
        },
        "sha": "6161665de70bd8661cb43b072ed44b7e8aecb264",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
            "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
            "followers_url": "https://api.github.com/users/TokTok/followers",
            "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
            "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TokTok",
            "id": 17427091,
            "login": "TokTok",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
            "organizations_url": "https://api.github.com/users/TokTok/orgs",
            "received_events_url": "https://api.github.com/users/TokTok/received_events",
            "repos_url": "https://api.github.com/users/TokTok/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/TokTok"
        }
    },
    "body": "\n\n<!-- Reviewable:start -->\nThis change isâ€‚[<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/toktok/hs-cimple/2)\n<!-- Reviewable:end -->\n",
    "closed_at": "2020-04-19T20:24:55Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410893310"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410893310"
                }
            },
            "author_association": "MEMBER",
            "body": "esif?",
            "commit_id": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "created_at": "2020-04-19T12:27:59Z",
            "diff_hunk": "@@ -0,0 +1,574 @@\n+module Language.Cimple.Pretty (ppTranslationUnit) where\n+\n+import qualified Data.List                    as List\n+import           Data.Text                    (Text)\n+import qualified Data.Text                    as Text\n+import           Language.Cimple              (AssignOp (..), BinaryOp (..),\n+                                               CommentStyle (..), Lexeme (..),\n+                                               LexemeClass (..), Node (..),\n+                                               Scope (..), UnaryOp (..),\n+                                               lexemeText)\n+import           Prelude                      hiding ((<$>))\n+import           Text.Groom                   (groom)\n+import           Text.PrettyPrint.ANSI.Leijen\n+\n+ppText :: Text -> Doc\n+ppText = text . Text.unpack\n+\n+ppLexeme :: Lexeme Text -> Doc\n+ppLexeme = ppText . lexemeText\n+\n+ppOpt :: (a -> Doc) -> Maybe a -> Doc\n+ppOpt _ Nothing  = empty\n+ppOpt f (Just x) = f x\n+\n+ppCommaSep :: (a -> Doc) -> [a] -> Doc\n+ppCommaSep go = foldr (<>) empty . List.intersperse (text \", \") . map go\n+\n+ppLineSep :: (a -> Doc) -> [a] -> Doc\n+ppLineSep go = foldr (<>) empty . List.intersperse linebreak . map go\n+\n+ppComment :: CommentStyle -> [Node (Lexeme Text)] -> Doc\n+ppComment style cs =\n+    nest 1 (ppCommentStyle style <> ppCommentBody cs) <$> text \" */\"\n+\n+ppCommentStyle :: CommentStyle -> Doc\n+ppCommentStyle Block   = text \"/***\"\n+ppCommentStyle Doxygen = text \"/**\"\n+ppCommentStyle Regular = text \"/*\"\n+\n+ppCommentBody :: [Node (Lexeme Text)] -> Doc\n+ppCommentBody = go . map unCommentWord\n+  where\n+    unCommentWord (CommentWord l) = l\n+    unCommentWord x               = error $ groom x\n+\n+    go (L _ LitInteger t1 : L _ PctMinus m : L _ LitInteger t2 : xs) =\n+        space <> ppText t1 <> ppText m <> ppText t2 <> go xs\n+    go (L _ PctMinus m : L _ LitInteger t : xs) =\n+        space <> ppText m <> ppText t <> go xs\n+\n+    go (l : L _ PctPeriod t : xs) = go [l] <> ppText t <> go xs\n+    go (l : L _ PctComma  t : xs) = go [l] <> ppText t <> go xs\n+    go (x                   : xs) = ppWord x <> go xs\n+    go []                         = empty\n+\n+    ppWord (L _ CmtSpdxLicense   t) = space <> ppText t\n+    ppWord (L _ CmtSpdxCopyright t) = space <> ppText t\n+    ppWord (L _ CmtWord          t) = space <> ppText t\n+    ppWord (L _ CmtCode          t) = space <> ppText t\n+    ppWord (L _ CmtRef           t) = space <> ppText t\n+    ppWord (L _ PpNewline        _) = linebreak <> char '*'\n+    ppWord (L _ LitInteger       t) = space <> ppText t\n+    ppWord (L _ LitString        t) = space <> ppText t\n+    ppWord (L _ PctEMark         t) = space <> ppText t\n+    ppWord (L _ PctPlus          t) = space <> ppText t\n+    ppWord (L _ PctEq            t) = space <> ppText t\n+    ppWord (L _ PctMinus         t) = space <> ppText t\n+    ppWord (L _ PctPeriod        t) = space <> ppText t\n+    ppWord (L _ PctLParen        t) = space <> ppText t\n+    ppWord (L _ PctRParen        t) = space <> ppText t\n+    ppWord (L _ PctSemicolon     t) = space <> ppText t\n+    ppWord (L _ PctColon         t) = space <> ppText t\n+    ppWord (L _ PctQMark         t) = space <> ppText t\n+    ppWord (L _ PctSlash         t) = space <> ppText t\n+    ppWord (L _ PctGreater       t) = space <> ppText t\n+    ppWord (L _ PctLess          t) = space <> ppText t\n+    ppWord (L _ PctComma         t) = space <> ppText t\n+    ppWord x                        = error $ groom x\n+\n+ppScope :: Scope -> Doc\n+ppScope Global = empty\n+ppScope Static = text \"static \"\n+\n+ppType :: Node (Lexeme Text) -> Doc\n+ppType (TyPointer     ty) = ppType ty <> char '*'\n+ppType (TyConst       ty) = ppType ty <+> text \"const\"\n+ppType (TyUserDefined l ) = ppLexeme l\n+ppType (TyStd         l ) = ppLexeme l\n+ppType (TyFunc        l ) = ppLexeme l\n+ppType (TyStruct      l ) = text \"struct\" <+> ppLexeme l\n+ppType (TyVar         l ) = ppLexeme l\n+ppType x                  = error . groom $ x\n+\n+ppAssignOp :: AssignOp -> Doc\n+ppAssignOp op = case op of\n+    AopEq     -> text \"=\"\n+    AopMul    -> text \"*=\"\n+    AopDiv    -> text \"/=\"\n+    AopPlus   -> text \"+=\"\n+    AopMinus  -> text \"-=\"\n+    AopBitAnd -> text \"&=\"\n+    AopBitOr  -> text \"|=\"\n+    AopBitXor -> text \"^=\"\n+    AopMod    -> text \"%=\"\n+    AopLsh    -> text \">>=\"\n+    AopRsh    -> text \"<<=\"\n+\n+ppBinaryOp :: BinaryOp -> Doc\n+ppBinaryOp op = case op of\n+    BopNe     -> text \"!=\"\n+    BopEq     -> text \"==\"\n+    BopOr     -> text \"||\"\n+    BopBitXor -> char '^'\n+    BopBitOr  -> char '|'\n+    BopAnd    -> text \"&&\"\n+    BopBitAnd -> char '&'\n+    BopDiv    -> char '/'\n+    BopMul    -> char '*'\n+    BopMod    -> char '%'\n+    BopPlus   -> char '+'\n+    BopMinus  -> char '-'\n+    BopLt     -> char '<'\n+    BopLe     -> text \"<=\"\n+    BopLsh    -> text \"<<\"\n+    BopGt     -> char '>'\n+    BopGe     -> text \">=\"\n+    BopRsh    -> text \">>\"\n+\n+ppUnaryOp :: UnaryOp -> Doc\n+ppUnaryOp op = case op of\n+    UopNot     -> char '!'\n+    UopNeg     -> char '~'\n+    UopMinus   -> char '-'\n+    UopAddress -> char '&'\n+    UopDeref   -> char '*'\n+    UopIncr    -> text \"++\"\n+    UopDecr    -> text \"--\"\n+\n+ppInitialiserList :: [Node (Lexeme Text)] -> Doc\n+ppInitialiserList l = char '{' <+> ppCommaSep ppExpr l <+> char '}'\n+\n+ppDeclSpec :: Node (Lexeme Text) -> Doc\n+ppDeclSpec (DeclSpecVar var        ) = ppLexeme var\n+ppDeclSpec (DeclSpecArray dspec dim) = ppDeclSpec dspec <> ppDim dim\n+  where\n+    ppDim Nothing  = text \"[]\"\n+    ppDim (Just x) = char '[' <> ppExpr x <> char ']'\n+ppDeclSpec x = error $ groom x\n+\n+ppDeclaratorList :: [Node (Lexeme Text)] -> Doc\n+ppDeclaratorList = ppCommaSep ppDeclarator\n+\n+ppDeclarator :: Node (Lexeme Text) -> Doc\n+ppDeclarator (Declarator dspec Nothing) =\n+    ppDeclSpec dspec\n+ppDeclarator (Declarator dspec (Just initr)) =\n+    ppDeclSpec dspec <+> char '=' <+> ppExpr initr\n+ppDeclarator x = error $ groom x\n+\n+ppFunctionParamList :: [Node (Lexeme Text)] -> Doc\n+ppFunctionParamList xs = char '(' <> ppCommaSep go xs <> char ')'\n+  where\n+    go (TyStd l@(L _ KwVoid _)) = ppLexeme l\n+    go (FunctionParam ty dspec) = ppType ty <+> ppDeclSpec dspec\n+    go Ellipsis                 = text \"...\"\n+    go x                        = error $ groom x\n+\n+ppFunctionPrototype\n+    :: Node (Lexeme Text)\n+    -> Lexeme Text\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppFunctionPrototype ty name params =\n+    ppType ty <+> ppLexeme name <> ppFunctionParamList params\n+\n+ppWithError :: Maybe (Node (Lexeme Text)) -> Doc\n+ppWithError Nothing = char ';'\n+ppWithError (Just (ErrorFor name)) =\n+    text \" with error for\" <+> ppLexeme name <> char ';'\n+ppWithError (Just (ErrorList errs)) =\n+    nest 2 (\n+        text \" with error\" <+> char '{' <$>\n+        ppEnumeratorList errs\n+    ) <$> char '}'\n+ppWithError x = error $ groom x\n+\n+ppFunctionCall :: Node (Lexeme Text) -> [Node (Lexeme Text)] -> Doc\n+ppFunctionCall callee args =\n+    ppExpr callee <> char '(' <> ppCommaSep ppExpr args <> char ')'\n+\n+ppMacroBody :: Node (Lexeme Text) -> Doc\n+ppMacroBody (MacroBodyFunCall e@FunctionCall{}) = ppExpr e\n+ppMacroBody (MacroBodyStmt body) =\n+    nest 2 (\n+        text \"do {\" <$>\n+        ppStmtList body\n+    ) <$> text \"} while (0)\"\n+ppMacroBody x                                   = error $ groom x\n+\n+ppMacroParam :: Node (Lexeme Text) -> Doc\n+ppMacroParam (MacroParam l) = ppLexeme l\n+ppMacroParam Ellipsis       = text \"...\"\n+ppMacroParam x              = error $ groom x\n+\n+ppMacroParamList :: [Node (Lexeme Text)] -> Doc\n+ppMacroParamList xs = char '(' <> ppCommaSep ppMacroParam xs <> char ')'\n+\n+ppNamespace :: ([a] -> Doc) -> Scope -> Lexeme Text -> [a] -> Doc\n+ppNamespace pp scope name members =\n+    nest 2 (\n+        ppScope scope <>\n+        text \"namespace\" <+> ppLexeme name <+> char '{' <$>\n+        pp members\n+    ) <$> char '}'\n+\n+ppEnumerator :: Node (Lexeme Text) -> Doc\n+ppEnumerator (Comment    style cs     ) = ppComment style cs\n+ppEnumerator (Enumerator name  Nothing) = ppLexeme name <> char ','\n+ppEnumerator (Enumerator name (Just value)) =\n+    ppLexeme name <+> char '=' <+> ppExpr value <> char ','\n+ppEnumerator (Namespace scope name members) =\n+    ppNamespace ppEnumeratorList scope name members\n+ppEnumerator x = error $ groom x\n+\n+ppEnumeratorList :: [Node (Lexeme Text)] -> Doc\n+ppEnumeratorList = ppLineSep ppEnumerator\n+\n+ppMemberDecl :: Node (Lexeme Text) -> Doc\n+ppMemberDecl = ppDecl\n+\n+ppMemberDeclList :: [Node (Lexeme Text)] -> Doc\n+ppMemberDeclList = ppLineSep ppMemberDecl\n+\n+ppAccessor :: Node (Lexeme Text) -> Doc\n+ppAccessor (Comment style cs) = ppComment style cs\n+ppAccessor (Accessor name params errs) =\n+    ppLexeme name <> ppFunctionParamList params <> ppWithError errs\n+ppAccessor x = error $ groom x\n+\n+ppAccessorList :: [Node (Lexeme Text)] -> Doc\n+ppAccessorList = ppLineSep ppAccessor\n+\n+ppEventType :: Node (Lexeme Text) -> Doc\n+ppEventType (Commented (Comment style cs) ty) =\n+    ppComment style cs <$> ppEventType ty\n+ppEventType (EventParams params) =\n+    text \"typedef void\" <> ppFunctionParamList params\n+ppEventType x = error $ groom x\n+\n+ppTypeParams :: [Node (Lexeme Text)] -> Doc\n+ppTypeParams [] = empty\n+ppTypeParams xs = char '<' <> ppCommaSep pp xs <> char '>'\n+  where\n+    pp (TyVar x) = ppLexeme x\n+    pp x         = error $ groom x\n+\n+ppCompoundStmt :: [Node (Lexeme Text)] -> Doc\n+ppCompoundStmt body =\n+    nest 2 (\n+        char '{' <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppStmtList :: [Node (Lexeme Text)] -> Doc\n+ppStmtList = ppLineSep ppDecl\n+\n+ppIfStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Maybe (Node (Lexeme Text))\n+    -> Doc\n+ppIfStmt cond t Nothing =\n+    nest 2 (\n+        text \"if (\" <> ppExpr cond <> text \") {\" <$>\n+        ppStmtList t\n+    ) <$> char '}'\n+ppIfStmt cond t (Just e) =\n+    nest 2 (\n+        text \"if (\" <> ppExpr cond <> text \") {\" <$>\n+        ppStmtList t\n+    ) <$> nest 2 (char '}' <> text \" else \" <> ppDecl e)\n+\n+ppForStmt\n+    :: Maybe (Node (Lexeme Text))\n+    -> Maybe (Node (Lexeme Text))\n+    -> Maybe (Node (Lexeme Text))\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppForStmt i c n body =\n+    nest 2 (\n+        text \"for (\"\n+        <> ppForInit i\n+        <+> ppOpt ppExpr c <> char ';'\n+        <+> ppOpt ppExpr n\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+  where\n+    ppForInit Nothing  = char ';'\n+    ppForInit (Just s) = ppDecl s\n+\n+ppWhileStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppWhileStmt c body =\n+    nest 2 (\n+        text \"while (\"\n+        <> ppExpr c\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppDoWhileStmt\n+    :: [Node (Lexeme Text)]\n+    -> Node (Lexeme Text)\n+    -> Doc\n+ppDoWhileStmt body c =\n+    nest 2 (\n+        text \"do (\"\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> text \"} while (\" <> ppExpr c <> char ')'\n+\n+ppSwitchStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppSwitchStmt c body =\n+    nest 2 (\n+        text \"switch (\"\n+        <> ppExpr c\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppExpr :: Node (Lexeme Text) -> Doc\n+ppExpr expr = case expr of\n+    -- Expressions\n+    VarExpr var       -> ppLexeme var\n+    LiteralExpr _ l   -> ppLexeme l\n+    SizeofExpr arg    -> text \"sizeof(\" <> ppExpr arg <> char ')'\n+    SizeofType arg    -> text \"sizeof(\" <> ppType arg <> char ')'\n+    BinaryExpr  l o r -> ppExpr l <+> ppBinaryOp o <+> ppExpr r\n+    AssignExpr  l o r -> ppExpr l <+> ppAssignOp o <+> ppExpr r\n+    TernaryExpr c t e -> ppTernaryExpr c t e\n+    UnaryExpr o e     -> ppUnaryOp o <> ppExpr e\n+    ParenExpr e       -> char '(' <> ppExpr e <> char ')'\n+    FunctionCall c  a -> ppFunctionCall c a\n+    ArrayAccess  e  i -> ppExpr e <> char '[' <> ppExpr i <> char ']'\n+    CastExpr     ty e -> char '(' <> ppType ty <> char ')' <> ppExpr e\n+    PreprocDefined  n -> text \"defined(\" <> ppLexeme n <> char ')'\n+    InitialiserList l -> ppInitialiserList l\n+    PointerAccess e m -> ppExpr e <> text \"->\" <> ppLexeme m\n+    MemberAccess  e m -> ppExpr e <> text \".\" <> ppLexeme m\n+    CommentExpr   c e -> ppCommentExpr c e\n+\n+    x                 -> error $ groom x\n+\n+ppTernaryExpr\n+    :: Node (Lexeme Text) -> Node (Lexeme Text) -> Node (Lexeme Text) -> Doc\n+ppTernaryExpr c t e =\n+    ppExpr c <+> char '?' <+> ppExpr t <+> char ':' <+> ppExpr e\n+\n+ppCommentExpr :: Node (Lexeme Text) -> Node (Lexeme Text) -> Doc\n+ppCommentExpr (Comment style body) e =\n+    ppCommentStyle style <+> ppCommentBody body <+> text \"*/\" <+> ppExpr e\n+ppCommentExpr c _ = error $ groom c\n+\n+ppStmt :: Node (Lexeme Text) -> Doc\n+ppStmt = ppDecl\n+\n+ppDeclList :: [Node (Lexeme Text)] -> Doc\n+ppDeclList = ppLineSep ppDecl\n+\n+ppDecl :: Node (Lexeme Text) -> Doc\n+ppDecl decl = case decl of\n+    PreprocElif cond decls (PreprocElse []) ->\n+        text \"#esif\" <+> ppExpr cond <$>",
            "html_url": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410893310",
            "id": 410893310,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg5MzMxMA==",
            "original_commit_id": "0e403a6203354c076a0a07b43f2f6b2a96cc2125",
            "original_line": 379,
            "original_position": 379,
            "original_start_line": null,
            "path": "src/Language/Cimple/Pretty.hs",
            "position": null,
            "pull_request_review_id": 396011324,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410893310/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-04-19T20:00:05Z",
            "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410893310",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410894111"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410894111"
                }
            },
            "author_association": "MEMBER",
            "body": "East const best const?",
            "commit_id": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "created_at": "2020-04-19T12:32:17Z",
            "diff_hunk": "@@ -0,0 +1,101 @@\n+module Language.Cimple.PrettySpec where\n+\n+import           Test.Hspec                   (Spec, describe, it, shouldBe)\n+\n+import qualified Data.Text                    as Text\n+import           Language.Cimple.IO           (parseText)\n+import           Language.Cimple.Pretty       (ppTranslationUnit)\n+import           Text.PrettyPrint.ANSI.Leijen (displayS, renderCompact)\n+\n+getRight :: Either String a -> a\n+getRight (Left  err) = error err\n+getRight (Right ok ) = ok\n+\n+pretty :: String -> IO String\n+pretty = fmap (show . ppTranslationUnit . getRight) . parseText . Text.pack\n+\n+compact :: String -> IO String\n+compact =\n+    fmap (flip displayS \"\" . renderCompact . ppTranslationUnit . getRight)\n+        . parseText\n+        . Text.pack\n+\n+\n+spec :: Spec\n+spec = do\n+    describe \"renderPretty\" $ do\n+        it \"pretty-prints a simple C function\" $ do\n+            pp <- pretty \"int a(void) { return 3; }\"\n+            pp `shouldBe` unlines\n+                [ \"int a(void)\"\n+                , \"{\"\n+                , \"  return 3;\"\n+                , \"}\"\n+                ]\n+\n+        it \"pretty-prints a typedef struct\" $ do\n+            pp <- pretty \"typedef struct Foo { int32_t x; } Foo;\"\n+            pp `shouldBe` unlines\n+                [ \"typedef struct Foo {\"\n+                , \"  int32_t x;\"\n+                , \"} Foo;\"\n+                ]\n+\n+    describe \"renderCompact\" $ do\n+        it \"pretty-prints a simple C function\" $ do\n+            pp <- compact \"int a(void) { return 3; }\"\n+            pp `shouldBe` unlines\n+                [ \"int a(void)\"\n+                , \"{\"\n+                , \"return 3;\"\n+                , \"}\"\n+                ]\n+\n+        it \"pretty-prints a typedef struct\" $ do\n+            pp <- compact \"typedef struct Foo { int32_t x; } Foo;\"\n+            pp `shouldBe` unlines\n+                [ \"typedef struct Foo {\"\n+                , \"int32_t x;\"\n+                , \"} Foo;\"\n+                ]\n+\n+        it \"respects comment styles\" $ do\n+            compact \"/* foo bar */\" >>= (`shouldBe` \"/* foo bar\\n */\\n\")\n+            compact \"/** foo bar */\" >>= (`shouldBe` \"/** foo bar\\n */\\n\")\n+            compact \"/*** foo bar */\" >>= (`shouldBe` \"/*** foo bar\\n */\\n\")\n+            compact \"/**** foo bar */\" >>= (`shouldBe` \"/*** foo bar\\n */\\n\")\n+\n+        it \"supports punctuation in comments\" $ do\n+            compact \"/* foo.bar,baz-blep */\"\n+                >>= (`shouldBe` \"/* foo. bar, baz - blep\\n */\\n\")\n+            compact \"/* foo? */\" >>= (`shouldBe` \"/* foo ?\\n */\\n\")\n+\n+        it \"formats number ranges and negative numbers without spacing\" $ do\n+            compact \"/* 123 - 456 */\" >>= (`shouldBe` \"/* 123-456\\n */\\n\")\n+            compact \"/* - 3 */\" >>= (`shouldBe` \"/* -3\\n */\\n\")\n+            compact \"/* a-b */\" >>= (`shouldBe` \"/* a - b\\n */\\n\")\n+\n+        it \"formats pointer types with east-const\" $ do",
            "html_url": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410894111",
            "id": 410894111,
            "line": 78,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg5NDExMQ==",
            "original_commit_id": "0e403a6203354c076a0a07b43f2f6b2a96cc2125",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "test/Language/Cimple/PrettySpec.hs",
            "position": 78,
            "pull_request_review_id": 396011324,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410894111/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-04-19T20:00:05Z",
            "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410894111",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410979725"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410979725"
                }
            },
            "author_association": "MEMBER",
            "body": "Fixed.",
            "commit_id": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "created_at": "2020-04-19T20:00:18Z",
            "diff_hunk": "@@ -0,0 +1,574 @@\n+module Language.Cimple.Pretty (ppTranslationUnit) where\n+\n+import qualified Data.List                    as List\n+import           Data.Text                    (Text)\n+import qualified Data.Text                    as Text\n+import           Language.Cimple              (AssignOp (..), BinaryOp (..),\n+                                               CommentStyle (..), Lexeme (..),\n+                                               LexemeClass (..), Node (..),\n+                                               Scope (..), UnaryOp (..),\n+                                               lexemeText)\n+import           Prelude                      hiding ((<$>))\n+import           Text.Groom                   (groom)\n+import           Text.PrettyPrint.ANSI.Leijen\n+\n+ppText :: Text -> Doc\n+ppText = text . Text.unpack\n+\n+ppLexeme :: Lexeme Text -> Doc\n+ppLexeme = ppText . lexemeText\n+\n+ppOpt :: (a -> Doc) -> Maybe a -> Doc\n+ppOpt _ Nothing  = empty\n+ppOpt f (Just x) = f x\n+\n+ppCommaSep :: (a -> Doc) -> [a] -> Doc\n+ppCommaSep go = foldr (<>) empty . List.intersperse (text \", \") . map go\n+\n+ppLineSep :: (a -> Doc) -> [a] -> Doc\n+ppLineSep go = foldr (<>) empty . List.intersperse linebreak . map go\n+\n+ppComment :: CommentStyle -> [Node (Lexeme Text)] -> Doc\n+ppComment style cs =\n+    nest 1 (ppCommentStyle style <> ppCommentBody cs) <$> text \" */\"\n+\n+ppCommentStyle :: CommentStyle -> Doc\n+ppCommentStyle Block   = text \"/***\"\n+ppCommentStyle Doxygen = text \"/**\"\n+ppCommentStyle Regular = text \"/*\"\n+\n+ppCommentBody :: [Node (Lexeme Text)] -> Doc\n+ppCommentBody = go . map unCommentWord\n+  where\n+    unCommentWord (CommentWord l) = l\n+    unCommentWord x               = error $ groom x\n+\n+    go (L _ LitInteger t1 : L _ PctMinus m : L _ LitInteger t2 : xs) =\n+        space <> ppText t1 <> ppText m <> ppText t2 <> go xs\n+    go (L _ PctMinus m : L _ LitInteger t : xs) =\n+        space <> ppText m <> ppText t <> go xs\n+\n+    go (l : L _ PctPeriod t : xs) = go [l] <> ppText t <> go xs\n+    go (l : L _ PctComma  t : xs) = go [l] <> ppText t <> go xs\n+    go (x                   : xs) = ppWord x <> go xs\n+    go []                         = empty\n+\n+    ppWord (L _ CmtSpdxLicense   t) = space <> ppText t\n+    ppWord (L _ CmtSpdxCopyright t) = space <> ppText t\n+    ppWord (L _ CmtWord          t) = space <> ppText t\n+    ppWord (L _ CmtCode          t) = space <> ppText t\n+    ppWord (L _ CmtRef           t) = space <> ppText t\n+    ppWord (L _ PpNewline        _) = linebreak <> char '*'\n+    ppWord (L _ LitInteger       t) = space <> ppText t\n+    ppWord (L _ LitString        t) = space <> ppText t\n+    ppWord (L _ PctEMark         t) = space <> ppText t\n+    ppWord (L _ PctPlus          t) = space <> ppText t\n+    ppWord (L _ PctEq            t) = space <> ppText t\n+    ppWord (L _ PctMinus         t) = space <> ppText t\n+    ppWord (L _ PctPeriod        t) = space <> ppText t\n+    ppWord (L _ PctLParen        t) = space <> ppText t\n+    ppWord (L _ PctRParen        t) = space <> ppText t\n+    ppWord (L _ PctSemicolon     t) = space <> ppText t\n+    ppWord (L _ PctColon         t) = space <> ppText t\n+    ppWord (L _ PctQMark         t) = space <> ppText t\n+    ppWord (L _ PctSlash         t) = space <> ppText t\n+    ppWord (L _ PctGreater       t) = space <> ppText t\n+    ppWord (L _ PctLess          t) = space <> ppText t\n+    ppWord (L _ PctComma         t) = space <> ppText t\n+    ppWord x                        = error $ groom x\n+\n+ppScope :: Scope -> Doc\n+ppScope Global = empty\n+ppScope Static = text \"static \"\n+\n+ppType :: Node (Lexeme Text) -> Doc\n+ppType (TyPointer     ty) = ppType ty <> char '*'\n+ppType (TyConst       ty) = ppType ty <+> text \"const\"\n+ppType (TyUserDefined l ) = ppLexeme l\n+ppType (TyStd         l ) = ppLexeme l\n+ppType (TyFunc        l ) = ppLexeme l\n+ppType (TyStruct      l ) = text \"struct\" <+> ppLexeme l\n+ppType (TyVar         l ) = ppLexeme l\n+ppType x                  = error . groom $ x\n+\n+ppAssignOp :: AssignOp -> Doc\n+ppAssignOp op = case op of\n+    AopEq     -> text \"=\"\n+    AopMul    -> text \"*=\"\n+    AopDiv    -> text \"/=\"\n+    AopPlus   -> text \"+=\"\n+    AopMinus  -> text \"-=\"\n+    AopBitAnd -> text \"&=\"\n+    AopBitOr  -> text \"|=\"\n+    AopBitXor -> text \"^=\"\n+    AopMod    -> text \"%=\"\n+    AopLsh    -> text \">>=\"\n+    AopRsh    -> text \"<<=\"\n+\n+ppBinaryOp :: BinaryOp -> Doc\n+ppBinaryOp op = case op of\n+    BopNe     -> text \"!=\"\n+    BopEq     -> text \"==\"\n+    BopOr     -> text \"||\"\n+    BopBitXor -> char '^'\n+    BopBitOr  -> char '|'\n+    BopAnd    -> text \"&&\"\n+    BopBitAnd -> char '&'\n+    BopDiv    -> char '/'\n+    BopMul    -> char '*'\n+    BopMod    -> char '%'\n+    BopPlus   -> char '+'\n+    BopMinus  -> char '-'\n+    BopLt     -> char '<'\n+    BopLe     -> text \"<=\"\n+    BopLsh    -> text \"<<\"\n+    BopGt     -> char '>'\n+    BopGe     -> text \">=\"\n+    BopRsh    -> text \">>\"\n+\n+ppUnaryOp :: UnaryOp -> Doc\n+ppUnaryOp op = case op of\n+    UopNot     -> char '!'\n+    UopNeg     -> char '~'\n+    UopMinus   -> char '-'\n+    UopAddress -> char '&'\n+    UopDeref   -> char '*'\n+    UopIncr    -> text \"++\"\n+    UopDecr    -> text \"--\"\n+\n+ppInitialiserList :: [Node (Lexeme Text)] -> Doc\n+ppInitialiserList l = char '{' <+> ppCommaSep ppExpr l <+> char '}'\n+\n+ppDeclSpec :: Node (Lexeme Text) -> Doc\n+ppDeclSpec (DeclSpecVar var        ) = ppLexeme var\n+ppDeclSpec (DeclSpecArray dspec dim) = ppDeclSpec dspec <> ppDim dim\n+  where\n+    ppDim Nothing  = text \"[]\"\n+    ppDim (Just x) = char '[' <> ppExpr x <> char ']'\n+ppDeclSpec x = error $ groom x\n+\n+ppDeclaratorList :: [Node (Lexeme Text)] -> Doc\n+ppDeclaratorList = ppCommaSep ppDeclarator\n+\n+ppDeclarator :: Node (Lexeme Text) -> Doc\n+ppDeclarator (Declarator dspec Nothing) =\n+    ppDeclSpec dspec\n+ppDeclarator (Declarator dspec (Just initr)) =\n+    ppDeclSpec dspec <+> char '=' <+> ppExpr initr\n+ppDeclarator x = error $ groom x\n+\n+ppFunctionParamList :: [Node (Lexeme Text)] -> Doc\n+ppFunctionParamList xs = char '(' <> ppCommaSep go xs <> char ')'\n+  where\n+    go (TyStd l@(L _ KwVoid _)) = ppLexeme l\n+    go (FunctionParam ty dspec) = ppType ty <+> ppDeclSpec dspec\n+    go Ellipsis                 = text \"...\"\n+    go x                        = error $ groom x\n+\n+ppFunctionPrototype\n+    :: Node (Lexeme Text)\n+    -> Lexeme Text\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppFunctionPrototype ty name params =\n+    ppType ty <+> ppLexeme name <> ppFunctionParamList params\n+\n+ppWithError :: Maybe (Node (Lexeme Text)) -> Doc\n+ppWithError Nothing = char ';'\n+ppWithError (Just (ErrorFor name)) =\n+    text \" with error for\" <+> ppLexeme name <> char ';'\n+ppWithError (Just (ErrorList errs)) =\n+    nest 2 (\n+        text \" with error\" <+> char '{' <$>\n+        ppEnumeratorList errs\n+    ) <$> char '}'\n+ppWithError x = error $ groom x\n+\n+ppFunctionCall :: Node (Lexeme Text) -> [Node (Lexeme Text)] -> Doc\n+ppFunctionCall callee args =\n+    ppExpr callee <> char '(' <> ppCommaSep ppExpr args <> char ')'\n+\n+ppMacroBody :: Node (Lexeme Text) -> Doc\n+ppMacroBody (MacroBodyFunCall e@FunctionCall{}) = ppExpr e\n+ppMacroBody (MacroBodyStmt body) =\n+    nest 2 (\n+        text \"do {\" <$>\n+        ppStmtList body\n+    ) <$> text \"} while (0)\"\n+ppMacroBody x                                   = error $ groom x\n+\n+ppMacroParam :: Node (Lexeme Text) -> Doc\n+ppMacroParam (MacroParam l) = ppLexeme l\n+ppMacroParam Ellipsis       = text \"...\"\n+ppMacroParam x              = error $ groom x\n+\n+ppMacroParamList :: [Node (Lexeme Text)] -> Doc\n+ppMacroParamList xs = char '(' <> ppCommaSep ppMacroParam xs <> char ')'\n+\n+ppNamespace :: ([a] -> Doc) -> Scope -> Lexeme Text -> [a] -> Doc\n+ppNamespace pp scope name members =\n+    nest 2 (\n+        ppScope scope <>\n+        text \"namespace\" <+> ppLexeme name <+> char '{' <$>\n+        pp members\n+    ) <$> char '}'\n+\n+ppEnumerator :: Node (Lexeme Text) -> Doc\n+ppEnumerator (Comment    style cs     ) = ppComment style cs\n+ppEnumerator (Enumerator name  Nothing) = ppLexeme name <> char ','\n+ppEnumerator (Enumerator name (Just value)) =\n+    ppLexeme name <+> char '=' <+> ppExpr value <> char ','\n+ppEnumerator (Namespace scope name members) =\n+    ppNamespace ppEnumeratorList scope name members\n+ppEnumerator x = error $ groom x\n+\n+ppEnumeratorList :: [Node (Lexeme Text)] -> Doc\n+ppEnumeratorList = ppLineSep ppEnumerator\n+\n+ppMemberDecl :: Node (Lexeme Text) -> Doc\n+ppMemberDecl = ppDecl\n+\n+ppMemberDeclList :: [Node (Lexeme Text)] -> Doc\n+ppMemberDeclList = ppLineSep ppMemberDecl\n+\n+ppAccessor :: Node (Lexeme Text) -> Doc\n+ppAccessor (Comment style cs) = ppComment style cs\n+ppAccessor (Accessor name params errs) =\n+    ppLexeme name <> ppFunctionParamList params <> ppWithError errs\n+ppAccessor x = error $ groom x\n+\n+ppAccessorList :: [Node (Lexeme Text)] -> Doc\n+ppAccessorList = ppLineSep ppAccessor\n+\n+ppEventType :: Node (Lexeme Text) -> Doc\n+ppEventType (Commented (Comment style cs) ty) =\n+    ppComment style cs <$> ppEventType ty\n+ppEventType (EventParams params) =\n+    text \"typedef void\" <> ppFunctionParamList params\n+ppEventType x = error $ groom x\n+\n+ppTypeParams :: [Node (Lexeme Text)] -> Doc\n+ppTypeParams [] = empty\n+ppTypeParams xs = char '<' <> ppCommaSep pp xs <> char '>'\n+  where\n+    pp (TyVar x) = ppLexeme x\n+    pp x         = error $ groom x\n+\n+ppCompoundStmt :: [Node (Lexeme Text)] -> Doc\n+ppCompoundStmt body =\n+    nest 2 (\n+        char '{' <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppStmtList :: [Node (Lexeme Text)] -> Doc\n+ppStmtList = ppLineSep ppDecl\n+\n+ppIfStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Maybe (Node (Lexeme Text))\n+    -> Doc\n+ppIfStmt cond t Nothing =\n+    nest 2 (\n+        text \"if (\" <> ppExpr cond <> text \") {\" <$>\n+        ppStmtList t\n+    ) <$> char '}'\n+ppIfStmt cond t (Just e) =\n+    nest 2 (\n+        text \"if (\" <> ppExpr cond <> text \") {\" <$>\n+        ppStmtList t\n+    ) <$> nest 2 (char '}' <> text \" else \" <> ppDecl e)\n+\n+ppForStmt\n+    :: Maybe (Node (Lexeme Text))\n+    -> Maybe (Node (Lexeme Text))\n+    -> Maybe (Node (Lexeme Text))\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppForStmt i c n body =\n+    nest 2 (\n+        text \"for (\"\n+        <> ppForInit i\n+        <+> ppOpt ppExpr c <> char ';'\n+        <+> ppOpt ppExpr n\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+  where\n+    ppForInit Nothing  = char ';'\n+    ppForInit (Just s) = ppDecl s\n+\n+ppWhileStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppWhileStmt c body =\n+    nest 2 (\n+        text \"while (\"\n+        <> ppExpr c\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppDoWhileStmt\n+    :: [Node (Lexeme Text)]\n+    -> Node (Lexeme Text)\n+    -> Doc\n+ppDoWhileStmt body c =\n+    nest 2 (\n+        text \"do (\"\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> text \"} while (\" <> ppExpr c <> char ')'\n+\n+ppSwitchStmt\n+    :: Node (Lexeme Text)\n+    -> [Node (Lexeme Text)]\n+    -> Doc\n+ppSwitchStmt c body =\n+    nest 2 (\n+        text \"switch (\"\n+        <> ppExpr c\n+        <> text \") {\" <$>\n+        ppStmtList body\n+    ) <$> char '}'\n+\n+ppExpr :: Node (Lexeme Text) -> Doc\n+ppExpr expr = case expr of\n+    -- Expressions\n+    VarExpr var       -> ppLexeme var\n+    LiteralExpr _ l   -> ppLexeme l\n+    SizeofExpr arg    -> text \"sizeof(\" <> ppExpr arg <> char ')'\n+    SizeofType arg    -> text \"sizeof(\" <> ppType arg <> char ')'\n+    BinaryExpr  l o r -> ppExpr l <+> ppBinaryOp o <+> ppExpr r\n+    AssignExpr  l o r -> ppExpr l <+> ppAssignOp o <+> ppExpr r\n+    TernaryExpr c t e -> ppTernaryExpr c t e\n+    UnaryExpr o e     -> ppUnaryOp o <> ppExpr e\n+    ParenExpr e       -> char '(' <> ppExpr e <> char ')'\n+    FunctionCall c  a -> ppFunctionCall c a\n+    ArrayAccess  e  i -> ppExpr e <> char '[' <> ppExpr i <> char ']'\n+    CastExpr     ty e -> char '(' <> ppType ty <> char ')' <> ppExpr e\n+    PreprocDefined  n -> text \"defined(\" <> ppLexeme n <> char ')'\n+    InitialiserList l -> ppInitialiserList l\n+    PointerAccess e m -> ppExpr e <> text \"->\" <> ppLexeme m\n+    MemberAccess  e m -> ppExpr e <> text \".\" <> ppLexeme m\n+    CommentExpr   c e -> ppCommentExpr c e\n+\n+    x                 -> error $ groom x\n+\n+ppTernaryExpr\n+    :: Node (Lexeme Text) -> Node (Lexeme Text) -> Node (Lexeme Text) -> Doc\n+ppTernaryExpr c t e =\n+    ppExpr c <+> char '?' <+> ppExpr t <+> char ':' <+> ppExpr e\n+\n+ppCommentExpr :: Node (Lexeme Text) -> Node (Lexeme Text) -> Doc\n+ppCommentExpr (Comment style body) e =\n+    ppCommentStyle style <+> ppCommentBody body <+> text \"*/\" <+> ppExpr e\n+ppCommentExpr c _ = error $ groom c\n+\n+ppStmt :: Node (Lexeme Text) -> Doc\n+ppStmt = ppDecl\n+\n+ppDeclList :: [Node (Lexeme Text)] -> Doc\n+ppDeclList = ppLineSep ppDecl\n+\n+ppDecl :: Node (Lexeme Text) -> Doc\n+ppDecl decl = case decl of\n+    PreprocElif cond decls (PreprocElse []) ->\n+        text \"#esif\" <+> ppExpr cond <$>",
            "html_url": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410979725",
            "id": 410979725,
            "in_reply_to_id": 410893310,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3OTcyNQ==",
            "original_commit_id": "0e403a6203354c076a0a07b43f2f6b2a96cc2125",
            "original_line": 379,
            "original_position": 379,
            "original_start_line": null,
            "path": "src/Language/Cimple/Pretty.hs",
            "position": null,
            "pull_request_review_id": 396056309,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410979725/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-04-19T20:00:18Z",
            "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410979725",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410980352"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410980352"
                }
            },
            "author_association": "MEMBER",
            "body": "It's mostly just easier to pretty-print, but yes :).",
            "commit_id": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "created_at": "2020-04-19T20:03:53Z",
            "diff_hunk": "@@ -0,0 +1,101 @@\n+module Language.Cimple.PrettySpec where\n+\n+import           Test.Hspec                   (Spec, describe, it, shouldBe)\n+\n+import qualified Data.Text                    as Text\n+import           Language.Cimple.IO           (parseText)\n+import           Language.Cimple.Pretty       (ppTranslationUnit)\n+import           Text.PrettyPrint.ANSI.Leijen (displayS, renderCompact)\n+\n+getRight :: Either String a -> a\n+getRight (Left  err) = error err\n+getRight (Right ok ) = ok\n+\n+pretty :: String -> IO String\n+pretty = fmap (show . ppTranslationUnit . getRight) . parseText . Text.pack\n+\n+compact :: String -> IO String\n+compact =\n+    fmap (flip displayS \"\" . renderCompact . ppTranslationUnit . getRight)\n+        . parseText\n+        . Text.pack\n+\n+\n+spec :: Spec\n+spec = do\n+    describe \"renderPretty\" $ do\n+        it \"pretty-prints a simple C function\" $ do\n+            pp <- pretty \"int a(void) { return 3; }\"\n+            pp `shouldBe` unlines\n+                [ \"int a(void)\"\n+                , \"{\"\n+                , \"  return 3;\"\n+                , \"}\"\n+                ]\n+\n+        it \"pretty-prints a typedef struct\" $ do\n+            pp <- pretty \"typedef struct Foo { int32_t x; } Foo;\"\n+            pp `shouldBe` unlines\n+                [ \"typedef struct Foo {\"\n+                , \"  int32_t x;\"\n+                , \"} Foo;\"\n+                ]\n+\n+    describe \"renderCompact\" $ do\n+        it \"pretty-prints a simple C function\" $ do\n+            pp <- compact \"int a(void) { return 3; }\"\n+            pp `shouldBe` unlines\n+                [ \"int a(void)\"\n+                , \"{\"\n+                , \"return 3;\"\n+                , \"}\"\n+                ]\n+\n+        it \"pretty-prints a typedef struct\" $ do\n+            pp <- compact \"typedef struct Foo { int32_t x; } Foo;\"\n+            pp `shouldBe` unlines\n+                [ \"typedef struct Foo {\"\n+                , \"int32_t x;\"\n+                , \"} Foo;\"\n+                ]\n+\n+        it \"respects comment styles\" $ do\n+            compact \"/* foo bar */\" >>= (`shouldBe` \"/* foo bar\\n */\\n\")\n+            compact \"/** foo bar */\" >>= (`shouldBe` \"/** foo bar\\n */\\n\")\n+            compact \"/*** foo bar */\" >>= (`shouldBe` \"/*** foo bar\\n */\\n\")\n+            compact \"/**** foo bar */\" >>= (`shouldBe` \"/*** foo bar\\n */\\n\")\n+\n+        it \"supports punctuation in comments\" $ do\n+            compact \"/* foo.bar,baz-blep */\"\n+                >>= (`shouldBe` \"/* foo. bar, baz - blep\\n */\\n\")\n+            compact \"/* foo? */\" >>= (`shouldBe` \"/* foo ?\\n */\\n\")\n+\n+        it \"formats number ranges and negative numbers without spacing\" $ do\n+            compact \"/* 123 - 456 */\" >>= (`shouldBe` \"/* 123-456\\n */\\n\")\n+            compact \"/* - 3 */\" >>= (`shouldBe` \"/* -3\\n */\\n\")\n+            compact \"/* a-b */\" >>= (`shouldBe` \"/* a - b\\n */\\n\")\n+\n+        it \"formats pointer types with east-const\" $ do",
            "html_url": "https://github.com/TokTok/hs-cimple/pull/2#discussion_r410980352",
            "id": 410980352,
            "in_reply_to_id": 410894111,
            "line": 78,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk4MDM1Mg==",
            "original_commit_id": "0e403a6203354c076a0a07b43f2f6b2a96cc2125",
            "original_line": 78,
            "original_position": 78,
            "original_start_line": null,
            "path": "test/Language/Cimple/PrettySpec.hs",
            "position": 78,
            "pull_request_review_id": 396056602,
            "pull_request_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410980352/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-04-19T20:03:53Z",
            "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments/410980352",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/TokTok/hs-cimple/issues/2/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "comments_url": "https://api.github.com/repos/TokTok/hs-cimple/commits/d3e313b6656dc45374bedd35b25eb1b8cbfde013/comments",
            "commit": {
                "author": {
                    "date": "2020-04-10T19:11:43Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-04-19T19:59:59Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "message": "Add a pretty-printer for the Cimple+Apidsl AST.",
                "tree": {
                    "sha": "0163a3e0088f0f2970350d137f3cf7dd67b1c195",
                    "url": "https://api.github.com/repos/TokTok/hs-cimple/git/trees/0163a3e0088f0f2970350d137f3cf7dd67b1c195"
                },
                "url": "https://api.github.com/repos/TokTok/hs-cimple/git/commits/d3e313b6656dc45374bedd35b25eb1b8cbfde013",
                "verification": {
                    "payload": "tree 0163a3e0088f0f2970350d137f3cf7dd67b1c195\nparent 6161665de70bd8661cb43b072ed44b7e8aecb264\nauthor iphydf <iphydf@users.noreply.github.com> 1586545903 +0000\ncommitter iphydf <iphydf@users.noreply.github.com> 1587326399 +0000\n\nAdd a pretty-printer for the Cimple+Apidsl AST.\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEqQ4tlxH906HdaIgsOFXbotdEA8kFAl6crcAACgkQOFXbotdE\nA8khWgf/aauZRlMQWLdXtTchUjbh+izJwvCDkSzNPDgd2Jkuqi+xaYIikCT0KETW\nUtXDZ/kSgzHt7RTJw9Lwb25QteSrdW9Wjq9ZRaiF+E+uhg2Vugl02E8uphr2ZtUg\nOEQAhgtJ60RlTq8kuwatj1FNGaH1kzazsW6Dmvd1l96rggB/aQc3mKwy7qR6nlE4\n52mvcBOgXjQ+lPXR5NJrVHWo8lGtCvXx0PW+ZCe3+S8z0PSmmp0MZElY3g+mL0iW\nhX7BfRNNnnj7ZrOsRKGEkpcGotgoqGexOY5IHOOQX/cTFFJ2nlAMUpybR1cQEYLE\nKQBwqCzjazw98/xsGfAoUaLvK5XR5Q==\n=1w73\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "html_url": "https://github.com/TokTok/hs-cimple/commit/d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "node_id": "MDY6Q29tbWl0MjU0NTI0MjkyOmQzZTMxM2I2NjU2ZGM0NTM3NGJlZGQzNWIyNWViMWI4Y2JmZGUwMTM=",
            "parents": [
                {
                    "html_url": "https://github.com/TokTok/hs-cimple/commit/6161665de70bd8661cb43b072ed44b7e8aecb264",
                    "sha": "6161665de70bd8661cb43b072ed44b7e8aecb264",
                    "url": "https://api.github.com/repos/TokTok/hs-cimple/commits/6161665de70bd8661cb43b072ed44b7e8aecb264"
                }
            ],
            "sha": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
            "url": "https://api.github.com/repos/TokTok/hs-cimple/commits/d3e313b6656dc45374bedd35b25eb1b8cbfde013"
        }
    ],
    "commits_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2/commits",
    "created_at": "2020-04-16T01:00:05Z",
    "diff_url": "https://github.com/TokTok/hs-cimple/pull/2.diff",
    "draft": false,
    "head": {
        "label": "iphydf:cimplefmt",
        "ref": "cimplefmt",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/iphydf/hs-cimple/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/iphydf/hs-cimple/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/iphydf/hs-cimple/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/iphydf/hs-cimple/branches{/branch}",
            "clone_url": "https://github.com/iphydf/hs-cimple.git",
            "collaborators_url": "https://api.github.com/repos/iphydf/hs-cimple/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/iphydf/hs-cimple/comments{/number}",
            "commits_url": "https://api.github.com/repos/iphydf/hs-cimple/commits{/sha}",
            "compare_url": "https://api.github.com/repos/iphydf/hs-cimple/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/iphydf/hs-cimple/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/iphydf/hs-cimple/contributors",
            "created_at": "2020-04-10T02:19:45Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/iphydf/hs-cimple/deployments",
            "description": "Cimple and Apidsl language parsers and tools",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/iphydf/hs-cimple/downloads",
            "events_url": "https://api.github.com/repos/iphydf/hs-cimple/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/iphydf/hs-cimple/forks",
            "full_name": "iphydf/hs-cimple",
            "git_commits_url": "https://api.github.com/repos/iphydf/hs-cimple/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/iphydf/hs-cimple/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/iphydf/hs-cimple/git/tags{/sha}",
            "git_url": "git://github.com/iphydf/hs-cimple.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd/",
            "hooks_url": "https://api.github.com/repos/iphydf/hs-cimple/hooks",
            "html_url": "https://github.com/iphydf/hs-cimple",
            "id": 254524292,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/iphydf/hs-cimple/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/iphydf/hs-cimple/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/iphydf/hs-cimple/issues{/number}",
            "keys_url": "https://api.github.com/repos/iphydf/hs-cimple/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/iphydf/hs-cimple/labels{/name}",
            "language": "Haskell",
            "languages_url": "https://api.github.com/repos/iphydf/hs-cimple/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/iphydf/hs-cimple/merges",
            "milestones_url": "https://api.github.com/repos/iphydf/hs-cimple/milestones{/number}",
            "mirror_url": null,
            "name": "hs-cimple",
            "node_id": "MDEwOlJlcG9zaXRvcnkyNTQ1MjQyOTI=",
            "notifications_url": "https://api.github.com/repos/iphydf/hs-cimple/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/iphydf/hs-cimple/pulls{/number}",
            "pushed_at": "2024-02-04T08:21:35Z",
            "releases_url": "https://api.github.com/repos/iphydf/hs-cimple/releases{/id}",
            "size": 386,
            "ssh_url": "git@github.com:iphydf/hs-cimple.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/iphydf/hs-cimple/stargazers",
            "statuses_url": "https://api.github.com/repos/iphydf/hs-cimple/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/iphydf/hs-cimple/subscribers",
            "subscription_url": "https://api.github.com/repos/iphydf/hs-cimple/subscription",
            "svn_url": "https://github.com/iphydf/hs-cimple",
            "tags_url": "https://api.github.com/repos/iphydf/hs-cimple/tags",
            "teams_url": "https://api.github.com/repos/iphydf/hs-cimple/teams",
            "topics": [
                "c",
                "dsl",
                "parser"
            ],
            "trees_url": "https://api.github.com/repos/iphydf/hs-cimple/git/trees{/sha}",
            "updated_at": "2022-02-10T15:37:41Z",
            "url": "https://api.github.com/repos/iphydf/hs-cimple",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        }
    },
    "html_url": "https://github.com/TokTok/hs-cimple/pull/2",
    "id": 404060658,
    "issue_url": "https://api.github.com/repos/TokTok/hs-cimple/issues/2",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "d3e313b6656dc45374bedd35b25eb1b8cbfde013",
    "merged_at": "2020-04-19T20:24:55Z",
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA0MDYwNjU4",
    "number": 2,
    "patch_url": "https://github.com/TokTok/hs-cimple/pull/2.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/TokTok/hs-cimple/statuses/d3e313b6656dc45374bedd35b25eb1b8cbfde013",
    "title": "Add a pretty-printer for the Cimple+Apidsl AST.",
    "updated_at": "2020-04-19T20:25:01Z",
    "url": "https://api.github.com/repos/TokTok/hs-cimple/pulls/2",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
        "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
        "followers_url": "https://api.github.com/users/iphydf/followers",
        "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
        "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/iphydf",
        "id": 10647936,
        "login": "iphydf",
        "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
        "organizations_url": "https://api.github.com/users/iphydf/orgs",
        "received_events_url": "https://api.github.com/users/iphydf/received_events",
        "repos_url": "https://api.github.com/users/iphydf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/iphydf"
    }
}