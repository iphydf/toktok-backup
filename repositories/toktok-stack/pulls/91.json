{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/issues/91/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91/commits"
        },
        "html": {
            "href": "https://github.com/TokTok/toktok-stack/pull/91"
        },
        "issue": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/issues/91"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
        },
        "statuses": {
            "href": "https://api.github.com/repos/TokTok/toktok-stack/statuses/83ba9d4044024c16325aca8a8e94d2982387ed4f"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
        "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
        "followers_url": "https://api.github.com/users/iphydf/followers",
        "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
        "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/iphydf",
        "id": 10647936,
        "login": "iphydf",
        "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
        "organizations_url": "https://api.github.com/users/iphydf/orgs",
        "received_events_url": "https://api.github.com/users/iphydf/received_events",
        "repos_url": "https://api.github.com/users/iphydf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/iphydf"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        }
    ],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "TokTok:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TokTok/toktok-stack/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TokTok/toktok-stack/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TokTok/toktok-stack/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TokTok/toktok-stack/branches{/branch}",
            "clone_url": "https://github.com/TokTok/toktok-stack.git",
            "collaborators_url": "https://api.github.com/repos/TokTok/toktok-stack/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TokTok/toktok-stack/comments{/number}",
            "commits_url": "https://api.github.com/repos/TokTok/toktok-stack/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TokTok/toktok-stack/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TokTok/toktok-stack/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TokTok/toktok-stack/contributors",
            "created_at": "2016-09-02T09:04:48Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TokTok/toktok-stack/deployments",
            "description": "A snapshot of the complete software stack (excluding some external libraries and programs)",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TokTok/toktok-stack/downloads",
            "events_url": "https://api.github.com/repos/TokTok/toktok-stack/events",
            "fork": false,
            "forks": 6,
            "forks_count": 6,
            "forks_url": "https://api.github.com/repos/TokTok/toktok-stack/forks",
            "full_name": "TokTok/toktok-stack",
            "git_commits_url": "https://api.github.com/repos/TokTok/toktok-stack/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TokTok/toktok-stack/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TokTok/toktok-stack/git/tags{/sha}",
            "git_url": "git://github.com/TokTok/toktok-stack.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd",
            "hooks_url": "https://api.github.com/repos/TokTok/toktok-stack/hooks",
            "html_url": "https://github.com/TokTok/toktok-stack",
            "id": 67208080,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TokTok/toktok-stack/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TokTok/toktok-stack/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TokTok/toktok-stack/issues{/number}",
            "keys_url": "https://api.github.com/repos/TokTok/toktok-stack/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TokTok/toktok-stack/labels{/name}",
            "language": "Starlark",
            "languages_url": "https://api.github.com/repos/TokTok/toktok-stack/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/TokTok/toktok-stack/merges",
            "milestones_url": "https://api.github.com/repos/TokTok/toktok-stack/milestones{/number}",
            "mirror_url": null,
            "name": "toktok-stack",
            "node_id": "MDEwOlJlcG9zaXRvcnk2NzIwODA4MA==",
            "notifications_url": "https://api.github.com/repos/TokTok/toktok-stack/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
                "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
                "followers_url": "https://api.github.com/users/TokTok/followers",
                "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
                "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TokTok",
                "id": 17427091,
                "login": "TokTok",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
                "organizations_url": "https://api.github.com/users/TokTok/orgs",
                "received_events_url": "https://api.github.com/users/TokTok/received_events",
                "repos_url": "https://api.github.com/users/TokTok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/TokTok"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls{/number}",
            "pushed_at": "2024-02-23T16:38:40Z",
            "releases_url": "https://api.github.com/repos/TokTok/toktok-stack/releases{/id}",
            "size": 5419,
            "ssh_url": "git@github.com:TokTok/toktok-stack.git",
            "stargazers_count": 15,
            "stargazers_url": "https://api.github.com/repos/TokTok/toktok-stack/stargazers",
            "statuses_url": "https://api.github.com/repos/TokTok/toktok-stack/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TokTok/toktok-stack/subscribers",
            "subscription_url": "https://api.github.com/repos/TokTok/toktok-stack/subscription",
            "svn_url": "https://github.com/TokTok/toktok-stack",
            "tags_url": "https://api.github.com/repos/TokTok/toktok-stack/tags",
            "teams_url": "https://api.github.com/repos/TokTok/toktok-stack/teams",
            "topics": [
                "bazel",
                "tox"
            ],
            "trees_url": "https://api.github.com/repos/TokTok/toktok-stack/git/trees{/sha}",
            "updated_at": "2024-01-02T03:03:53Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack",
            "visibility": "public",
            "watchers": 15,
            "watchers_count": 15,
            "web_commit_signoff_required": false
        },
        "sha": "cd2a6225af05abf29035c574631c03df646f4afd",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
            "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
            "followers_url": "https://api.github.com/users/TokTok/followers",
            "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
            "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TokTok",
            "id": 17427091,
            "login": "TokTok",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
            "organizations_url": "https://api.github.com/users/TokTok/orgs",
            "received_events_url": "https://api.github.com/users/TokTok/received_events",
            "repos_url": "https://api.github.com/users/TokTok/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/TokTok"
        }
    },
    "body": "You can use it with any bazel C/C++ target, or with a binary that's\r\nlinked against tools/debug/oomer.c.\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/toktok/toktok-stack/91)\n<!-- Reviewable:end -->\n",
    "closed_at": "2020-05-03T12:01:28Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419013922"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013922"
                }
            },
            "author_association": "MEMBER",
            "body": "typo `linked`",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:06:09Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419013922",
            "id": 419013922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxMzkyMg==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404564264,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013922/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013922",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419013934"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013934"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd make that configurable too, test might get longer",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:06:14Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(5);",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419013934",
            "id": 419013934,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxMzkzNA==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404564264,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013934/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419013934",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419014002"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014002"
                }
            },
            "author_association": "MEMBER",
            "body": "These numbers seem quite arbitrary, source?",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:06:46Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419014002",
            "id": 419014002,
            "line": 61,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNDAwMg==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 61,
            "original_position": 56,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 61,
            "pull_request_review_id": 404564264,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014002/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014002",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419014113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014113"
                }
            },
            "author_association": "MEMBER",
            "body": "Personally I'd invert this condition to `if (config.max_allocs > 0)` because it makes the long if easier to read",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:07:54Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(5);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs == 0) {",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419014113",
            "id": 419014113,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNDExMw==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 119,
            "original_position": 119,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404564264,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014113/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419014113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015050"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015050"
                }
            },
            "author_association": "MEMBER",
            "body": "oomer?",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:18:17Z",
            "diff_hunk": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python3\n+\"\"\"Run a test repeatedly with mallocfail.\n+\n+Usage: run_mallocfail <exe>\n+\n+exe: either a bazel target, e.g. //c-toxcore/auto_tests:tox_one_test or an\n+  executable path, e.g. bazel-bin/c-toxcore/auto_tests/tox_one_test\n+\n+This runs the program with mallocfail until there are no more additional stack\n+hashes for mallocfail to try out.\n+\n+You need to build mallocfail (https://github.com/ralight/mallocfail) at\n+wip/mallocfail so you end up with wip/mallocfail/mallocfail.so. Change\n+_MALLOCFAIL_SO if you want it elsewhere.\n+\"\"\"\n+\n+import os\n+import shutil\n+import sys\n+import subprocess\n+\n+from typing import List\n+\n+\n+_MALLOCFAIL_SO = \"wip/mallocfail/mallocfail.so\"\n+_HASHES = \"mallocfail_hashes\"\n+_HASHES_PREV = \"mallocfail_hashes.prev\"\n+\n+\n+def run_mallocfail(exe: str) -> bool:\n+    \"\"\"Run a program with mallocfail.\"\"\"\n+    if os.path.exists(_HASHES):\n+        shutil.copy(_HASHES, _HASHES_PREV)\n+    proc = subprocess.run([exe], env={\n+        \"LD_PRELOAD\": _MALLOCFAIL_SO,\n+    })\n+    if (os.path.exists(_HASHES_PREV) and os.path.exists(_HASHES)):\n+        with open(_HASHES_PREV, \"r\") as prev:\n+            with open(_HASHES, \"r\") as cur:\n+                if prev.read() == cur.read():\n+                    # Done: no new stack hashes.\n+                    return False\n+\n+    if proc.returncode >= 0:\n+        # Process exited cleanly (success or failure).\n+        pass\n+    elif proc.returncode == -6:\n+        # Assertion failed.\n+        pass\n+    elif proc.returncode == -14:\n+        print(f\"\\x1b[1;31mProcess timed out\\x1b[0m\")\n+    else:\n+        print(f\"\\x1b[1;31mProcess exited with signal {-proc.returncode}\\x1b[0m\")\n+        # Copy the previous state over the current one so we can repeat the\n+        # crash in gdb.\n+        shutil.copy(_HASHES_PREV, _HASHES)\n+        subprocess.run([\n+            \"gdb\",\n+            f\"-ex=set environment LD_PRELOAD {_MALLOCFAIL_SO}\",\n+            # We need to run the program 3 times in gdb, because the stack\n+            # hashes are slightly different and mallocfail needs to record the\n+            # ones from gdb. The third one is the one that actually caused the\n+            # crash we're investigating.\n+            \"-ex=r\", \"-ex=r\", \"-ex=r\", exe])\n+        return False\n+\n+    return True\n+\n+\n+def main(args: List[str]) -> None:\n+    \"\"\"Run an oomer-enabled program with an increasing number of max_allocs.\"\"\"",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015050",
            "id": 419015050,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTA1MA==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "tools/debug/run_mallocfail",
            "position": null,
            "pull_request_review_id": 404564264,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015050/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015050",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015283"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015283"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:20:49Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015283",
            "id": 419015283,
            "in_reply_to_id": 419013922,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTI4Mw==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 61,
            "original_position": 61,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404565027,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015283/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015283",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015292"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015292"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:20:55Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(5);",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015292",
            "id": 419015292,
            "in_reply_to_id": 419013934,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTI5Mg==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 105,
            "original_position": 105,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404565035,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015292/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015292",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015387"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:21:48Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015387",
            "id": 419015387,
            "in_reply_to_id": 419014002,
            "line": 61,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTM4Nw==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 61,
            "original_position": 56,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 61,
            "pull_request_review_id": 404565078,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015387/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015387",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015454"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015454"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:22:58Z",
            "diff_hunk": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python3\n+\"\"\"Run a test repeatedly with mallocfail.\n+\n+Usage: run_mallocfail <exe>\n+\n+exe: either a bazel target, e.g. //c-toxcore/auto_tests:tox_one_test or an\n+  executable path, e.g. bazel-bin/c-toxcore/auto_tests/tox_one_test\n+\n+This runs the program with mallocfail until there are no more additional stack\n+hashes for mallocfail to try out.\n+\n+You need to build mallocfail (https://github.com/ralight/mallocfail) at\n+wip/mallocfail so you end up with wip/mallocfail/mallocfail.so. Change\n+_MALLOCFAIL_SO if you want it elsewhere.\n+\"\"\"\n+\n+import os\n+import shutil\n+import sys\n+import subprocess\n+\n+from typing import List\n+\n+\n+_MALLOCFAIL_SO = \"wip/mallocfail/mallocfail.so\"\n+_HASHES = \"mallocfail_hashes\"\n+_HASHES_PREV = \"mallocfail_hashes.prev\"\n+\n+\n+def run_mallocfail(exe: str) -> bool:\n+    \"\"\"Run a program with mallocfail.\"\"\"\n+    if os.path.exists(_HASHES):\n+        shutil.copy(_HASHES, _HASHES_PREV)\n+    proc = subprocess.run([exe], env={\n+        \"LD_PRELOAD\": _MALLOCFAIL_SO,\n+    })\n+    if (os.path.exists(_HASHES_PREV) and os.path.exists(_HASHES)):\n+        with open(_HASHES_PREV, \"r\") as prev:\n+            with open(_HASHES, \"r\") as cur:\n+                if prev.read() == cur.read():\n+                    # Done: no new stack hashes.\n+                    return False\n+\n+    if proc.returncode >= 0:\n+        # Process exited cleanly (success or failure).\n+        pass\n+    elif proc.returncode == -6:\n+        # Assertion failed.\n+        pass\n+    elif proc.returncode == -14:\n+        print(f\"\\x1b[1;31mProcess timed out\\x1b[0m\")\n+    else:\n+        print(f\"\\x1b[1;31mProcess exited with signal {-proc.returncode}\\x1b[0m\")\n+        # Copy the previous state over the current one so we can repeat the\n+        # crash in gdb.\n+        shutil.copy(_HASHES_PREV, _HASHES)\n+        subprocess.run([\n+            \"gdb\",\n+            f\"-ex=set environment LD_PRELOAD {_MALLOCFAIL_SO}\",\n+            # We need to run the program 3 times in gdb, because the stack\n+            # hashes are slightly different and mallocfail needs to record the\n+            # ones from gdb. The third one is the one that actually caused the\n+            # crash we're investigating.\n+            \"-ex=r\", \"-ex=r\", \"-ex=r\", exe])\n+        return False\n+\n+    return True\n+\n+\n+def main(args: List[str]) -> None:\n+    \"\"\"Run an oomer-enabled program with an increasing number of max_allocs.\"\"\"",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015454",
            "id": 419015454,
            "in_reply_to_id": 419015050,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTQ1NA==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 71,
            "original_position": 71,
            "original_start_line": null,
            "path": "tools/debug/run_mallocfail",
            "position": null,
            "pull_request_review_id": 404565133,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015454/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015454",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015595"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015595"
                }
            },
            "author_association": "MEMBER",
            "body": "You mean `!=`?",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:23:55Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(5);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs == 0) {",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015595",
            "id": 419015595,
            "in_reply_to_id": 419014113,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTU5NQ==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 119,
            "original_position": 119,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404565187,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015595/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015595",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015660"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015660"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:24:43Z",
            "diff_hunk": "@@ -0,0 +1,160 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linkeg against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(5);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs == 0) {",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419015660",
            "id": 419015660,
            "in_reply_to_id": 419014113,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNTY2MA==",
            "original_commit_id": "bc18f173f506be092dce04bd32fd58303f880227",
            "original_line": 119,
            "original_position": 119,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": null,
            "pull_request_review_id": 404565225,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015660/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419015660",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419016331"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016331"
                }
            },
            "author_association": "MEMBER",
            "body": "this might (theoretically) underflow, when the one shot case was hit before",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:32:29Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419016331",
            "id": 419016331,
            "line": 139,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNjMzMQ==",
            "original_commit_id": "3abef1a5d4320e80c8c9189df8b3b2cd71b20214",
            "original_line": 139,
            "original_position": 135,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 139,
            "pull_request_review_id": 404565587,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016331/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016331",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419016794"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016794"
                }
            },
            "author_association": "MEMBER",
            "body": "`raise(SIGTRAP)` might be more portable according to SO",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:38:44Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;\n+    return true;\n+  }\n+\n+  if (config.one_shot) {\n+    // Allow all mallocs except this one.\n+    config.max_allocs = -2;\n+  }\n+\n+  if (config.trap_on_fail) {\n+    __asm__(\"int $3\");",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419016794",
            "id": 419016794,
            "line": 149,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNjc5NA==",
            "original_commit_id": "2bde82ffc97b9e20332c8b39425adc2b2cc31a98",
            "original_line": 149,
            "original_position": 145,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 149,
            "pull_request_review_id": 404565587,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016794/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419016794",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419017279"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017279"
                }
            },
            "author_association": "MEMBER",
            "body": "I specifically don't, because then the trap occurs in `raise()`, and I want it to be here. I'm not interested in having this code be portable. It's Linux x86 glibc only.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:44:25Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;\n+    return true;\n+  }\n+\n+  if (config.one_shot) {\n+    // Allow all mallocs except this one.\n+    config.max_allocs = -2;\n+  }\n+\n+  if (config.trap_on_fail) {\n+    __asm__(\"int $3\");",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419017279",
            "id": 419017279,
            "in_reply_to_id": 419016794,
            "line": 149,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNzI3OQ==",
            "original_commit_id": "2bde82ffc97b9e20332c8b39425adc2b2cc31a98",
            "original_line": 149,
            "original_position": 145,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 149,
            "pull_request_review_id": 404566123,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017279/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017279",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419017521"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017521"
                }
            },
            "author_association": "MEMBER",
            "body": "That's intentional-ish. If it underflows, we had 2^63 allocs, so we're probably well into the heat death of the universe.. and then we get a SIGTRAP :) (in toktok-stack's build rules).",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-02T22:47:19Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419017521",
            "id": 419017521,
            "in_reply_to_id": 419016331,
            "line": 139,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNzUyMQ==",
            "original_commit_id": "3abef1a5d4320e80c8c9189df8b3b2cd71b20214",
            "original_line": 139,
            "original_position": 135,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 139,
            "pull_request_review_id": 404566259,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017521/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419017521",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419085980"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419085980"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok, then please add a comment that it's intentional, before the next guy reports this as error.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-03T10:58:29Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419085980",
            "id": 419085980,
            "in_reply_to_id": 419016331,
            "line": 139,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NTk4MA==",
            "original_commit_id": "3abef1a5d4320e80c8c9189df8b3b2cd71b20214",
            "original_line": 139,
            "original_position": 135,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 139,
            "pull_request_review_id": 404605958,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419085980/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419085980",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419086337"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086337"
                }
            },
            "author_association": "MEMBER",
            "body": "making it compatible with x86_64 might make sense, but it's not blocking.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-03T11:01:03Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;\n+    return true;\n+  }\n+\n+  if (config.one_shot) {\n+    // Allow all mallocs except this one.\n+    config.max_allocs = -2;\n+  }\n+\n+  if (config.trap_on_fail) {\n+    __asm__(\"int $3\");",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419086337",
            "id": 419086337,
            "in_reply_to_id": 419016794,
            "line": 149,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NjMzNw==",
            "original_commit_id": "2bde82ffc97b9e20332c8b39425adc2b2cc31a98",
            "original_line": 149,
            "original_position": 145,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 149,
            "pull_request_review_id": 404606183,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086337/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086337",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/5585762?v=4",
                "events_url": "https://api.github.com/users/sudden6/events{/privacy}",
                "followers_url": "https://api.github.com/users/sudden6/followers",
                "following_url": "https://api.github.com/users/sudden6/following{/other_user}",
                "gists_url": "https://api.github.com/users/sudden6/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sudden6",
                "id": 5585762,
                "login": "sudden6",
                "node_id": "MDQ6VXNlcjU1ODU3NjI=",
                "organizations_url": "https://api.github.com/users/sudden6/orgs",
                "received_events_url": "https://api.github.com/users/sudden6/received_events",
                "repos_url": "https://api.github.com/users/sudden6/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sudden6/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sudden6/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sudden6"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419086511"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086511"
                }
            },
            "author_association": "MEMBER",
            "body": "Ok, by x86 I meant x86 and x86_64 (and probably any x86 based architecture in the future).",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-03T11:02:17Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;\n+    return true;\n+  }\n+\n+  if (config.one_shot) {\n+    // Allow all mallocs except this one.\n+    config.max_allocs = -2;\n+  }\n+\n+  if (config.trap_on_fail) {\n+    __asm__(\"int $3\");",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419086511",
            "id": 419086511,
            "in_reply_to_id": 419016794,
            "line": 149,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NjUxMQ==",
            "original_commit_id": "2bde82ffc97b9e20332c8b39425adc2b2cc31a98",
            "original_line": 149,
            "original_position": 145,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 149,
            "pull_request_review_id": 404606308,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086511/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419086511",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419087501"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419087501"
                }
            },
            "author_association": "MEMBER",
            "body": "Done.",
            "commit_id": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "created_at": "2020-05-03T11:10:14Z",
            "diff_hunk": "@@ -0,0 +1,178 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2020 The TokTok team.\n+ */\n+#include <fcntl.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <unistd.h>\n+\n+// The actual alloc functions. This only works on glibc.\n+void *__libc_malloc(size_t size);\n+void *__libc_calloc(size_t nmemb, size_t size);\n+void *__libc_realloc(void *ptr, size_t size);\n+void __libc_free(void *ptr);\n+\n+typedef struct Oomer_Config {\n+  /**\n+   * OOMER_MAX_ALLOCS: the number of allocations to pass through until oomer\n+   * starts running one of its strategies.\n+   */\n+  long max_allocs;\n+  /**\n+   * OOMER_TIMEOUT: maximum time to run a single test for.\n+   */\n+  long timeout;\n+  /**\n+   * OOMER_DONE_FILE: the file to write when all allocations have been allowed.\n+   * This means any further tests are pointless because oomer will always allow\n+   * all of them.\n+   */\n+  const char *done_file;\n+  /**\n+   * OOMER_FLAKY: after max_allocs, start rejecting random allocations with the\n+   * specified rate (between 0 and 1).\n+   */\n+  double flaky;\n+  /**\n+   * Random seed for oomer's RNG. Not configurable through env vars for now.\n+   */\n+  uint32_t seed;\n+  /**\n+   * OOMER_ONE_SHOT: reject only a single allocation after max_allocs\n+   * allocations. All allocations after the one rejected one are passed through.\n+   */\n+  bool one_shot;\n+  /**\n+   * OOMER_TRAP_ON_FAIL: cause a SIGTRAP when rejecting an allocation. Useful\n+   * when running in a debugger to have a breakpoint at the rejected allocation.\n+   */\n+  bool trap_on_fail;\n+} Oomer_Config;\n+\n+static Oomer_Config config = {-1, 5, 0, 0, 123456789, false, false};\n+\n+uint32_t rand_u32(void) {\n+  // Numerical Recipes in C. The Art of Scientific Computing, 2nd Edition, 1992\n+  config.seed = (1664525 * config.seed + 1013904223);\n+  return config.seed;\n+}\n+\n+static __attribute__((__constructor__)) void init_oomer(void) {\n+  // run_oomer uses this to check whether the program was linked against oomer.\n+  if (getenv(\"OOMER_SYN\") != NULL) {\n+    fprintf(stderr, \"oomer: ack\");\n+    exit(EXIT_SUCCESS);\n+  }\n+\n+  const char *env_max_allocs = getenv(\"OOMER_MAX_ALLOCS\");\n+  if (env_max_allocs != NULL) {\n+    char *end = NULL;\n+    config.max_allocs = strtol(env_max_allocs, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_MAX_ALLOCS: %s\\n\", env_max_allocs);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_timeout = getenv(\"OOMER_TIMEOUT\");\n+  if (env_timeout != NULL) {\n+    char *end = NULL;\n+    config.timeout = strtol(env_timeout, &end, 10);\n+    if (end == NULL || *end != '\\0') {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_TIMEOUT: %s\\n\", env_timeout);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_flaky = getenv(\"OOMER_FLAKY\");\n+  if (env_flaky != NULL) {\n+    char *end = NULL;\n+    config.flaky = strtod(env_flaky, &end);\n+    if (end == NULL || *end != '\\0' || config.flaky < 0 || config.flaky > 1) {\n+      fprintf(stderr, \"oomer: invalid value for OOMER_FLAKY: %s\\n\", env_flaky);\n+      abort();\n+    }\n+  }\n+\n+  const char *env_one_shot = getenv(\"OOMER_ONE_SHOT\");\n+  config.one_shot = env_one_shot != NULL && *env_one_shot == '1';\n+\n+  const char *env_trap_on_fail = getenv(\"OOMER_TRAP_ON_FAIL\");\n+  config.trap_on_fail = env_trap_on_fail != NULL && *env_trap_on_fail == '1';\n+\n+  config.done_file = getenv(\"OOMER_DONE_FILE\");\n+\n+  fprintf(stderr, \"oomer: done_file    = %s\\n\",\n+          config.done_file != NULL ? config.done_file : \"<unset>\");\n+  fprintf(stderr, \"oomer: flaky        = %f\\n\", config.flaky);\n+  fprintf(stderr, \"oomer: seed         = %u\\n\", config.seed);\n+  fprintf(stderr, \"oomer: one_shot     = %s\\n\", config.one_shot ? \"true\" : \"false\");\n+  fprintf(stderr, \"oomer: trap_on_fail = %s\\n\", config.trap_on_fail ? \"true\" : \"false\");\n+\n+  // We're going to be in a debugger, so we don't have a timeout anymore, since\n+  // there will be a person looking at the process now.\n+  if (!config.trap_on_fail) {\n+    alarm(config.timeout);\n+  }\n+}\n+\n+static __attribute__((__destructor__)) void deinit_oomer(void) {\n+  fprintf(stderr, \"oomer: deinit_oomer: max_allocs = %ld\\n\", config.max_allocs);\n+  if (config.done_file != NULL && config.max_allocs > 0) {\n+    // Touch the done_file to signal to run_oomer that we've rejected at least\n+    // one malloc call.\n+    close(creat(config.done_file, 0644));\n+  }\n+}\n+\n+static bool can_alloc(void) {\n+  if (config.max_allocs != 0) {\n+    --config.max_allocs;",
            "html_url": "https://github.com/TokTok/toktok-stack/pull/91#discussion_r419087501",
            "id": 419087501,
            "in_reply_to_id": 419016331,
            "line": 139,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NzUwMQ==",
            "original_commit_id": "3abef1a5d4320e80c8c9189df8b3b2cd71b20214",
            "original_line": 139,
            "original_position": 135,
            "original_start_line": null,
            "path": "tools/debug/oomer.c",
            "position": 139,
            "pull_request_review_id": 404606993,
            "pull_request_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419087501/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-03T11:41:10Z",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments/419087501",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comment_regular_data": [],
    "comments_url": "https://api.github.com/repos/TokTok/toktok-stack/issues/91/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "comments_url": "https://api.github.com/repos/TokTok/toktok-stack/commits/83ba9d4044024c16325aca8a8e94d2982387ed4f/comments",
            "commit": {
                "author": {
                    "date": "2020-05-02T20:30:39Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2020-05-03T11:40:35Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "message": "Add \"oomer\" tool (run_oomer and library).\n\nYou can use it with any bazel C/C++ target, or with a binary that's\nlinked against tools/debug/oomer.c.",
                "tree": {
                    "sha": "1954814870e22c20d4b726710537c7495a1e7f67",
                    "url": "https://api.github.com/repos/TokTok/toktok-stack/git/trees/1954814870e22c20d4b726710537c7495a1e7f67"
                },
                "url": "https://api.github.com/repos/TokTok/toktok-stack/git/commits/83ba9d4044024c16325aca8a8e94d2982387ed4f",
                "verification": {
                    "payload": "tree 1954814870e22c20d4b726710537c7495a1e7f67\nparent cd2a6225af05abf29035c574631c03df646f4afd\nauthor iphydf <iphydf@users.noreply.github.com> 1588451439 +0100\ncommitter iphydf <iphydf@users.noreply.github.com> 1588506035 +0100\n\nAdd \"oomer\" tool (run_oomer and library).\n\nYou can use it with any bazel C/C++ target, or with a binary that's\nlinked against tools/debug/oomer.c.\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEqQ4tlxH906HdaIgsOFXbotdEA8kFAl6urbMACgkQOFXbotdE\nA8kBegf/eKXx8Vzjh98XWGR5bYaO/g3Bqd9dLZlpI+NqHdFC7ngTE8IwYfPj1yNi\nkN5WYBVky4CyhgS2YuvsD4fAmW4A7d01y2mh3otxO+RiOUFs6UifA9m/htkhPosr\nNDOwFIYRzxCU+/66Bzd7rET3BD5KyCMtAyEk553kJPkULdH5Q4LE3357m6mkHb4B\n9Y/n5C7G4kGO0X3fIrl4QEUOcbcml/CEUuZF7J1VE8JlSF+WG725MGV4CFnV5SdH\n0ffcKm/Cwl8Y5V4NHUS/zKjrrFYeI6+bF/IazORbFQ4KooKR96hHZ6B6gMOwDnom\nBhPSrJ0Qp6Jek9C1RSivrX8CrU5dcQ==\n=RATe\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "html_url": "https://github.com/TokTok/toktok-stack/commit/83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "node_id": "MDY6Q29tbWl0NjcyMDgwODA6ODNiYTlkNDA0NDAyNGMxNjMyNWFjYThhOGU5NGQyOTgyMzg3ZWQ0Zg==",
            "parents": [
                {
                    "html_url": "https://github.com/TokTok/toktok-stack/commit/cd2a6225af05abf29035c574631c03df646f4afd",
                    "sha": "cd2a6225af05abf29035c574631c03df646f4afd",
                    "url": "https://api.github.com/repos/TokTok/toktok-stack/commits/cd2a6225af05abf29035c574631c03df646f4afd"
                }
            ],
            "sha": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
            "url": "https://api.github.com/repos/TokTok/toktok-stack/commits/83ba9d4044024c16325aca8a8e94d2982387ed4f"
        }
    ],
    "commits_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91/commits",
    "created_at": "2020-05-02T20:34:22Z",
    "diff_url": "https://github.com/TokTok/toktok-stack/pull/91.diff",
    "draft": false,
    "head": {
        "label": "iphydf:oomer",
        "ref": "oomer",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/iphydf/toktok-stack/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/iphydf/toktok-stack/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/iphydf/toktok-stack/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/iphydf/toktok-stack/branches{/branch}",
            "clone_url": "https://github.com/iphydf/toktok-stack.git",
            "collaborators_url": "https://api.github.com/repos/iphydf/toktok-stack/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/iphydf/toktok-stack/comments{/number}",
            "commits_url": "https://api.github.com/repos/iphydf/toktok-stack/commits{/sha}",
            "compare_url": "https://api.github.com/repos/iphydf/toktok-stack/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/iphydf/toktok-stack/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/iphydf/toktok-stack/contributors",
            "created_at": "2016-12-31T22:25:35Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/iphydf/toktok-stack/deployments",
            "description": "A snapshot of the complete software stack (excluding some external libraries and programs)",
            "disabled": true,
            "downloads_url": "https://api.github.com/repos/iphydf/toktok-stack/downloads",
            "events_url": "https://api.github.com/repos/iphydf/toktok-stack/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/iphydf/toktok-stack/forks",
            "full_name": "iphydf/toktok-stack",
            "git_commits_url": "https://api.github.com/repos/iphydf/toktok-stack/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/iphydf/toktok-stack/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/iphydf/toktok-stack/git/tags{/sha}",
            "git_url": "git://github.com/iphydf/toktok-stack.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://toktok.ltd/",
            "hooks_url": "https://api.github.com/repos/iphydf/toktok-stack/hooks",
            "html_url": "https://github.com/iphydf/toktok-stack",
            "id": 77757984,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/iphydf/toktok-stack/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/iphydf/toktok-stack/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/iphydf/toktok-stack/issues{/number}",
            "keys_url": "https://api.github.com/repos/iphydf/toktok-stack/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/iphydf/toktok-stack/labels{/name}",
            "language": "Starlark",
            "languages_url": "https://api.github.com/repos/iphydf/toktok-stack/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": "NOASSERTION",
                "url": null
            },
            "merges_url": "https://api.github.com/repos/iphydf/toktok-stack/merges",
            "milestones_url": "https://api.github.com/repos/iphydf/toktok-stack/milestones{/number}",
            "mirror_url": null,
            "name": "toktok-stack",
            "node_id": "MDEwOlJlcG9zaXRvcnk3Nzc1Nzk4NA==",
            "notifications_url": "https://api.github.com/repos/iphydf/toktok-stack/notifications{?since,all,participating}",
            "open_issues": 2,
            "open_issues_count": 2,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/iphydf/toktok-stack/pulls{/number}",
            "pushed_at": "2023-12-15T11:45:22Z",
            "releases_url": "https://api.github.com/repos/iphydf/toktok-stack/releases{/id}",
            "size": 4578,
            "ssh_url": "git@github.com:iphydf/toktok-stack.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/iphydf/toktok-stack/stargazers",
            "statuses_url": "https://api.github.com/repos/iphydf/toktok-stack/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/iphydf/toktok-stack/subscribers",
            "subscription_url": "https://api.github.com/repos/iphydf/toktok-stack/subscription",
            "svn_url": "https://github.com/iphydf/toktok-stack",
            "tags_url": "https://api.github.com/repos/iphydf/toktok-stack/tags",
            "teams_url": "https://api.github.com/repos/iphydf/toktok-stack/teams",
            "topics": [
                "bazel",
                "tox"
            ],
            "trees_url": "https://api.github.com/repos/iphydf/toktok-stack/git/trees{/sha}",
            "updated_at": "2023-12-15T23:11:38Z",
            "url": "https://api.github.com/repos/iphydf/toktok-stack",
            "visibility": "public",
            "watchers": 0,
            "watchers_count": 0,
            "web_commit_signoff_required": false
        },
        "sha": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        }
    },
    "html_url": "https://github.com/TokTok/toktok-stack/pull/91",
    "id": 412504743,
    "issue_url": "https://api.github.com/repos/TokTok/toktok-stack/issues/91",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "83ba9d4044024c16325aca8a8e94d2982387ed4f",
    "merged_at": "2020-05-03T12:01:28Z",
    "milestone": {
        "closed_at": null,
        "closed_issues": 389,
        "created_at": "2020-04-26T16:15:59Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        },
        "description": null,
        "due_on": null,
        "html_url": "https://github.com/TokTok/toktok-stack/milestone/1",
        "id": 5350283,
        "labels_url": "https://api.github.com/repos/TokTok/toktok-stack/milestones/1/labels",
        "node_id": "MDk6TWlsZXN0b25lNTM1MDI4Mw==",
        "number": 1,
        "open_issues": 1,
        "state": "open",
        "title": "master",
        "updated_at": "2024-02-23T16:38:40Z",
        "url": "https://api.github.com/repos/TokTok/toktok-stack/milestones/1"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEyNTA0NzQz",
    "number": 91,
    "patch_url": "https://github.com/TokTok/toktok-stack/pull/91.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/TokTok/toktok-stack/statuses/83ba9d4044024c16325aca8a8e94d2982387ed4f",
    "title": "Add \"oomer\" tool (run_oomer and library).",
    "updated_at": "2020-05-03T12:01:34Z",
    "url": "https://api.github.com/repos/TokTok/toktok-stack/pulls/91",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
        "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
        "followers_url": "https://api.github.com/users/iphydf/followers",
        "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
        "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/iphydf",
        "id": 10647936,
        "login": "iphydf",
        "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
        "organizations_url": "https://api.github.com/users/iphydf/orgs",
        "received_events_url": "https://api.github.com/users/iphydf/received_events",
        "repos_url": "https://api.github.com/users/iphydf/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/iphydf"
    }
}