{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505/commits"
        },
        "html": {
            "href": "https://github.com/TokTok/c-toxcore/pull/1505"
        },
        "issue": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
        },
        "statuses": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/statuses/35c279bf235deb0129f584ea0d6b7935d898c6b9"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
        "events_url": "https://api.github.com/users/zugz/events{/privacy}",
        "followers_url": "https://api.github.com/users/zugz/followers",
        "following_url": "https://api.github.com/users/zugz/following{/other_user}",
        "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zugz",
        "id": 590069,
        "login": "zugz",
        "node_id": "MDQ6VXNlcjU5MDA2OQ==",
        "organizations_url": "https://api.github.com/users/zugz/orgs",
        "received_events_url": "https://api.github.com/users/zugz/received_events",
        "repos_url": "https://api.github.com/users/zugz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zugz"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
            "events_url": "https://api.github.com/users/zugz/events{/privacy}",
            "followers_url": "https://api.github.com/users/zugz/followers",
            "following_url": "https://api.github.com/users/zugz/following{/other_user}",
            "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zugz",
            "id": 590069,
            "login": "zugz",
            "node_id": "MDQ6VXNlcjU5MDA2OQ==",
            "organizations_url": "https://api.github.com/users/zugz/orgs",
            "received_events_url": "https://api.github.com/users/zugz/received_events",
            "repos_url": "https://api.github.com/users/zugz/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zugz"
        }
    ],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "TokTok:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TokTok/c-toxcore/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TokTok/c-toxcore/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TokTok/c-toxcore/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TokTok/c-toxcore/branches{/branch}",
            "clone_url": "https://github.com/TokTok/c-toxcore.git",
            "collaborators_url": "https://api.github.com/repos/TokTok/c-toxcore/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/comments{/number}",
            "commits_url": "https://api.github.com/repos/TokTok/c-toxcore/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TokTok/c-toxcore/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TokTok/c-toxcore/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TokTok/c-toxcore/contributors",
            "created_at": "2016-07-06T08:15:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TokTok/c-toxcore/deployments",
            "description": "The future of online communications.",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TokTok/c-toxcore/downloads",
            "events_url": "https://api.github.com/repos/TokTok/c-toxcore/events",
            "fork": true,
            "forks": 283,
            "forks_count": 283,
            "forks_url": "https://api.github.com/repos/TokTok/c-toxcore/forks",
            "full_name": "TokTok/c-toxcore",
            "git_commits_url": "https://api.github.com/repos/TokTok/c-toxcore/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TokTok/c-toxcore/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TokTok/c-toxcore/git/tags{/sha}",
            "git_url": "git://github.com/TokTok/c-toxcore.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://tox.chat",
            "hooks_url": "https://api.github.com/repos/TokTok/c-toxcore/hooks",
            "html_url": "https://github.com/TokTok/c-toxcore",
            "id": 62703642,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TokTok/c-toxcore/issues{/number}",
            "keys_url": "https://api.github.com/repos/TokTok/c-toxcore/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TokTok/c-toxcore/labels{/name}",
            "language": "C",
            "languages_url": "https://api.github.com/repos/TokTok/c-toxcore/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/TokTok/c-toxcore/merges",
            "milestones_url": "https://api.github.com/repos/TokTok/c-toxcore/milestones{/number}",
            "mirror_url": null,
            "name": "c-toxcore",
            "node_id": "MDEwOlJlcG9zaXRvcnk2MjcwMzY0Mg==",
            "notifications_url": "https://api.github.com/repos/TokTok/c-toxcore/notifications{?since,all,participating}",
            "open_issues": 210,
            "open_issues_count": 210,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
                "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
                "followers_url": "https://api.github.com/users/TokTok/followers",
                "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
                "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TokTok",
                "id": 17427091,
                "login": "TokTok",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
                "organizations_url": "https://api.github.com/users/TokTok/orgs",
                "received_events_url": "https://api.github.com/users/TokTok/received_events",
                "repos_url": "https://api.github.com/users/TokTok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/TokTok"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls{/number}",
            "pushed_at": "2024-02-23T16:21:31Z",
            "releases_url": "https://api.github.com/repos/TokTok/c-toxcore/releases{/id}",
            "size": 37461,
            "ssh_url": "git@github.com:TokTok/c-toxcore.git",
            "stargazers_count": 2116,
            "stargazers_url": "https://api.github.com/repos/TokTok/c-toxcore/stargazers",
            "statuses_url": "https://api.github.com/repos/TokTok/c-toxcore/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TokTok/c-toxcore/subscribers",
            "subscription_url": "https://api.github.com/repos/TokTok/c-toxcore/subscription",
            "svn_url": "https://github.com/TokTok/c-toxcore",
            "tags_url": "https://api.github.com/repos/TokTok/c-toxcore/tags",
            "teams_url": "https://api.github.com/repos/TokTok/c-toxcore/teams",
            "topics": [
                "cryptography",
                "encryption",
                "network",
                "p2p",
                "security",
                "toxcore"
            ],
            "trees_url": "https://api.github.com/repos/TokTok/c-toxcore/git/trees{/sha}",
            "updated_at": "2024-02-23T18:58:26Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore",
            "visibility": "public",
            "watchers": 2116,
            "watchers_count": 2116,
            "web_commit_signoff_required": false
        },
        "sha": "28569435317d547ed33a8fbfa605ec3f9dbe995b",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
            "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
            "followers_url": "https://api.github.com/users/TokTok/followers",
            "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
            "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TokTok",
            "id": 17427091,
            "login": "TokTok",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
            "organizations_url": "https://api.github.com/users/TokTok/orgs",
            "received_events_url": "https://api.github.com/users/TokTok/received_events",
            "repos_url": "https://api.github.com/users/TokTok/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/TokTok"
        }
    },
    "body": "\n\n<!-- Reviewable:start -->\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/toktok/c-toxcore/1505)\n<!-- Reviewable:end -->\n",
    "closed_at": "2022-01-29T16:46:25Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420454728"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420454728"
                }
            },
            "author_association": "MEMBER",
            "body": "This should still be testonly. We don't want to link this into production code.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-05T22:54:30Z",
            "diff_hunk": "@@ -8,8 +8,13 @@ cc_library(\n \n cc_library(\n     name = \"run_auto_test\",\n-    testonly = True,\n+    srcs = [\"run_auto_test.c\"],",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420454728",
            "id": 420454728,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NDcyOA==",
            "original_commit_id": "068aa173aafdab4a8f2d092bb4bc72887837cf89",
            "original_line": 11,
            "original_position": 5,
            "original_start_line": null,
            "path": "auto_tests/BUILD.bazel",
            "position": null,
            "pull_request_review_id": 406210385,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420454728/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-08T23:22:04Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420454728",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420455503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420455503"
                }
            },
            "author_association": "MEMBER",
            "body": "Can you rename this to auto_test_support? Right now, all the \"_test.c\" files are actually tests. We use that fact to generate build/test rules for them. Either this, or add run_auto_test to an exclusion list below where we create those rules.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-05T22:56:33Z",
            "diff_hunk": "@@ -8,8 +8,13 @@ cc_library(\n \n cc_library(\n     name = \"run_auto_test\",",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420455503",
            "id": 420455503,
            "line": null,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NTUwMw==",
            "original_commit_id": "068aa173aafdab4a8f2d092bb4bc72887837cf89",
            "original_line": 10,
            "original_position": 3,
            "original_start_line": null,
            "path": "auto_tests/BUILD.bazel",
            "position": null,
            "pull_request_review_id": 406210385,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420455503/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-08T23:22:04Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420455503",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420456256"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420456256"
                }
            },
            "author_association": "MEMBER",
            "body": "c-toxcore/auto_tests/conference_test.c:260: failed `num_frozen <= max_frozen': tox #3 has too many offline peers: 15\r\n\r\nThis started happening for me in this PR.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-05T22:58:37Z",
            "diff_hunk": "@@ -268,43 +250,43 @@ static void run_conference_tests(Tox **toxes, State *state)\n \n         for (uint32_t i = 0; i < NUM_GROUP_TOX; ++i) {\n             char name[NAMELEN + 1];\n-            snprintf(name, NAMELEN + 1, NEW_NAME_FORMAT_STR, state[i].index);\n-            tox_self_set_name(toxes[i], (const uint8_t *)name, NAMELEN, nullptr);\n+            snprintf(name, NAMELEN + 1, NEW_NAME_FORMAT_STR, autotoxes[i].index);\n+            tox_self_set_name(autotoxes[i].tox, (const uint8_t *)name, NAMELEN, nullptr);\n         }\n     }\n \n     for (uint16_t i = 0; i < NUM_GROUP_TOX; ++i) {\n-        const uint32_t num_frozen = tox_conference_offline_peer_count(toxes[i], 0, nullptr);\n+        const uint32_t num_frozen = tox_conference_offline_peer_count(autotoxes[i].tox, 0, nullptr);\n         ck_assert_msg(num_frozen <= max_frozen,\n                       \"tox #%u has too many offline peers: %u\\n\",",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r420456256",
            "id": 420456256,
            "line": 265,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NjI1Ng==",
            "original_commit_id": "068aa173aafdab4a8f2d092bb4bc72887837cf89",
            "original_line": 265,
            "original_position": 239,
            "original_start_line": null,
            "path": "auto_tests/conference_test.c",
            "position": 245,
            "pull_request_review_id": 406210385,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420456256/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-08T23:22:04Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/420456256",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r425224607"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/425224607"
                }
            },
            "author_association": "MEMBER",
            "body": "`if` is not needed for `free`.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-14T15:25:44Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {\n+        free(autotox->save_state);\n+    }\n+\n+    autotox->save_size = tox_get_savedata_size(autotox->tox);\n+    ck_assert_msg(autotox->save_size > 0, \"save is invalid size %u\", (unsigned)autotox->save_size);\n+    autotox->save_state = (uint8_t *)malloc(autotox->save_size);\n+    ck_assert_msg(autotox->save_state != nullptr, \"malloc failed\");\n+    tox_get_savedata(autotox->tox, autotox->save_state);\n+}\n+\n+void kill(AutoTox *autotox)\n+{\n+    ck_assert(autotox->alive);\n+    fprintf(stderr, \"Killing #%u\\n\", autotox->index);\n+    autotox->alive = false;\n+    tox_kill(autotox->tox);\n+}\n+\n+void reload(AutoTox *autotox)\n+{\n+    if (autotox->alive) {\n+        kill(autotox);\n+    }\n+\n+    fprintf(stderr, \"Reloading #%u\\n\", autotox->index);\n+    ck_assert(autotox->save_state != nullptr);\n+\n+    struct Tox_Options *const options = tox_options_new(nullptr);\n+    ck_assert(options != nullptr);\n+    tox_options_set_savedata_type(options, TOX_SAVEDATA_TYPE_TOX_SAVE);\n+    tox_options_set_savedata_data(options, autotox->save_state, autotox->save_size);\n+    autotox->tox = tox_new_log(options, nullptr, &autotox->index);\n+    ck_assert(autotox->tox != nullptr);\n+    tox_options_free(options);\n+\n+    set_mono_time_callback(autotox);\n+    autotox->alive = true;\n+}\n+\n+static void initialise_autotox(AutoTox *autotox, uint32_t index, uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    struct Tox_Options *opts = tox_options_new(nullptr);\n+    ck_assert(opts != nullptr);\n+\n+    if (index < options->tcp_relays) {\n+        printf(\"tox #%u is TCP relay\\n\", index);\n+        tox_options_set_tcp_port(opts, options->tcp_first_port + index);\n+    }\n+\n+    autotox->index = index;\n+    autotox->tox = tox_new_log(opts, nullptr, &autotox->index);\n+    ck_assert_msg(autotox->tox != nullptr, \"failed to create tox instance #%u\", index);\n+\n+    tox_options_free(opts);\n+\n+    set_mono_time_callback(autotox);\n+\n+    autotox->alive = true;\n+    autotox->save_state = nullptr;\n+\n+    if (state_size > 0) {\n+        autotox->state = calloc(1, state_size);\n+        ck_assert(autotox->state != nullptr);\n+        ck_assert_msg(autotox->state != nullptr, \"failed to allocate state\");\n+    } else {\n+        autotox->state = nullptr;\n+    }\n+\n+    if (options->init_autotox != nullptr) {\n+        options->init_autotox(autotox, index);\n+    }\n+}\n+\n+static void autotox_add_friend(AutoTox *autotoxes, uint32_t adding, uint32_t added)\n+{\n+    uint8_t public_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_public_key(autotoxes[added].tox, public_key);\n+    Tox_Err_Friend_Add err;\n+    tox_friend_add_norequest(autotoxes[adding].tox, public_key, &err);\n+    ck_assert(err == TOX_ERR_FRIEND_ADD_OK);\n+}\n+\n+static void initialise_friend_graph(Graph_Type graph, uint32_t first, uint32_t last, AutoTox *autotoxes)\n+{\n+    if (graph == GRAPH_LINEAR) {\n+        printf(\"toxes #%u-#%u each add adjacent toxes as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = i - 1; j != i + 3; j += 2) {\n+                if (j >= first && j <= last) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else if (graph == GRAPH_COMPLETE) {\n+        printf(\"toxes #%u-#%u add each other as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = first; j <= last; j++) {\n+                if (i != j) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else {\n+        ck_abort_msg(\"Unknown graph type\");\n+    }\n+}\n+\n+static void bootstrap_autotoxes(uint32_t tox_count, const Run_Auto_Options *options, AutoTox *autotoxes)\n+{\n+    if (options->tcp_relays) {\n+        printf(\"adding tcp relays\\n\");\n+\n+        for (uint32_t i = 0; i < tox_count; i++) {\n+            const uint32_t relay = i % options->tcp_relays;\n+            uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+            tox_self_get_dht_id(autotoxes[relay].tox, dht_key);\n+            Tox_Err_Bootstrap error = TOX_ERR_BOOTSTRAP_OK;\n+            ck_assert_msg(tox_add_tcp_relay(autotoxes[i].tox, \"localhost\", options->tcp_first_port + relay, dht_key, &error),\n+                          \"add relay error, %u, %d\", i, error);\n+        }\n+    }\n+\n+    printf(\"bootstrapping all toxes off tox 0\\n\");\n+    uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_dht_id(autotoxes[0].tox, dht_key);\n+    const uint16_t dht_port = tox_self_get_udp_port(autotoxes[0].tox, nullptr);\n+\n+    for (uint32_t i = 1; i < tox_count; i++) {\n+        Tox_Err_Bootstrap err;\n+        tox_bootstrap(autotoxes[i].tox, \"localhost\", dht_port, dht_key, &err);\n+        ck_assert(err == TOX_ERR_BOOTSTRAP_OK);\n+    }\n+}\n+\n+void run_auto_test(uint32_t tox_count, void test(AutoTox *autotoxes),\n+                   uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    printf(\"initialising %u toxes\\n\", tox_count);\n+\n+    AutoTox *autotoxes = (AutoTox *)calloc(tox_count, sizeof(AutoTox));\n+\n+    ck_assert(autotoxes != nullptr);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        initialise_autotox(&autotoxes[i], i, state_size, options);\n+    }\n+\n+    initialise_friend_graph(options->graph, options->tcp_relays, tox_count - 1, autotoxes);\n+\n+    bootstrap_autotoxes(tox_count, options, autotoxes);\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_connected(tox_count, autotoxes));\n+\n+    printf(\"toxes are online\\n\");\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_friends_connected(tox_count, autotoxes));\n+\n+    printf(\"tox clients connected\\n\");\n+\n+    test(autotoxes);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_kill(autotoxes[i].tox);\n+        }\n+\n+        if (autotoxes[i].state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r425224607",
            "id": 425224607,
            "line": 243,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNDYwNw==",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 243,
            "original_position": 243,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 243,
            "pull_request_review_id": 411919537,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/425224607/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-14T15:26:17Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/425224607",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r432484130"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484130"
                }
            },
            "author_association": "MEMBER",
            "body": "No need for `if`.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-29T13:31:39Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r432484130",
            "id": 432484130,
            "line": 70,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDEzMA==",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 70,
            "original_position": 70,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 70,
            "pull_request_review_id": 420952293,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484130/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-29T13:32:02Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484130",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r432484252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484252"
                }
            },
            "author_association": "MEMBER",
            "body": "Same here.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2020-05-29T13:31:52Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {\n+        free(autotox->save_state);\n+    }\n+\n+    autotox->save_size = tox_get_savedata_size(autotox->tox);\n+    ck_assert_msg(autotox->save_size > 0, \"save is invalid size %u\", (unsigned)autotox->save_size);\n+    autotox->save_state = (uint8_t *)malloc(autotox->save_size);\n+    ck_assert_msg(autotox->save_state != nullptr, \"malloc failed\");\n+    tox_get_savedata(autotox->tox, autotox->save_state);\n+}\n+\n+void kill(AutoTox *autotox)\n+{\n+    ck_assert(autotox->alive);\n+    fprintf(stderr, \"Killing #%u\\n\", autotox->index);\n+    autotox->alive = false;\n+    tox_kill(autotox->tox);\n+}\n+\n+void reload(AutoTox *autotox)\n+{\n+    if (autotox->alive) {\n+        kill(autotox);\n+    }\n+\n+    fprintf(stderr, \"Reloading #%u\\n\", autotox->index);\n+    ck_assert(autotox->save_state != nullptr);\n+\n+    struct Tox_Options *const options = tox_options_new(nullptr);\n+    ck_assert(options != nullptr);\n+    tox_options_set_savedata_type(options, TOX_SAVEDATA_TYPE_TOX_SAVE);\n+    tox_options_set_savedata_data(options, autotox->save_state, autotox->save_size);\n+    autotox->tox = tox_new_log(options, nullptr, &autotox->index);\n+    ck_assert(autotox->tox != nullptr);\n+    tox_options_free(options);\n+\n+    set_mono_time_callback(autotox);\n+    autotox->alive = true;\n+}\n+\n+static void initialise_autotox(AutoTox *autotox, uint32_t index, uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    struct Tox_Options *opts = tox_options_new(nullptr);\n+    ck_assert(opts != nullptr);\n+\n+    if (index < options->tcp_relays) {\n+        printf(\"tox #%u is TCP relay\\n\", index);\n+        tox_options_set_tcp_port(opts, options->tcp_first_port + index);\n+    }\n+\n+    autotox->index = index;\n+    autotox->tox = tox_new_log(opts, nullptr, &autotox->index);\n+    ck_assert_msg(autotox->tox != nullptr, \"failed to create tox instance #%u\", index);\n+\n+    tox_options_free(opts);\n+\n+    set_mono_time_callback(autotox);\n+\n+    autotox->alive = true;\n+    autotox->save_state = nullptr;\n+\n+    if (state_size > 0) {\n+        autotox->state = calloc(1, state_size);\n+        ck_assert(autotox->state != nullptr);\n+        ck_assert_msg(autotox->state != nullptr, \"failed to allocate state\");\n+    } else {\n+        autotox->state = nullptr;\n+    }\n+\n+    if (options->init_autotox != nullptr) {\n+        options->init_autotox(autotox, index);\n+    }\n+}\n+\n+static void autotox_add_friend(AutoTox *autotoxes, uint32_t adding, uint32_t added)\n+{\n+    uint8_t public_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_public_key(autotoxes[added].tox, public_key);\n+    Tox_Err_Friend_Add err;\n+    tox_friend_add_norequest(autotoxes[adding].tox, public_key, &err);\n+    ck_assert(err == TOX_ERR_FRIEND_ADD_OK);\n+}\n+\n+static void initialise_friend_graph(Graph_Type graph, uint32_t first, uint32_t last, AutoTox *autotoxes)\n+{\n+    if (graph == GRAPH_LINEAR) {\n+        printf(\"toxes #%u-#%u each add adjacent toxes as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = i - 1; j != i + 3; j += 2) {\n+                if (j >= first && j <= last) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else if (graph == GRAPH_COMPLETE) {\n+        printf(\"toxes #%u-#%u add each other as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = first; j <= last; j++) {\n+                if (i != j) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else {\n+        ck_abort_msg(\"Unknown graph type\");\n+    }\n+}\n+\n+static void bootstrap_autotoxes(uint32_t tox_count, const Run_Auto_Options *options, AutoTox *autotoxes)\n+{\n+    if (options->tcp_relays) {\n+        printf(\"adding tcp relays\\n\");\n+\n+        for (uint32_t i = 0; i < tox_count; i++) {\n+            const uint32_t relay = i % options->tcp_relays;\n+            uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+            tox_self_get_dht_id(autotoxes[relay].tox, dht_key);\n+            Tox_Err_Bootstrap error = TOX_ERR_BOOTSTRAP_OK;\n+            ck_assert_msg(tox_add_tcp_relay(autotoxes[i].tox, \"localhost\", options->tcp_first_port + relay, dht_key, &error),\n+                          \"add relay error, %u, %d\", i, error);\n+        }\n+    }\n+\n+    printf(\"bootstrapping all toxes off tox 0\\n\");\n+    uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_dht_id(autotoxes[0].tox, dht_key);\n+    const uint16_t dht_port = tox_self_get_udp_port(autotoxes[0].tox, nullptr);\n+\n+    for (uint32_t i = 1; i < tox_count; i++) {\n+        Tox_Err_Bootstrap err;\n+        tox_bootstrap(autotoxes[i].tox, \"localhost\", dht_port, dht_key, &err);\n+        ck_assert(err == TOX_ERR_BOOTSTRAP_OK);\n+    }\n+}\n+\n+void run_auto_test(uint32_t tox_count, void test(AutoTox *autotoxes),\n+                   uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    printf(\"initialising %u toxes\\n\", tox_count);\n+\n+    AutoTox *autotoxes = (AutoTox *)calloc(tox_count, sizeof(AutoTox));\n+\n+    ck_assert(autotoxes != nullptr);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        initialise_autotox(&autotoxes[i], i, state_size, options);\n+    }\n+\n+    initialise_friend_graph(options->graph, options->tcp_relays, tox_count - 1, autotoxes);\n+\n+    bootstrap_autotoxes(tox_count, options, autotoxes);\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_connected(tox_count, autotoxes));\n+\n+    printf(\"toxes are online\\n\");\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_friends_connected(tox_count, autotoxes));\n+\n+    printf(\"tox clients connected\\n\");\n+\n+    test(autotoxes);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_kill(autotoxes[i].tox);\n+        }\n+\n+        if (autotoxes[i].state != nullptr) {\n+            free(autotoxes[i].state);\n+        }\n+\n+        if (autotoxes[i].save_state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r432484252",
            "id": 432484252,
            "line": 247,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NDI1Mg==",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 247,
            "original_position": 247,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 247,
            "pull_request_review_id": 420952293,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484252/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2020-05-29T13:32:02Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/432484252",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762942770"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762942770"
                }
            },
            "author_association": "MEMBER",
            "body": "This is still true.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2021-12-06T11:58:26Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762942770",
            "id": 762942770,
            "in_reply_to_id": 432484130,
            "line": 70,
            "node_id": "PRRC_kwDOA7zIGs4teZUy",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 70,
            "original_position": 70,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 70,
            "pull_request_review_id": 823863901,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762942770/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-06T12:01:19Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762942770",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762943086"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943086"
                }
            },
            "author_association": "MEMBER",
            "body": "Same.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2021-12-06T11:58:55Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {\n+        free(autotox->save_state);\n+    }\n+\n+    autotox->save_size = tox_get_savedata_size(autotox->tox);\n+    ck_assert_msg(autotox->save_size > 0, \"save is invalid size %u\", (unsigned)autotox->save_size);\n+    autotox->save_state = (uint8_t *)malloc(autotox->save_size);\n+    ck_assert_msg(autotox->save_state != nullptr, \"malloc failed\");\n+    tox_get_savedata(autotox->tox, autotox->save_state);\n+}\n+\n+void kill(AutoTox *autotox)\n+{\n+    ck_assert(autotox->alive);\n+    fprintf(stderr, \"Killing #%u\\n\", autotox->index);\n+    autotox->alive = false;\n+    tox_kill(autotox->tox);\n+}\n+\n+void reload(AutoTox *autotox)\n+{\n+    if (autotox->alive) {\n+        kill(autotox);\n+    }\n+\n+    fprintf(stderr, \"Reloading #%u\\n\", autotox->index);\n+    ck_assert(autotox->save_state != nullptr);\n+\n+    struct Tox_Options *const options = tox_options_new(nullptr);\n+    ck_assert(options != nullptr);\n+    tox_options_set_savedata_type(options, TOX_SAVEDATA_TYPE_TOX_SAVE);\n+    tox_options_set_savedata_data(options, autotox->save_state, autotox->save_size);\n+    autotox->tox = tox_new_log(options, nullptr, &autotox->index);\n+    ck_assert(autotox->tox != nullptr);\n+    tox_options_free(options);\n+\n+    set_mono_time_callback(autotox);\n+    autotox->alive = true;\n+}\n+\n+static void initialise_autotox(AutoTox *autotox, uint32_t index, uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    struct Tox_Options *opts = tox_options_new(nullptr);\n+    ck_assert(opts != nullptr);\n+\n+    if (index < options->tcp_relays) {\n+        printf(\"tox #%u is TCP relay\\n\", index);\n+        tox_options_set_tcp_port(opts, options->tcp_first_port + index);\n+    }\n+\n+    autotox->index = index;\n+    autotox->tox = tox_new_log(opts, nullptr, &autotox->index);\n+    ck_assert_msg(autotox->tox != nullptr, \"failed to create tox instance #%u\", index);\n+\n+    tox_options_free(opts);\n+\n+    set_mono_time_callback(autotox);\n+\n+    autotox->alive = true;\n+    autotox->save_state = nullptr;\n+\n+    if (state_size > 0) {\n+        autotox->state = calloc(1, state_size);\n+        ck_assert(autotox->state != nullptr);\n+        ck_assert_msg(autotox->state != nullptr, \"failed to allocate state\");\n+    } else {\n+        autotox->state = nullptr;\n+    }\n+\n+    if (options->init_autotox != nullptr) {\n+        options->init_autotox(autotox, index);\n+    }\n+}\n+\n+static void autotox_add_friend(AutoTox *autotoxes, uint32_t adding, uint32_t added)\n+{\n+    uint8_t public_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_public_key(autotoxes[added].tox, public_key);\n+    Tox_Err_Friend_Add err;\n+    tox_friend_add_norequest(autotoxes[adding].tox, public_key, &err);\n+    ck_assert(err == TOX_ERR_FRIEND_ADD_OK);\n+}\n+\n+static void initialise_friend_graph(Graph_Type graph, uint32_t first, uint32_t last, AutoTox *autotoxes)\n+{\n+    if (graph == GRAPH_LINEAR) {\n+        printf(\"toxes #%u-#%u each add adjacent toxes as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = i - 1; j != i + 3; j += 2) {\n+                if (j >= first && j <= last) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else if (graph == GRAPH_COMPLETE) {\n+        printf(\"toxes #%u-#%u add each other as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = first; j <= last; j++) {\n+                if (i != j) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else {\n+        ck_abort_msg(\"Unknown graph type\");\n+    }\n+}\n+\n+static void bootstrap_autotoxes(uint32_t tox_count, const Run_Auto_Options *options, AutoTox *autotoxes)\n+{\n+    if (options->tcp_relays) {\n+        printf(\"adding tcp relays\\n\");\n+\n+        for (uint32_t i = 0; i < tox_count; i++) {\n+            const uint32_t relay = i % options->tcp_relays;\n+            uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+            tox_self_get_dht_id(autotoxes[relay].tox, dht_key);\n+            Tox_Err_Bootstrap error = TOX_ERR_BOOTSTRAP_OK;\n+            ck_assert_msg(tox_add_tcp_relay(autotoxes[i].tox, \"localhost\", options->tcp_first_port + relay, dht_key, &error),\n+                          \"add relay error, %u, %d\", i, error);\n+        }\n+    }\n+\n+    printf(\"bootstrapping all toxes off tox 0\\n\");\n+    uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_dht_id(autotoxes[0].tox, dht_key);\n+    const uint16_t dht_port = tox_self_get_udp_port(autotoxes[0].tox, nullptr);\n+\n+    for (uint32_t i = 1; i < tox_count; i++) {\n+        Tox_Err_Bootstrap err;\n+        tox_bootstrap(autotoxes[i].tox, \"localhost\", dht_port, dht_key, &err);\n+        ck_assert(err == TOX_ERR_BOOTSTRAP_OK);\n+    }\n+}\n+\n+void run_auto_test(uint32_t tox_count, void test(AutoTox *autotoxes),\n+                   uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    printf(\"initialising %u toxes\\n\", tox_count);\n+\n+    AutoTox *autotoxes = (AutoTox *)calloc(tox_count, sizeof(AutoTox));\n+\n+    ck_assert(autotoxes != nullptr);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        initialise_autotox(&autotoxes[i], i, state_size, options);\n+    }\n+\n+    initialise_friend_graph(options->graph, options->tcp_relays, tox_count - 1, autotoxes);\n+\n+    bootstrap_autotoxes(tox_count, options, autotoxes);\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_connected(tox_count, autotoxes));\n+\n+    printf(\"toxes are online\\n\");\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_friends_connected(tox_count, autotoxes));\n+\n+    printf(\"tox clients connected\\n\");\n+\n+    test(autotoxes);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_kill(autotoxes[i].tox);\n+        }\n+\n+        if (autotoxes[i].state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762943086",
            "id": 762943086,
            "in_reply_to_id": 425224607,
            "line": 243,
            "node_id": "PRRC_kwDOA7zIGs4teZZu",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 243,
            "original_position": 243,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 243,
            "pull_request_review_id": 823863901,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943086/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-06T12:01:19Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943086",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762943129"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943129"
                }
            },
            "author_association": "MEMBER",
            "body": "Same.",
            "commit_id": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "created_at": "2021-12-06T11:58:59Z",
            "diff_hunk": "@@ -0,0 +1,253 @@\n+#include <stdlib.h>  // calloc, free\n+\n+#include \"check_compat.h\"\n+#include \"../testing/misc_tools.h\"\n+#include \"../toxcore/Messenger.h\"\n+#include \"../toxcore/mono_time.h\"\n+\n+#include \"auto_test_support.h\"\n+\n+const Run_Auto_Options default_run_auto_options = { GRAPH_COMPLETE, 0, 0, nullptr };\n+\n+bool all_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (tox_self_get_connection_status(autotoxes[i].tox) == TOX_CONNECTION_NONE) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool all_friends_connected(uint32_t tox_count, AutoTox *autotoxes)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        const size_t friend_count = tox_self_get_friend_list_size(autotoxes[i].tox);\n+\n+        for (size_t j = 0; j < friend_count; j++) {\n+            if (tox_friend_get_connection_status(autotoxes[i].tox, j, nullptr) == TOX_CONNECTION_NONE) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void iterate_all_wait(uint32_t tox_count, AutoTox *autotoxes, uint32_t wait)\n+{\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_iterate(autotoxes[i].tox, &autotoxes[i]);\n+            autotoxes[i].clock += wait;\n+        }\n+    }\n+\n+    /* Also actually sleep a little, to allow for local network processing */\n+    c_sleep(5);\n+}\n+\n+static uint64_t get_state_clock_callback(Mono_Time *mono_time, void *user_data)\n+{\n+    const uint64_t *clock = (const uint64_t *)user_data;\n+    return *clock;\n+}\n+\n+void set_mono_time_callback(AutoTox *autotox)\n+{\n+    // TODO(iphydf): Don't rely on toxcore internals.\n+    Mono_Time *mono_time = ((Messenger *)autotox->tox)->mono_time;\n+\n+    autotox->clock = current_time_monotonic(mono_time);\n+    mono_time_set_current_time_callback(mono_time, get_state_clock_callback, &autotox->clock);\n+}\n+\n+void save(AutoTox *autotox)\n+{\n+    fprintf(stderr, \"Saving #%u\\n\", autotox->index);\n+\n+    if (autotox->save_state != nullptr) {\n+        free(autotox->save_state);\n+    }\n+\n+    autotox->save_size = tox_get_savedata_size(autotox->tox);\n+    ck_assert_msg(autotox->save_size > 0, \"save is invalid size %u\", (unsigned)autotox->save_size);\n+    autotox->save_state = (uint8_t *)malloc(autotox->save_size);\n+    ck_assert_msg(autotox->save_state != nullptr, \"malloc failed\");\n+    tox_get_savedata(autotox->tox, autotox->save_state);\n+}\n+\n+void kill(AutoTox *autotox)\n+{\n+    ck_assert(autotox->alive);\n+    fprintf(stderr, \"Killing #%u\\n\", autotox->index);\n+    autotox->alive = false;\n+    tox_kill(autotox->tox);\n+}\n+\n+void reload(AutoTox *autotox)\n+{\n+    if (autotox->alive) {\n+        kill(autotox);\n+    }\n+\n+    fprintf(stderr, \"Reloading #%u\\n\", autotox->index);\n+    ck_assert(autotox->save_state != nullptr);\n+\n+    struct Tox_Options *const options = tox_options_new(nullptr);\n+    ck_assert(options != nullptr);\n+    tox_options_set_savedata_type(options, TOX_SAVEDATA_TYPE_TOX_SAVE);\n+    tox_options_set_savedata_data(options, autotox->save_state, autotox->save_size);\n+    autotox->tox = tox_new_log(options, nullptr, &autotox->index);\n+    ck_assert(autotox->tox != nullptr);\n+    tox_options_free(options);\n+\n+    set_mono_time_callback(autotox);\n+    autotox->alive = true;\n+}\n+\n+static void initialise_autotox(AutoTox *autotox, uint32_t index, uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    struct Tox_Options *opts = tox_options_new(nullptr);\n+    ck_assert(opts != nullptr);\n+\n+    if (index < options->tcp_relays) {\n+        printf(\"tox #%u is TCP relay\\n\", index);\n+        tox_options_set_tcp_port(opts, options->tcp_first_port + index);\n+    }\n+\n+    autotox->index = index;\n+    autotox->tox = tox_new_log(opts, nullptr, &autotox->index);\n+    ck_assert_msg(autotox->tox != nullptr, \"failed to create tox instance #%u\", index);\n+\n+    tox_options_free(opts);\n+\n+    set_mono_time_callback(autotox);\n+\n+    autotox->alive = true;\n+    autotox->save_state = nullptr;\n+\n+    if (state_size > 0) {\n+        autotox->state = calloc(1, state_size);\n+        ck_assert(autotox->state != nullptr);\n+        ck_assert_msg(autotox->state != nullptr, \"failed to allocate state\");\n+    } else {\n+        autotox->state = nullptr;\n+    }\n+\n+    if (options->init_autotox != nullptr) {\n+        options->init_autotox(autotox, index);\n+    }\n+}\n+\n+static void autotox_add_friend(AutoTox *autotoxes, uint32_t adding, uint32_t added)\n+{\n+    uint8_t public_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_public_key(autotoxes[added].tox, public_key);\n+    Tox_Err_Friend_Add err;\n+    tox_friend_add_norequest(autotoxes[adding].tox, public_key, &err);\n+    ck_assert(err == TOX_ERR_FRIEND_ADD_OK);\n+}\n+\n+static void initialise_friend_graph(Graph_Type graph, uint32_t first, uint32_t last, AutoTox *autotoxes)\n+{\n+    if (graph == GRAPH_LINEAR) {\n+        printf(\"toxes #%u-#%u each add adjacent toxes as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = i - 1; j != i + 3; j += 2) {\n+                if (j >= first && j <= last) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else if (graph == GRAPH_COMPLETE) {\n+        printf(\"toxes #%u-#%u add each other as friends\\n\", first, last);\n+\n+        for (uint32_t i = first; i <= last; i++) {\n+            for (uint32_t j = first; j <= last; j++) {\n+                if (i != j) {\n+                    autotox_add_friend(autotoxes, i, j);\n+                }\n+            }\n+        }\n+    } else {\n+        ck_abort_msg(\"Unknown graph type\");\n+    }\n+}\n+\n+static void bootstrap_autotoxes(uint32_t tox_count, const Run_Auto_Options *options, AutoTox *autotoxes)\n+{\n+    if (options->tcp_relays) {\n+        printf(\"adding tcp relays\\n\");\n+\n+        for (uint32_t i = 0; i < tox_count; i++) {\n+            const uint32_t relay = i % options->tcp_relays;\n+            uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+            tox_self_get_dht_id(autotoxes[relay].tox, dht_key);\n+            Tox_Err_Bootstrap error = TOX_ERR_BOOTSTRAP_OK;\n+            ck_assert_msg(tox_add_tcp_relay(autotoxes[i].tox, \"localhost\", options->tcp_first_port + relay, dht_key, &error),\n+                          \"add relay error, %u, %d\", i, error);\n+        }\n+    }\n+\n+    printf(\"bootstrapping all toxes off tox 0\\n\");\n+    uint8_t dht_key[TOX_PUBLIC_KEY_SIZE];\n+    tox_self_get_dht_id(autotoxes[0].tox, dht_key);\n+    const uint16_t dht_port = tox_self_get_udp_port(autotoxes[0].tox, nullptr);\n+\n+    for (uint32_t i = 1; i < tox_count; i++) {\n+        Tox_Err_Bootstrap err;\n+        tox_bootstrap(autotoxes[i].tox, \"localhost\", dht_port, dht_key, &err);\n+        ck_assert(err == TOX_ERR_BOOTSTRAP_OK);\n+    }\n+}\n+\n+void run_auto_test(uint32_t tox_count, void test(AutoTox *autotoxes),\n+                   uint32_t state_size, const Run_Auto_Options *options)\n+{\n+    printf(\"initialising %u toxes\\n\", tox_count);\n+\n+    AutoTox *autotoxes = (AutoTox *)calloc(tox_count, sizeof(AutoTox));\n+\n+    ck_assert(autotoxes != nullptr);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        initialise_autotox(&autotoxes[i], i, state_size, options);\n+    }\n+\n+    initialise_friend_graph(options->graph, options->tcp_relays, tox_count - 1, autotoxes);\n+\n+    bootstrap_autotoxes(tox_count, options, autotoxes);\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_connected(tox_count, autotoxes));\n+\n+    printf(\"toxes are online\\n\");\n+\n+    do {\n+        iterate_all_wait(tox_count, autotoxes, ITERATION_INTERVAL);\n+    } while (!all_friends_connected(tox_count, autotoxes));\n+\n+    printf(\"tox clients connected\\n\");\n+\n+    test(autotoxes);\n+\n+    for (uint32_t i = 0; i < tox_count; i++) {\n+        if (autotoxes[i].alive) {\n+            tox_kill(autotoxes[i].tox);\n+        }\n+\n+        if (autotoxes[i].state != nullptr) {\n+            free(autotoxes[i].state);\n+        }\n+\n+        if (autotoxes[i].save_state != nullptr) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#discussion_r762943129",
            "id": 762943129,
            "in_reply_to_id": 432484252,
            "line": 247,
            "node_id": "PRRC_kwDOA7zIGs4teZaZ",
            "original_commit_id": "cc7e3d0616078b1a6757244d3f259c1da31d24b1",
            "original_line": 247,
            "original_position": 247,
            "original_start_line": null,
            "path": "auto_tests/auto_test_support.c",
            "position": 247,
            "pull_request_review_id": 823863901,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943129/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2021-12-06T12:01:19Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/762943129",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "# [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) Report\n> Merging [#1505](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) (cc7e3d0) into [master](https://codecov.io/gh/TokTok/c-toxcore/commit/00f2f41dbbc660d7554b4df8e8397272cc92e22f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) (00f2f41) will **decrease** coverage by `0.03%`.\n> The diff coverage is `96.66%`.\n\n> :exclamation: Current head cc7e3d0 differs from pull request most recent head 35c279b. Consider uploading reports for the commit 35c279b to get more accurate results\n[![Impacted file tree graph](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/graphs/tree.svg?width=650&height=150&src=pr&token=BRfCKo02De&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok)](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1505      +/-   ##\n==========================================\n- Coverage   83.95%   83.91%   -0.04%     \n==========================================\n  Files          87       87              \n  Lines       16257    16270      +13     \n==========================================\n+ Hits        13648    13653       +5     \n- Misses       2609     2617       +8     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) | Coverage Δ | |\n|---|---|---|\n| [auto\\_tests/auto\\_test\\_support.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9hdXRvX3Rlc3Rfc3VwcG9ydC5j) | `89.43% <89.43%> (ø)` | |\n| [auto\\_tests/conference\\_av\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9jb25mZXJlbmNlX2F2X3Rlc3QuYw==) | `96.70% <97.61%> (-0.06%)` | :arrow_down: |\n| [auto\\_tests/conference\\_double\\_invite\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9jb25mZXJlbmNlX2RvdWJsZV9pbnZpdGVfdGVzdC5j) | `100.00% <100.00%> (ø)` | |\n| [auto\\_tests/conference\\_invite\\_merge\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9jb25mZXJlbmNlX2ludml0ZV9tZXJnZV90ZXN0LmM=) | `100.00% <100.00%> (+2.60%)` | :arrow_up: |\n| [auto\\_tests/conference\\_peer\\_nick\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9jb25mZXJlbmNlX3BlZXJfbmlja190ZXN0LmM=) | `100.00% <100.00%> (ø)` | |\n| [auto\\_tests/conference\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9jb25mZXJlbmNlX3Rlc3QuYw==) | `99.39% <100.00%> (-0.03%)` | :arrow_down: |\n| [auto\\_tests/friend\\_connection\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9mcmllbmRfY29ubmVjdGlvbl90ZXN0LmM=) | `100.00% <100.00%> (ø)` | |\n| [auto\\_tests/lossless\\_packet\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9sb3NzbGVzc19wYWNrZXRfdGVzdC5j) | `100.00% <100.00%> (ø)` | |\n| [auto\\_tests/lossy\\_packet\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9sb3NzeV9wYWNrZXRfdGVzdC5j) | `100.00% <100.00%> (ø)` | |\n| [auto\\_tests/overflow\\_recvq\\_test.c](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-YXV0b190ZXN0cy9vdmVyZmxvd19yZWN2cV90ZXN0LmM=) | `100.00% <100.00%> (ø)` | |\n| ... and [12 more](https://codecov.io/gh/TokTok/c-toxcore/pull/1505/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok). Last update [2db6599...35c279b](https://codecov.io/gh/TokTok/c-toxcore/pull/1505?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok).\n",
            "created_at": "2020-05-06T19:14:32Z",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#issuecomment-624837626",
            "id": 624837626,
            "issue_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505",
            "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDgzNzYyNg==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/624837626/reactions"
            },
            "updated_at": "2021-12-07T11:55:42Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/624837626",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/in/254?v=4",
                "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
                "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
                "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
                "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/apps/codecov",
                "id": 22429695,
                "login": "codecov[bot]",
                "node_id": "MDM6Qm90MjI0Mjk2OTU=",
                "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
                "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
                "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
                "type": "Bot",
                "url": "https://api.github.com/users/codecov%5Bbot%5D"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Superseded by #1932.",
            "created_at": "2022-01-29T16:46:25Z",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/1505#issuecomment-1024945399",
            "id": 1024945399,
            "issue_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505",
            "node_id": "IC_kwDOA7zIGs49F2z3",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/1024945399/reactions"
            },
            "updated_at": "2022-01-29T16:46:25Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/1024945399",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
                "events_url": "https://api.github.com/users/zugz/events{/privacy}",
                "followers_url": "https://api.github.com/users/zugz/followers",
                "following_url": "https://api.github.com/users/zugz/following{/other_user}",
                "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zugz",
                "id": 590069,
                "login": "zugz",
                "node_id": "MDQ6VXNlcjU5MDA2OQ==",
                "organizations_url": "https://api.github.com/users/zugz/orgs",
                "received_events_url": "https://api.github.com/users/zugz/received_events",
                "repos_url": "https://api.github.com/users/zugz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zugz"
            },
            "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/commits/35c279bf235deb0129f584ea0d6b7935d898c6b9/comments",
            "commit": {
                "author": {
                    "date": "2020-04-05T00:00:00Z",
                    "email": "mbays+tox@sdf.org",
                    "name": "zugz (tox)"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2021-12-07T11:55:03Z",
                    "email": "iphydf@users.noreply.github.com",
                    "name": "iphydf"
                },
                "message": "Separate run_auto_test into a library",
                "tree": {
                    "sha": "8efd7d8c352c828ea46793d55818c89b4c1c6459",
                    "url": "https://api.github.com/repos/TokTok/c-toxcore/git/trees/8efd7d8c352c828ea46793d55818c89b4c1c6459"
                },
                "url": "https://api.github.com/repos/TokTok/c-toxcore/git/commits/35c279bf235deb0129f584ea0d6b7935d898c6b9",
                "verification": {
                    "payload": "tree 8efd7d8c352c828ea46793d55818c89b4c1c6459\nparent 2db6599be5ca0b5253a67f8929ccaf1df2b6a5cd\nauthor zugz (tox) <mbays+tox@sdf.org> 1586044800 +0000\ncommitter iphydf <iphydf@users.noreply.github.com> 1638878103 +0000\n\nSeparate run_auto_test into a library\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEqQ4tlxH906HdaIgsOFXbotdEA8kFAmGvS5cACgkQOFXbotdE\nA8mCgAf+I+/cO6qDnkzCvQL18dRCJmTnMfGSE64AnZ7YZIXlFEb+mOleIG3B8ZLz\nhloLXmDREhlj/KwSDccuUhAYB9BoRZnZy2cGhIZzBlOph4OJKzoJXUs3uoFW9kWU\n/pVbODE3CwTVqo5GciwBsjt1FRxPXAQkHjz4NkiY1Kj46udNnlbrzDFBG3Bm5kXP\nrMWiaoS9Buiq5W9LUTzW6X9ddIklRc2nHENQKjnZOhK0sMZSPPdEeCDMGuyIXxqo\nTzR/PboRJMTfZTDhHl1Qdzg8rdVnVDWqBXbmuJtcJjvZvWrcF9RymvGXVn8hAkv1\nt+vCddGo8ZT+7Qcwxt24x6npENlIxg==\n=EiDv\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            },
            "html_url": "https://github.com/TokTok/c-toxcore/commit/35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "node_id": "C_kwDOBLTK6NoAKDM1YzI3OWJmMjM1ZGViMDEyOWY1ODRlYTBkNmI3OTM1ZDg5OGM2Yjk",
            "parents": [
                {
                    "html_url": "https://github.com/TokTok/c-toxcore/commit/2db6599be5ca0b5253a67f8929ccaf1df2b6a5cd",
                    "sha": "2db6599be5ca0b5253a67f8929ccaf1df2b6a5cd",
                    "url": "https://api.github.com/repos/TokTok/c-toxcore/commits/2db6599be5ca0b5253a67f8929ccaf1df2b6a5cd"
                }
            ],
            "sha": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/commits/35c279bf235deb0129f584ea0d6b7935d898c6b9"
        }
    ],
    "commits_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505/commits",
    "created_at": "2020-05-04T22:38:40Z",
    "diff_url": "https://github.com/TokTok/c-toxcore/pull/1505.diff",
    "draft": false,
    "head": {
        "label": "zugz:libAutoTest",
        "ref": "libAutoTest",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/zugz/c-toxcore/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/zugz/c-toxcore/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/zugz/c-toxcore/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/zugz/c-toxcore/branches{/branch}",
            "clone_url": "https://github.com/zugz/c-toxcore.git",
            "collaborators_url": "https://api.github.com/repos/zugz/c-toxcore/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/zugz/c-toxcore/comments{/number}",
            "commits_url": "https://api.github.com/repos/zugz/c-toxcore/commits{/sha}",
            "compare_url": "https://api.github.com/repos/zugz/c-toxcore/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/zugz/c-toxcore/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/zugz/c-toxcore/contributors",
            "created_at": "2017-01-14T18:08:35Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/zugz/c-toxcore/deployments",
            "description": "The future of online communications.",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/zugz/c-toxcore/downloads",
            "events_url": "https://api.github.com/repos/zugz/c-toxcore/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/zugz/c-toxcore/forks",
            "full_name": "zugz/c-toxcore",
            "git_commits_url": "https://api.github.com/repos/zugz/c-toxcore/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/zugz/c-toxcore/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/zugz/c-toxcore/git/tags{/sha}",
            "git_url": "git://github.com/zugz/c-toxcore.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": false,
            "homepage": "https://tox.chat/",
            "hooks_url": "https://api.github.com/repos/zugz/c-toxcore/hooks",
            "html_url": "https://github.com/zugz/c-toxcore",
            "id": 78957288,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/zugz/c-toxcore/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/zugz/c-toxcore/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/zugz/c-toxcore/issues{/number}",
            "keys_url": "https://api.github.com/repos/zugz/c-toxcore/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/zugz/c-toxcore/labels{/name}",
            "language": "C",
            "languages_url": "https://api.github.com/repos/zugz/c-toxcore/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/zugz/c-toxcore/merges",
            "milestones_url": "https://api.github.com/repos/zugz/c-toxcore/milestones{/number}",
            "mirror_url": null,
            "name": "c-toxcore",
            "node_id": "MDEwOlJlcG9zaXRvcnk3ODk1NzI4OA==",
            "notifications_url": "https://api.github.com/repos/zugz/c-toxcore/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
                "events_url": "https://api.github.com/users/zugz/events{/privacy}",
                "followers_url": "https://api.github.com/users/zugz/followers",
                "following_url": "https://api.github.com/users/zugz/following{/other_user}",
                "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/zugz",
                "id": 590069,
                "login": "zugz",
                "node_id": "MDQ6VXNlcjU5MDA2OQ==",
                "organizations_url": "https://api.github.com/users/zugz/orgs",
                "received_events_url": "https://api.github.com/users/zugz/received_events",
                "repos_url": "https://api.github.com/users/zugz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/zugz"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/zugz/c-toxcore/pulls{/number}",
            "pushed_at": "2022-07-10T15:28:21Z",
            "releases_url": "https://api.github.com/repos/zugz/c-toxcore/releases{/id}",
            "size": 16881,
            "ssh_url": "git@github.com:zugz/c-toxcore.git",
            "stargazers_count": 1,
            "stargazers_url": "https://api.github.com/repos/zugz/c-toxcore/stargazers",
            "statuses_url": "https://api.github.com/repos/zugz/c-toxcore/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/zugz/c-toxcore/subscribers",
            "subscription_url": "https://api.github.com/repos/zugz/c-toxcore/subscription",
            "svn_url": "https://github.com/zugz/c-toxcore",
            "tags_url": "https://api.github.com/repos/zugz/c-toxcore/tags",
            "teams_url": "https://api.github.com/repos/zugz/c-toxcore/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/zugz/c-toxcore/git/trees{/sha}",
            "updated_at": "2020-04-26T16:00:08Z",
            "url": "https://api.github.com/repos/zugz/c-toxcore",
            "visibility": "public",
            "watchers": 1,
            "watchers_count": 1,
            "web_commit_signoff_required": false
        },
        "sha": "35c279bf235deb0129f584ea0d6b7935d898c6b9",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
            "events_url": "https://api.github.com/users/zugz/events{/privacy}",
            "followers_url": "https://api.github.com/users/zugz/followers",
            "following_url": "https://api.github.com/users/zugz/following{/other_user}",
            "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zugz",
            "id": 590069,
            "login": "zugz",
            "node_id": "MDQ6VXNlcjU5MDA2OQ==",
            "organizations_url": "https://api.github.com/users/zugz/orgs",
            "received_events_url": "https://api.github.com/users/zugz/received_events",
            "repos_url": "https://api.github.com/users/zugz/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zugz"
        }
    },
    "html_url": "https://github.com/TokTok/c-toxcore/pull/1505",
    "id": 413221884,
    "issue_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/1505",
    "labels": [
        {
            "color": "0e8a16",
            "default": false,
            "description": "Adding missing tests, refactoring tests; no production code change",
            "id": 2037183222,
            "name": "test",
            "node_id": "MDU6TGFiZWwyMDM3MTgzMjIy",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/labels/test"
        }
    ],
    "locked": false,
    "merge_commit_sha": "e334f19c9f864c4b719113592972e99548f2235b",
    "merged_at": null,
    "milestone": {
        "closed_at": "2022-02-05T22:28:11Z",
        "closed_issues": 185,
        "created_at": "2022-02-04T11:46:55Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        },
        "description": "",
        "due_on": "2022-02-05T08:00:00Z",
        "html_url": "https://github.com/TokTok/c-toxcore/milestone/43",
        "id": 7641135,
        "labels_url": "https://api.github.com/repos/TokTok/c-toxcore/milestones/43/labels",
        "node_id": "MI_kwDOA7zIGs4AdJgv",
        "number": 43,
        "open_issues": 0,
        "state": "closed",
        "title": "v0.2.14",
        "updated_at": "2022-02-05T22:28:11Z",
        "url": "https://api.github.com/repos/TokTok/c-toxcore/milestones/43"
    },
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEzMjIxODg0",
    "number": 1505,
    "patch_url": "https://github.com/TokTok/c-toxcore/pull/1505.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/TokTok/c-toxcore/statuses/35c279bf235deb0129f584ea0d6b7935d898c6b9",
    "title": "test: Separate run_auto_tests into a library",
    "updated_at": "2022-02-04T11:47:28Z",
    "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/1505",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/590069?v=4",
        "events_url": "https://api.github.com/users/zugz/events{/privacy}",
        "followers_url": "https://api.github.com/users/zugz/followers",
        "following_url": "https://api.github.com/users/zugz/following{/other_user}",
        "gists_url": "https://api.github.com/users/zugz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zugz",
        "id": 590069,
        "login": "zugz",
        "node_id": "MDQ6VXNlcjU5MDA2OQ==",
        "organizations_url": "https://api.github.com/users/zugz/orgs",
        "received_events_url": "https://api.github.com/users/zugz/received_events",
        "repos_url": "https://api.github.com/users/zugz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zugz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zugz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zugz"
    }
}