{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/issues/2169/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169/commits"
        },
        "html": {
            "href": "https://github.com/TokTok/c-toxcore/pull/2169"
        },
        "issue": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/issues/2169"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169"
        },
        "statuses": {
            "href": "https://api.github.com/repos/TokTok/c-toxcore/statuses/015305a0880b2f28ef90b388082e0d4eeb77e558"
        }
    },
    "active_lock_reason": null,
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
        "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
        "followers_url": "https://api.github.com/users/JFreegman/followers",
        "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
        "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JFreegman",
        "id": 1646057,
        "login": "JFreegman",
        "node_id": "MDQ6VXNlcjE2NDYwNTc=",
        "organizations_url": "https://api.github.com/users/JFreegman/orgs",
        "received_events_url": "https://api.github.com/users/JFreegman/received_events",
        "repos_url": "https://api.github.com/users/JFreegman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JFreegman"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
            "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
            "followers_url": "https://api.github.com/users/JFreegman/followers",
            "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
            "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/JFreegman",
            "id": 1646057,
            "login": "JFreegman",
            "node_id": "MDQ6VXNlcjE2NDYwNTc=",
            "organizations_url": "https://api.github.com/users/JFreegman/orgs",
            "received_events_url": "https://api.github.com/users/JFreegman/received_events",
            "repos_url": "https://api.github.com/users/JFreegman/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/JFreegman"
        }
    ],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "TokTok:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/TokTok/c-toxcore/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/TokTok/c-toxcore/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/TokTok/c-toxcore/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/TokTok/c-toxcore/branches{/branch}",
            "clone_url": "https://github.com/TokTok/c-toxcore.git",
            "collaborators_url": "https://api.github.com/repos/TokTok/c-toxcore/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/comments{/number}",
            "commits_url": "https://api.github.com/repos/TokTok/c-toxcore/commits{/sha}",
            "compare_url": "https://api.github.com/repos/TokTok/c-toxcore/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/TokTok/c-toxcore/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/TokTok/c-toxcore/contributors",
            "created_at": "2016-07-06T08:15:22Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/TokTok/c-toxcore/deployments",
            "description": "The future of online communications.",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/TokTok/c-toxcore/downloads",
            "events_url": "https://api.github.com/repos/TokTok/c-toxcore/events",
            "fork": true,
            "forks": 283,
            "forks_count": 283,
            "forks_url": "https://api.github.com/repos/TokTok/c-toxcore/forks",
            "full_name": "TokTok/c-toxcore",
            "git_commits_url": "https://api.github.com/repos/TokTok/c-toxcore/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/TokTok/c-toxcore/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/TokTok/c-toxcore/git/tags{/sha}",
            "git_url": "git://github.com/TokTok/c-toxcore.git",
            "has_discussions": false,
            "has_downloads": false,
            "has_issues": true,
            "has_pages": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage": "https://tox.chat",
            "hooks_url": "https://api.github.com/repos/TokTok/c-toxcore/hooks",
            "html_url": "https://github.com/TokTok/c-toxcore",
            "id": 62703642,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/TokTok/c-toxcore/issues{/number}",
            "keys_url": "https://api.github.com/repos/TokTok/c-toxcore/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/TokTok/c-toxcore/labels{/name}",
            "language": "C",
            "languages_url": "https://api.github.com/repos/TokTok/c-toxcore/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/TokTok/c-toxcore/merges",
            "milestones_url": "https://api.github.com/repos/TokTok/c-toxcore/milestones{/number}",
            "mirror_url": null,
            "name": "c-toxcore",
            "node_id": "MDEwOlJlcG9zaXRvcnk2MjcwMzY0Mg==",
            "notifications_url": "https://api.github.com/repos/TokTok/c-toxcore/notifications{?since,all,participating}",
            "open_issues": 210,
            "open_issues_count": 210,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
                "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
                "followers_url": "https://api.github.com/users/TokTok/followers",
                "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
                "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TokTok",
                "id": 17427091,
                "login": "TokTok",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
                "organizations_url": "https://api.github.com/users/TokTok/orgs",
                "received_events_url": "https://api.github.com/users/TokTok/received_events",
                "repos_url": "https://api.github.com/users/TokTok/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/TokTok"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls{/number}",
            "pushed_at": "2024-02-23T16:21:31Z",
            "releases_url": "https://api.github.com/repos/TokTok/c-toxcore/releases{/id}",
            "size": 37461,
            "ssh_url": "git@github.com:TokTok/c-toxcore.git",
            "stargazers_count": 2116,
            "stargazers_url": "https://api.github.com/repos/TokTok/c-toxcore/stargazers",
            "statuses_url": "https://api.github.com/repos/TokTok/c-toxcore/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/TokTok/c-toxcore/subscribers",
            "subscription_url": "https://api.github.com/repos/TokTok/c-toxcore/subscription",
            "svn_url": "https://github.com/TokTok/c-toxcore",
            "tags_url": "https://api.github.com/repos/TokTok/c-toxcore/tags",
            "teams_url": "https://api.github.com/repos/TokTok/c-toxcore/teams",
            "topics": [
                "cryptography",
                "encryption",
                "network",
                "p2p",
                "security",
                "toxcore"
            ],
            "trees_url": "https://api.github.com/repos/TokTok/c-toxcore/git/trees{/sha}",
            "updated_at": "2024-02-23T18:58:26Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore",
            "visibility": "public",
            "watchers": 2116,
            "watchers_count": 2116,
            "web_commit_signoff_required": false
        },
        "sha": "09575dc05b82f94115fc7578cc2b9e683797a4ff",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/17427091?v=4",
            "events_url": "https://api.github.com/users/TokTok/events{/privacy}",
            "followers_url": "https://api.github.com/users/TokTok/followers",
            "following_url": "https://api.github.com/users/TokTok/following{/other_user}",
            "gists_url": "https://api.github.com/users/TokTok/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/TokTok",
            "id": 17427091,
            "login": "TokTok",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE3NDI3MDkx",
            "organizations_url": "https://api.github.com/users/TokTok/orgs",
            "received_events_url": "https://api.github.com/users/TokTok/received_events",
            "repos_url": "https://api.github.com/users/TokTok/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/TokTok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/TokTok/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/TokTok"
        }
    },
    "body": "Continuation of https://github.com/TokTok/c-toxcore/pull/2168 which was accidentally closed.\n\n<!-- Reviewable:start -->\n---\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/toktok/c-toxcore/2169)\n<!-- Reviewable:end -->\n",
    "closed_at": "2022-03-31T00:18:12Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831617630"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831617630"
                }
            },
            "author_association": "MEMBER",
            "body": "It might be neater to pass this the old list + the new entry to validate the credentials against? That way you don't have to jump through all these hoops to resize a copy of the list so you can drop it if credential validation fails.",
            "commit_id": "015305a0880b2f28ef90b388082e0d4eeb77e558",
            "created_at": "2022-03-21T23:18:55Z",
            "diff_hunk": "@@ -0,0 +1,844 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2016-2020 The TokTok team.\n+ * Copyright © 2015 Tox project.\n+ */\n+\n+/**\n+ * An implementation of massive text only group chats.\n+ */\n+\n+#include \"group_moderation.h\"\n+\n+#include <assert.h>\n+\n+#ifndef VANILLA_NACL\n+#include <sodium.h>\n+#endif\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"ccompat.h\"\n+#include \"crypto_core.h\"\n+#include \"mono_time.h\"\n+#include \"network.h\"\n+#include \"util.h\"\n+\n+#ifndef VANILLA_NACL\n+\n+static_assert(MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_SANCTIONS_CREDS_SIZE must be <= the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_SANCTIONS * MOD_SANCTION_PACKED_SIZE + MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_SANCTIONS must be able to fit inside the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_MODERATORS * MOD_LIST_ENTRY_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_MODERATORS must be able to fit insize the maximum allowed payload size)\");\n+\n+uint16_t mod_list_packed_size(const Moderation *moderation)\n+{\n+    return moderation->num_mods * MOD_LIST_ENTRY_SIZE;\n+}\n+\n+int mod_list_unpack(Moderation *moderation, const uint8_t *data, uint16_t length, uint16_t num_mods)\n+{\n+    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {\n+        return -1;\n+    }\n+\n+    mod_list_cleanup(moderation);\n+\n+    if (num_mods == 0) {\n+        return 0;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)calloc(num_mods, sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return -1;\n+    }\n+\n+    uint16_t unpacked_len = 0;\n+\n+    for (uint16_t i = 0; i < num_mods; ++i) {\n+        tmp_list[i] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+        if (tmp_list[i] == nullptr) {\n+            free_uint8_t_pointer_array(tmp_list, i);\n+            return -1;\n+        }\n+\n+        memcpy(tmp_list[i], &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);\n+        unpacked_len += MOD_LIST_ENTRY_SIZE;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+    moderation->num_mods = num_mods;\n+\n+    return unpacked_len;\n+}\n+\n+void mod_list_pack(const Moderation *moderation, uint8_t *data)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);\n+    }\n+}\n+\n+void mod_list_get_data_hash(uint8_t *hash, const uint8_t *packed_mod_list, uint16_t length)\n+{\n+    crypto_sha256(hash, packed_mod_list, length);\n+}\n+\n+bool mod_list_make_hash(const Moderation *moderation, uint8_t *hash)\n+{\n+    if (moderation->num_mods == 0) {\n+        memset(hash, 0, MOD_MODERATION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t data_buf_size = mod_list_packed_size(moderation);\n+\n+    assert(data_buf_size > 0);\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    mod_list_pack(moderation, data);\n+\n+    mod_list_get_data_hash(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/**\n+ * Returns moderator list index for public_sig_key.\n+ * Returns -1 if key is not in the list.\n+ */\n+non_null()\n+static int mod_list_index_of_sig_pk(const Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], public_sig_key, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return i;\n+        }\n+    }\n+\n+    return -1;\n+}\n+\n+bool mod_list_verify_sig_pk(const Moderation *moderation, const uint8_t *sig_pk)\n+{\n+    if (memcmp(moderation->founder_public_sig_key, sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+        return true;\n+    }\n+\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool mod_list_remove_index(Moderation *moderation, uint16_t index)\n+{\n+    if (index >= moderation->num_mods) {\n+        return false;\n+    }\n+\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    if ((moderation->num_mods - 1) == 0) {\n+        mod_list_cleanup(moderation);\n+        return true;\n+    }\n+\n+    --moderation->num_mods;\n+\n+    if (index != moderation->num_mods) {\n+        memcpy(moderation->mod_list[index], moderation->mod_list[moderation->num_mods],\n+               MOD_LIST_ENTRY_SIZE);\n+    }\n+\n+    free(moderation->mod_list[moderation->num_mods]);\n+    moderation->mod_list[moderation->num_mods] = nullptr;\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, moderation->num_mods * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    return true;\n+}\n+\n+bool mod_list_remove_entry(Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    const int idx = mod_list_index_of_sig_pk(moderation, public_sig_key);\n+\n+    if (idx == -1) {\n+        return false;\n+    }\n+\n+    assert(idx <= UINT16_MAX);\n+\n+    return mod_list_remove_index(moderation, (uint16_t)idx);\n+}\n+\n+bool mod_list_add_entry(Moderation *moderation, const uint8_t *mod_data)\n+{\n+    if (moderation->num_mods >= MOD_MAX_NUM_MODERATORS) {\n+        return false;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, (moderation->num_mods + 1) * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    tmp_list[moderation->num_mods] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+    if (tmp_list[moderation->num_mods] == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(tmp_list[moderation->num_mods], mod_data, MOD_LIST_ENTRY_SIZE);\n+    ++moderation->num_mods;\n+\n+    return true;\n+}\n+\n+void mod_list_cleanup(Moderation *moderation)\n+{\n+    free_uint8_t_pointer_array(moderation->mod_list, moderation->num_mods);\n+    moderation->num_mods = 0;\n+    moderation->mod_list = nullptr;\n+}\n+\n+uint16_t sanctions_creds_pack(const Mod_Sanction_Creds *creds, uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t packed_len = 0;\n+\n+    net_pack_u32(data + packed_len, creds->version);\n+    packed_len += sizeof(uint32_t);\n+    memcpy(data + packed_len, creds->hash, MOD_SANCTION_HASH_SIZE);\n+    packed_len += MOD_SANCTION_HASH_SIZE;\n+    net_pack_u16(data + packed_len, creds->checksum);\n+    packed_len += sizeof(uint16_t);\n+    memcpy(data + packed_len, creds->sig_pk, SIG_PUBLIC_KEY_SIZE);\n+    packed_len += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(data + packed_len, creds->sig, SIGNATURE_SIZE);\n+    packed_len += SIGNATURE_SIZE;\n+\n+    return packed_len;\n+}\n+\n+int sanctions_list_pack(uint8_t *data, uint16_t length, const Mod_Sanction *sanctions,\n+                        const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    assert(sanctions != nullptr || num_sanctions == 0);\n+\n+    uint16_t packed_len = 0;\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (packed_len + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(data + packed_len, &sanctions[i].type, sizeof(uint8_t));\n+        packed_len += sizeof(uint8_t);\n+        memcpy(data + packed_len, sanctions[i].setter_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+        packed_len += SIG_PUBLIC_KEY_SIZE;\n+        net_pack_u64(data + packed_len, sanctions[i].time_set);\n+        packed_len += TIME_STAMP_SIZE;\n+\n+        const uint8_t sanctions_type = sanctions[i].type;\n+\n+        if (sanctions_type == SA_OBSERVER) {\n+            if (packed_len + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(data + packed_len, sanctions[i].target_public_enc_key, ENC_PUBLIC_KEY_SIZE);\n+            packed_len += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (packed_len + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        /* Signature must be packed last */\n+        memcpy(data + packed_len, sanctions[i].signature, SIGNATURE_SIZE);\n+        packed_len += SIGNATURE_SIZE;\n+    }\n+\n+    if (creds == nullptr) {\n+        return packed_len;\n+    }\n+\n+    const uint16_t cred_len = sanctions_creds_pack(creds, data + packed_len, length - packed_len);\n+\n+    if (cred_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    return (int)(packed_len + cred_len);\n+}\n+\n+uint16_t sanctions_creds_unpack(Mod_Sanction_Creds *creds, const uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t len_processed = 0;\n+\n+    net_unpack_u32(data + len_processed, &creds->version);\n+    len_processed += sizeof(uint32_t);\n+    memcpy(creds->hash, data + len_processed, MOD_SANCTION_HASH_SIZE);\n+    len_processed += MOD_SANCTION_HASH_SIZE;\n+    net_unpack_u16(data + len_processed, &creds->checksum);\n+    len_processed += sizeof(uint16_t);\n+    memcpy(creds->sig_pk, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+    len_processed += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(creds->sig, data + len_processed, SIGNATURE_SIZE);\n+    len_processed += SIGNATURE_SIZE;\n+\n+    return len_processed;\n+}\n+\n+int sanctions_list_unpack(Mod_Sanction *sanctions, Mod_Sanction_Creds *creds, uint16_t max_sanctions,\n+                          const uint8_t *data, uint16_t length, uint16_t *processed_data_len)\n+{\n+    uint16_t num = 0;\n+    uint16_t len_processed = 0;\n+\n+    while (num < max_sanctions && num < MOD_MAX_NUM_SANCTIONS && len_processed < length) {\n+        if (len_processed + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(&sanctions[num].type, data + len_processed, sizeof(uint8_t));\n+        len_processed += sizeof(uint8_t);\n+        memcpy(sanctions[num].setter_public_sig_key, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+        len_processed += SIG_PUBLIC_KEY_SIZE;\n+        net_unpack_u64(data + len_processed, &sanctions[num].time_set);\n+        len_processed += TIME_STAMP_SIZE;\n+\n+        if (sanctions[num].type == SA_OBSERVER) {\n+            if (len_processed + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(sanctions[num].target_public_enc_key, data + len_processed, ENC_PUBLIC_KEY_SIZE);\n+            len_processed += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (len_processed + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(sanctions[num].signature, data + len_processed, SIGNATURE_SIZE);\n+        len_processed += SIGNATURE_SIZE;\n+\n+        ++num;\n+    }\n+\n+    const uint16_t creds_len = sanctions_creds_unpack(creds, data + len_processed, length - len_processed);\n+\n+    if (creds_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    if (processed_data_len != nullptr) {\n+        *processed_data_len = len_processed + creds_len;\n+    }\n+\n+    return num;\n+}\n+\n+\n+/** @brief Creates a new sanction list hash and puts it in hash.\n+ *\n+ * The hash is derived from the signature of all entries plus the version number.\n+ * hash must have room for at least MOD_SANCTION_HASH_SIZE bytes.\n+ *\n+ * If num_sanctions is 0 the hash is zeroed.\n+ *\n+ * Return true on success.\n+ */\n+non_null(4) nullable(1)\n+static int sanctions_list_make_hash(const Mod_Sanction *sanctions, uint32_t new_version, uint16_t num_sanctions,\n+                                    uint8_t *hash)\n+{\n+    if (num_sanctions == 0 || sanctions == nullptr) {\n+        memset(hash, 0, MOD_SANCTION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t sig_data_size = num_sanctions * SIGNATURE_SIZE;\n+    const size_t data_buf_size = sig_data_size + sizeof(uint32_t);\n+\n+    // check for integer overflower\n+    if (data_buf_size < num_sanctions) {\n+        return false;\n+    }\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        memcpy(&data[i * SIGNATURE_SIZE], sanctions[i].signature, SIGNATURE_SIZE);\n+    }\n+\n+    memcpy(&data[sig_data_size], &new_version, sizeof(uint32_t));\n+    crypto_sha256(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/** @brief Verifies that sanction contains valid info and was assigned by a current mod or group founder.\n+ *\n+ * Returns true on success.\n+ */\n+non_null()\n+static bool sanctions_list_validate_entry(const Moderation *moderation, const Mod_Sanction *sanction)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, sanction->setter_public_sig_key)) {\n+        return false;\n+    }\n+\n+    if (sanction->type >= SA_INVALID) {\n+        return false;\n+    }\n+\n+    if (sanction->time_set == 0) {\n+        return false;\n+    }\n+\n+    uint8_t packed_data[MOD_SANCTION_PACKED_SIZE];\n+    const int packed_len = sanctions_list_pack(packed_data, sizeof(packed_data), sanction, nullptr, 1);\n+\n+    if (packed_len <= (int) SIGNATURE_SIZE) {\n+        return false;\n+    }\n+\n+    return crypto_signature_verify(sanction->signature, packed_data, packed_len - SIGNATURE_SIZE,\n+                                   sanction->setter_public_sig_key);\n+}\n+\n+non_null()\n+static uint16_t sanctions_creds_get_checksum(const Mod_Sanction_Creds *creds)\n+{\n+    uint16_t sum = 0;\n+\n+    for (size_t i = 0; i < MOD_SANCTION_HASH_SIZE; ++i) {\n+        sum += creds->hash[i];\n+    }\n+\n+    return sum;\n+}\n+\n+non_null()\n+static void sanctions_creds_set_checksum(Mod_Sanction_Creds *creds)\n+{\n+    creds->checksum = sanctions_creds_get_checksum(creds);\n+}\n+\n+bool sanctions_list_make_creds(Moderation *moderation)\n+{\n+    const Mod_Sanction_Creds old_creds = moderation->sanctions_creds;\n+\n+    ++moderation->sanctions_creds.version;\n+\n+    memcpy(moderation->sanctions_creds.sig_pk, moderation->self_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(moderation->sanctions, moderation->sanctions_creds.version,\n+                                  moderation->num_sanctions, hash)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    memcpy(moderation->sanctions_creds.hash, hash, MOD_SANCTION_HASH_SIZE);\n+\n+    sanctions_creds_set_checksum(&moderation->sanctions_creds);\n+\n+    if (!crypto_signature_create(moderation->sanctions_creds.sig, moderation->sanctions_creds.hash,\n+                                 MOD_SANCTION_HASH_SIZE, moderation->self_secret_sig_key)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/** @brief Validates sanction list credentials.\n+ *\n+ * Verifies that:\n+ * - the public signature key belongs to a mod or the founder\n+ * - the signature for the hash was made by the owner of the public signature key.\n+ * - the received hash matches our own hash of the new sanctions list\n+ * - the received checksum matches the received hash\n+ * - the new version is >= our current version\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1, 3) nullable(2)\n+static bool sanctions_creds_validate(const Moderation *moderation, const Mod_Sanction *sanctions,\n+                                     const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials signature pk\");\n+        return false;\n+    }\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(sanctions, creds->version, num_sanctions, hash)) {\n+        return false;\n+    }\n+\n+    if (memcmp(hash, creds->hash, MOD_SANCTION_HASH_SIZE) != 0) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials hash\");\n+        return false;\n+    }\n+\n+    if (creds->checksum != sanctions_creds_get_checksum(creds)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials checksum\");\n+        return false;\n+    }\n+\n+    if (moderation->shared_state_version > 0) {\n+        if ((creds->version < moderation->sanctions_creds.version)\n+                && !(creds->version == 0 && moderation->sanctions_creds.version == UINT32_MAX)) {\n+            LOGGER_WARNING(moderation->log, \"Invalid version\");\n+            return false;\n+        }\n+    }\n+\n+    if (!crypto_signature_verify(creds->sig, hash, MOD_SANCTION_HASH_SIZE, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid signature\");\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool sanctions_list_check_integrity(const Moderation *moderation, const Mod_Sanction_Creds *creds,\n+                                    const Mod_Sanction *sanctions, uint16_t num_sanctions)\n+{\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (!sanctions_list_validate_entry(moderation, &sanctions[i])) {\n+            LOGGER_WARNING(moderation->log, \"Invalid entry\");\n+            return false;\n+        }\n+    }\n+\n+    return sanctions_creds_validate(moderation, sanctions, creds, num_sanctions);\n+}\n+\n+/** @brief Removes index-th sanction list entry.\n+ *\n+ * New credentials will be validated if creds is non-null.\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1) nullable(3)\n+static bool sanctions_list_remove_index(Moderation *moderation, uint16_t index, const Mod_Sanction_Creds *creds)\n+{\n+    if (index >= moderation->num_sanctions) {\n+        return false;\n+    }\n+\n+    const uint16_t new_num = moderation->num_sanctions - 1;\n+\n+    if (new_num == 0) {\n+        if (creds != nullptr) {\n+            if (!sanctions_creds_validate(moderation, nullptr, creds, 0)) {\n+                return false;\n+            }\n+\n+            moderation->sanctions_creds = *creds;\n+        }\n+\n+        sanctions_list_cleanup(moderation);\n+\n+        return true;\n+    }\n+\n+    /** Operate on a copy of the list in case something goes wrong. */\n+    const size_t old_count =  moderation->num_sanctions;\n+    Mod_Sanction *sanctions_copy = (Mod_Sanction *)calloc(old_count, sizeof(Mod_Sanction));\n+\n+    if (sanctions_copy == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(sanctions_copy, moderation->sanctions, old_count * sizeof(Mod_Sanction));\n+\n+    if (index != new_num) {\n+        sanctions_copy[index] = sanctions_copy[new_num];\n+    }\n+\n+    Mod_Sanction *new_list = (Mod_Sanction *)realloc(sanctions_copy, new_num * sizeof(Mod_Sanction));\n+\n+    if (new_list == nullptr) {\n+        free(sanctions_copy);\n+        return false;\n+    }\n+\n+    if (creds != nullptr) {\n+        if (!sanctions_creds_validate(moderation, new_list, creds, new_num)) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831617630",
            "id": 831617630,
            "line": null,
            "node_id": "PRRC_kwDOA7zIGs4xkXpe",
            "original_commit_id": "31522652206b97fc60476ec11b795b699d2758ae",
            "original_line": 623,
            "original_position": 623,
            "original_start_line": null,
            "path": "toxcore/group_moderation.c",
            "position": null,
            "pull_request_review_id": 916454731,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831617630/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-03-21T23:18:56Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831617630",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831626557"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831626557"
                }
            },
            "author_association": "MEMBER",
            "body": "`sanction_creds_validate()` is validating the sanctions credentials rather than a single entry. It needs to see the entire sanctions list as a whole to do validation, which includes validating a signature of a hash of every sanctions entry, along with validating the current version and a checksum.",
            "commit_id": "015305a0880b2f28ef90b388082e0d4eeb77e558",
            "created_at": "2022-03-21T23:39:44Z",
            "diff_hunk": "@@ -0,0 +1,844 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2016-2020 The TokTok team.\n+ * Copyright © 2015 Tox project.\n+ */\n+\n+/**\n+ * An implementation of massive text only group chats.\n+ */\n+\n+#include \"group_moderation.h\"\n+\n+#include <assert.h>\n+\n+#ifndef VANILLA_NACL\n+#include <sodium.h>\n+#endif\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"ccompat.h\"\n+#include \"crypto_core.h\"\n+#include \"mono_time.h\"\n+#include \"network.h\"\n+#include \"util.h\"\n+\n+#ifndef VANILLA_NACL\n+\n+static_assert(MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_SANCTIONS_CREDS_SIZE must be <= the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_SANCTIONS * MOD_SANCTION_PACKED_SIZE + MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_SANCTIONS must be able to fit inside the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_MODERATORS * MOD_LIST_ENTRY_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_MODERATORS must be able to fit insize the maximum allowed payload size)\");\n+\n+uint16_t mod_list_packed_size(const Moderation *moderation)\n+{\n+    return moderation->num_mods * MOD_LIST_ENTRY_SIZE;\n+}\n+\n+int mod_list_unpack(Moderation *moderation, const uint8_t *data, uint16_t length, uint16_t num_mods)\n+{\n+    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {\n+        return -1;\n+    }\n+\n+    mod_list_cleanup(moderation);\n+\n+    if (num_mods == 0) {\n+        return 0;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)calloc(num_mods, sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return -1;\n+    }\n+\n+    uint16_t unpacked_len = 0;\n+\n+    for (uint16_t i = 0; i < num_mods; ++i) {\n+        tmp_list[i] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+        if (tmp_list[i] == nullptr) {\n+            free_uint8_t_pointer_array(tmp_list, i);\n+            return -1;\n+        }\n+\n+        memcpy(tmp_list[i], &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);\n+        unpacked_len += MOD_LIST_ENTRY_SIZE;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+    moderation->num_mods = num_mods;\n+\n+    return unpacked_len;\n+}\n+\n+void mod_list_pack(const Moderation *moderation, uint8_t *data)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);\n+    }\n+}\n+\n+void mod_list_get_data_hash(uint8_t *hash, const uint8_t *packed_mod_list, uint16_t length)\n+{\n+    crypto_sha256(hash, packed_mod_list, length);\n+}\n+\n+bool mod_list_make_hash(const Moderation *moderation, uint8_t *hash)\n+{\n+    if (moderation->num_mods == 0) {\n+        memset(hash, 0, MOD_MODERATION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t data_buf_size = mod_list_packed_size(moderation);\n+\n+    assert(data_buf_size > 0);\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    mod_list_pack(moderation, data);\n+\n+    mod_list_get_data_hash(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/**\n+ * Returns moderator list index for public_sig_key.\n+ * Returns -1 if key is not in the list.\n+ */\n+non_null()\n+static int mod_list_index_of_sig_pk(const Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], public_sig_key, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return i;\n+        }\n+    }\n+\n+    return -1;\n+}\n+\n+bool mod_list_verify_sig_pk(const Moderation *moderation, const uint8_t *sig_pk)\n+{\n+    if (memcmp(moderation->founder_public_sig_key, sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+        return true;\n+    }\n+\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool mod_list_remove_index(Moderation *moderation, uint16_t index)\n+{\n+    if (index >= moderation->num_mods) {\n+        return false;\n+    }\n+\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    if ((moderation->num_mods - 1) == 0) {\n+        mod_list_cleanup(moderation);\n+        return true;\n+    }\n+\n+    --moderation->num_mods;\n+\n+    if (index != moderation->num_mods) {\n+        memcpy(moderation->mod_list[index], moderation->mod_list[moderation->num_mods],\n+               MOD_LIST_ENTRY_SIZE);\n+    }\n+\n+    free(moderation->mod_list[moderation->num_mods]);\n+    moderation->mod_list[moderation->num_mods] = nullptr;\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, moderation->num_mods * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    return true;\n+}\n+\n+bool mod_list_remove_entry(Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    const int idx = mod_list_index_of_sig_pk(moderation, public_sig_key);\n+\n+    if (idx == -1) {\n+        return false;\n+    }\n+\n+    assert(idx <= UINT16_MAX);\n+\n+    return mod_list_remove_index(moderation, (uint16_t)idx);\n+}\n+\n+bool mod_list_add_entry(Moderation *moderation, const uint8_t *mod_data)\n+{\n+    if (moderation->num_mods >= MOD_MAX_NUM_MODERATORS) {\n+        return false;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, (moderation->num_mods + 1) * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    tmp_list[moderation->num_mods] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+    if (tmp_list[moderation->num_mods] == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(tmp_list[moderation->num_mods], mod_data, MOD_LIST_ENTRY_SIZE);\n+    ++moderation->num_mods;\n+\n+    return true;\n+}\n+\n+void mod_list_cleanup(Moderation *moderation)\n+{\n+    free_uint8_t_pointer_array(moderation->mod_list, moderation->num_mods);\n+    moderation->num_mods = 0;\n+    moderation->mod_list = nullptr;\n+}\n+\n+uint16_t sanctions_creds_pack(const Mod_Sanction_Creds *creds, uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t packed_len = 0;\n+\n+    net_pack_u32(data + packed_len, creds->version);\n+    packed_len += sizeof(uint32_t);\n+    memcpy(data + packed_len, creds->hash, MOD_SANCTION_HASH_SIZE);\n+    packed_len += MOD_SANCTION_HASH_SIZE;\n+    net_pack_u16(data + packed_len, creds->checksum);\n+    packed_len += sizeof(uint16_t);\n+    memcpy(data + packed_len, creds->sig_pk, SIG_PUBLIC_KEY_SIZE);\n+    packed_len += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(data + packed_len, creds->sig, SIGNATURE_SIZE);\n+    packed_len += SIGNATURE_SIZE;\n+\n+    return packed_len;\n+}\n+\n+int sanctions_list_pack(uint8_t *data, uint16_t length, const Mod_Sanction *sanctions,\n+                        const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    assert(sanctions != nullptr || num_sanctions == 0);\n+\n+    uint16_t packed_len = 0;\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (packed_len + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(data + packed_len, &sanctions[i].type, sizeof(uint8_t));\n+        packed_len += sizeof(uint8_t);\n+        memcpy(data + packed_len, sanctions[i].setter_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+        packed_len += SIG_PUBLIC_KEY_SIZE;\n+        net_pack_u64(data + packed_len, sanctions[i].time_set);\n+        packed_len += TIME_STAMP_SIZE;\n+\n+        const uint8_t sanctions_type = sanctions[i].type;\n+\n+        if (sanctions_type == SA_OBSERVER) {\n+            if (packed_len + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(data + packed_len, sanctions[i].target_public_enc_key, ENC_PUBLIC_KEY_SIZE);\n+            packed_len += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (packed_len + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        /* Signature must be packed last */\n+        memcpy(data + packed_len, sanctions[i].signature, SIGNATURE_SIZE);\n+        packed_len += SIGNATURE_SIZE;\n+    }\n+\n+    if (creds == nullptr) {\n+        return packed_len;\n+    }\n+\n+    const uint16_t cred_len = sanctions_creds_pack(creds, data + packed_len, length - packed_len);\n+\n+    if (cred_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    return (int)(packed_len + cred_len);\n+}\n+\n+uint16_t sanctions_creds_unpack(Mod_Sanction_Creds *creds, const uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t len_processed = 0;\n+\n+    net_unpack_u32(data + len_processed, &creds->version);\n+    len_processed += sizeof(uint32_t);\n+    memcpy(creds->hash, data + len_processed, MOD_SANCTION_HASH_SIZE);\n+    len_processed += MOD_SANCTION_HASH_SIZE;\n+    net_unpack_u16(data + len_processed, &creds->checksum);\n+    len_processed += sizeof(uint16_t);\n+    memcpy(creds->sig_pk, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+    len_processed += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(creds->sig, data + len_processed, SIGNATURE_SIZE);\n+    len_processed += SIGNATURE_SIZE;\n+\n+    return len_processed;\n+}\n+\n+int sanctions_list_unpack(Mod_Sanction *sanctions, Mod_Sanction_Creds *creds, uint16_t max_sanctions,\n+                          const uint8_t *data, uint16_t length, uint16_t *processed_data_len)\n+{\n+    uint16_t num = 0;\n+    uint16_t len_processed = 0;\n+\n+    while (num < max_sanctions && num < MOD_MAX_NUM_SANCTIONS && len_processed < length) {\n+        if (len_processed + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(&sanctions[num].type, data + len_processed, sizeof(uint8_t));\n+        len_processed += sizeof(uint8_t);\n+        memcpy(sanctions[num].setter_public_sig_key, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+        len_processed += SIG_PUBLIC_KEY_SIZE;\n+        net_unpack_u64(data + len_processed, &sanctions[num].time_set);\n+        len_processed += TIME_STAMP_SIZE;\n+\n+        if (sanctions[num].type == SA_OBSERVER) {\n+            if (len_processed + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(sanctions[num].target_public_enc_key, data + len_processed, ENC_PUBLIC_KEY_SIZE);\n+            len_processed += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (len_processed + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(sanctions[num].signature, data + len_processed, SIGNATURE_SIZE);\n+        len_processed += SIGNATURE_SIZE;\n+\n+        ++num;\n+    }\n+\n+    const uint16_t creds_len = sanctions_creds_unpack(creds, data + len_processed, length - len_processed);\n+\n+    if (creds_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    if (processed_data_len != nullptr) {\n+        *processed_data_len = len_processed + creds_len;\n+    }\n+\n+    return num;\n+}\n+\n+\n+/** @brief Creates a new sanction list hash and puts it in hash.\n+ *\n+ * The hash is derived from the signature of all entries plus the version number.\n+ * hash must have room for at least MOD_SANCTION_HASH_SIZE bytes.\n+ *\n+ * If num_sanctions is 0 the hash is zeroed.\n+ *\n+ * Return true on success.\n+ */\n+non_null(4) nullable(1)\n+static int sanctions_list_make_hash(const Mod_Sanction *sanctions, uint32_t new_version, uint16_t num_sanctions,\n+                                    uint8_t *hash)\n+{\n+    if (num_sanctions == 0 || sanctions == nullptr) {\n+        memset(hash, 0, MOD_SANCTION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t sig_data_size = num_sanctions * SIGNATURE_SIZE;\n+    const size_t data_buf_size = sig_data_size + sizeof(uint32_t);\n+\n+    // check for integer overflower\n+    if (data_buf_size < num_sanctions) {\n+        return false;\n+    }\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        memcpy(&data[i * SIGNATURE_SIZE], sanctions[i].signature, SIGNATURE_SIZE);\n+    }\n+\n+    memcpy(&data[sig_data_size], &new_version, sizeof(uint32_t));\n+    crypto_sha256(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/** @brief Verifies that sanction contains valid info and was assigned by a current mod or group founder.\n+ *\n+ * Returns true on success.\n+ */\n+non_null()\n+static bool sanctions_list_validate_entry(const Moderation *moderation, const Mod_Sanction *sanction)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, sanction->setter_public_sig_key)) {\n+        return false;\n+    }\n+\n+    if (sanction->type >= SA_INVALID) {\n+        return false;\n+    }\n+\n+    if (sanction->time_set == 0) {\n+        return false;\n+    }\n+\n+    uint8_t packed_data[MOD_SANCTION_PACKED_SIZE];\n+    const int packed_len = sanctions_list_pack(packed_data, sizeof(packed_data), sanction, nullptr, 1);\n+\n+    if (packed_len <= (int) SIGNATURE_SIZE) {\n+        return false;\n+    }\n+\n+    return crypto_signature_verify(sanction->signature, packed_data, packed_len - SIGNATURE_SIZE,\n+                                   sanction->setter_public_sig_key);\n+}\n+\n+non_null()\n+static uint16_t sanctions_creds_get_checksum(const Mod_Sanction_Creds *creds)\n+{\n+    uint16_t sum = 0;\n+\n+    for (size_t i = 0; i < MOD_SANCTION_HASH_SIZE; ++i) {\n+        sum += creds->hash[i];\n+    }\n+\n+    return sum;\n+}\n+\n+non_null()\n+static void sanctions_creds_set_checksum(Mod_Sanction_Creds *creds)\n+{\n+    creds->checksum = sanctions_creds_get_checksum(creds);\n+}\n+\n+bool sanctions_list_make_creds(Moderation *moderation)\n+{\n+    const Mod_Sanction_Creds old_creds = moderation->sanctions_creds;\n+\n+    ++moderation->sanctions_creds.version;\n+\n+    memcpy(moderation->sanctions_creds.sig_pk, moderation->self_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(moderation->sanctions, moderation->sanctions_creds.version,\n+                                  moderation->num_sanctions, hash)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    memcpy(moderation->sanctions_creds.hash, hash, MOD_SANCTION_HASH_SIZE);\n+\n+    sanctions_creds_set_checksum(&moderation->sanctions_creds);\n+\n+    if (!crypto_signature_create(moderation->sanctions_creds.sig, moderation->sanctions_creds.hash,\n+                                 MOD_SANCTION_HASH_SIZE, moderation->self_secret_sig_key)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/** @brief Validates sanction list credentials.\n+ *\n+ * Verifies that:\n+ * - the public signature key belongs to a mod or the founder\n+ * - the signature for the hash was made by the owner of the public signature key.\n+ * - the received hash matches our own hash of the new sanctions list\n+ * - the received checksum matches the received hash\n+ * - the new version is >= our current version\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1, 3) nullable(2)\n+static bool sanctions_creds_validate(const Moderation *moderation, const Mod_Sanction *sanctions,\n+                                     const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials signature pk\");\n+        return false;\n+    }\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(sanctions, creds->version, num_sanctions, hash)) {\n+        return false;\n+    }\n+\n+    if (memcmp(hash, creds->hash, MOD_SANCTION_HASH_SIZE) != 0) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials hash\");\n+        return false;\n+    }\n+\n+    if (creds->checksum != sanctions_creds_get_checksum(creds)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials checksum\");\n+        return false;\n+    }\n+\n+    if (moderation->shared_state_version > 0) {\n+        if ((creds->version < moderation->sanctions_creds.version)\n+                && !(creds->version == 0 && moderation->sanctions_creds.version == UINT32_MAX)) {\n+            LOGGER_WARNING(moderation->log, \"Invalid version\");\n+            return false;\n+        }\n+    }\n+\n+    if (!crypto_signature_verify(creds->sig, hash, MOD_SANCTION_HASH_SIZE, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid signature\");\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool sanctions_list_check_integrity(const Moderation *moderation, const Mod_Sanction_Creds *creds,\n+                                    const Mod_Sanction *sanctions, uint16_t num_sanctions)\n+{\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (!sanctions_list_validate_entry(moderation, &sanctions[i])) {\n+            LOGGER_WARNING(moderation->log, \"Invalid entry\");\n+            return false;\n+        }\n+    }\n+\n+    return sanctions_creds_validate(moderation, sanctions, creds, num_sanctions);\n+}\n+\n+/** @brief Removes index-th sanction list entry.\n+ *\n+ * New credentials will be validated if creds is non-null.\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1) nullable(3)\n+static bool sanctions_list_remove_index(Moderation *moderation, uint16_t index, const Mod_Sanction_Creds *creds)\n+{\n+    if (index >= moderation->num_sanctions) {\n+        return false;\n+    }\n+\n+    const uint16_t new_num = moderation->num_sanctions - 1;\n+\n+    if (new_num == 0) {\n+        if (creds != nullptr) {\n+            if (!sanctions_creds_validate(moderation, nullptr, creds, 0)) {\n+                return false;\n+            }\n+\n+            moderation->sanctions_creds = *creds;\n+        }\n+\n+        sanctions_list_cleanup(moderation);\n+\n+        return true;\n+    }\n+\n+    /** Operate on a copy of the list in case something goes wrong. */\n+    const size_t old_count =  moderation->num_sanctions;\n+    Mod_Sanction *sanctions_copy = (Mod_Sanction *)calloc(old_count, sizeof(Mod_Sanction));\n+\n+    if (sanctions_copy == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(sanctions_copy, moderation->sanctions, old_count * sizeof(Mod_Sanction));\n+\n+    if (index != new_num) {\n+        sanctions_copy[index] = sanctions_copy[new_num];\n+    }\n+\n+    Mod_Sanction *new_list = (Mod_Sanction *)realloc(sanctions_copy, new_num * sizeof(Mod_Sanction));\n+\n+    if (new_list == nullptr) {\n+        free(sanctions_copy);\n+        return false;\n+    }\n+\n+    if (creds != nullptr) {\n+        if (!sanctions_creds_validate(moderation, new_list, creds, new_num)) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831626557",
            "id": 831626557,
            "in_reply_to_id": 831617630,
            "line": null,
            "node_id": "PRRC_kwDOA7zIGs4xkZ09",
            "original_commit_id": "31522652206b97fc60476ec11b795b699d2758ae",
            "original_line": 623,
            "original_position": 623,
            "original_start_line": null,
            "path": "toxcore/group_moderation.c",
            "position": null,
            "pull_request_review_id": 916467970,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831626557/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-03-21T23:41:00Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831626557",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
                "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
                "followers_url": "https://api.github.com/users/JFreegman/followers",
                "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
                "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JFreegman",
                "id": 1646057,
                "login": "JFreegman",
                "node_id": "MDQ6VXNlcjE2NDYwNTc=",
                "organizations_url": "https://api.github.com/users/JFreegman/orgs",
                "received_events_url": "https://api.github.com/users/JFreegman/received_events",
                "repos_url": "https://api.github.com/users/JFreegman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JFreegman"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831631273"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831631273"
                }
            },
            "author_association": "MEMBER",
            "body": "Wouldn't passing both the current list and the new entry be the full sanctions list?",
            "commit_id": "015305a0880b2f28ef90b388082e0d4eeb77e558",
            "created_at": "2022-03-21T23:50:07Z",
            "diff_hunk": "@@ -0,0 +1,844 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2016-2020 The TokTok team.\n+ * Copyright © 2015 Tox project.\n+ */\n+\n+/**\n+ * An implementation of massive text only group chats.\n+ */\n+\n+#include \"group_moderation.h\"\n+\n+#include <assert.h>\n+\n+#ifndef VANILLA_NACL\n+#include <sodium.h>\n+#endif\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"ccompat.h\"\n+#include \"crypto_core.h\"\n+#include \"mono_time.h\"\n+#include \"network.h\"\n+#include \"util.h\"\n+\n+#ifndef VANILLA_NACL\n+\n+static_assert(MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_SANCTIONS_CREDS_SIZE must be <= the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_SANCTIONS * MOD_SANCTION_PACKED_SIZE + MOD_SANCTIONS_CREDS_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_SANCTIONS must be able to fit inside the maximum allowed payload size)\");\n+static_assert(MOD_MAX_NUM_MODERATORS * MOD_LIST_ENTRY_SIZE <= MAX_PACKET_SIZE_NO_HEADERS,\n+              \"MOD_MAX_NUM_MODERATORS must be able to fit insize the maximum allowed payload size)\");\n+\n+uint16_t mod_list_packed_size(const Moderation *moderation)\n+{\n+    return moderation->num_mods * MOD_LIST_ENTRY_SIZE;\n+}\n+\n+int mod_list_unpack(Moderation *moderation, const uint8_t *data, uint16_t length, uint16_t num_mods)\n+{\n+    if (length < num_mods * MOD_LIST_ENTRY_SIZE) {\n+        return -1;\n+    }\n+\n+    mod_list_cleanup(moderation);\n+\n+    if (num_mods == 0) {\n+        return 0;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)calloc(num_mods, sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return -1;\n+    }\n+\n+    uint16_t unpacked_len = 0;\n+\n+    for (uint16_t i = 0; i < num_mods; ++i) {\n+        tmp_list[i] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+        if (tmp_list[i] == nullptr) {\n+            free_uint8_t_pointer_array(tmp_list, i);\n+            return -1;\n+        }\n+\n+        memcpy(tmp_list[i], &data[i * MOD_LIST_ENTRY_SIZE], MOD_LIST_ENTRY_SIZE);\n+        unpacked_len += MOD_LIST_ENTRY_SIZE;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+    moderation->num_mods = num_mods;\n+\n+    return unpacked_len;\n+}\n+\n+void mod_list_pack(const Moderation *moderation, uint8_t *data)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        memcpy(&data[i * MOD_LIST_ENTRY_SIZE], moderation->mod_list[i], MOD_LIST_ENTRY_SIZE);\n+    }\n+}\n+\n+void mod_list_get_data_hash(uint8_t *hash, const uint8_t *packed_mod_list, uint16_t length)\n+{\n+    crypto_sha256(hash, packed_mod_list, length);\n+}\n+\n+bool mod_list_make_hash(const Moderation *moderation, uint8_t *hash)\n+{\n+    if (moderation->num_mods == 0) {\n+        memset(hash, 0, MOD_MODERATION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t data_buf_size = mod_list_packed_size(moderation);\n+\n+    assert(data_buf_size > 0);\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    mod_list_pack(moderation, data);\n+\n+    mod_list_get_data_hash(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/**\n+ * Returns moderator list index for public_sig_key.\n+ * Returns -1 if key is not in the list.\n+ */\n+non_null()\n+static int mod_list_index_of_sig_pk(const Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], public_sig_key, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return i;\n+        }\n+    }\n+\n+    return -1;\n+}\n+\n+bool mod_list_verify_sig_pk(const Moderation *moderation, const uint8_t *sig_pk)\n+{\n+    if (memcmp(moderation->founder_public_sig_key, sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+        return true;\n+    }\n+\n+    for (uint16_t i = 0; i < moderation->num_mods; ++i) {\n+        if (memcmp(moderation->mod_list[i], sig_pk, SIG_PUBLIC_KEY_SIZE) == 0) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool mod_list_remove_index(Moderation *moderation, uint16_t index)\n+{\n+    if (index >= moderation->num_mods) {\n+        return false;\n+    }\n+\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    if ((moderation->num_mods - 1) == 0) {\n+        mod_list_cleanup(moderation);\n+        return true;\n+    }\n+\n+    --moderation->num_mods;\n+\n+    if (index != moderation->num_mods) {\n+        memcpy(moderation->mod_list[index], moderation->mod_list[moderation->num_mods],\n+               MOD_LIST_ENTRY_SIZE);\n+    }\n+\n+    free(moderation->mod_list[moderation->num_mods]);\n+    moderation->mod_list[moderation->num_mods] = nullptr;\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, moderation->num_mods * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    return true;\n+}\n+\n+bool mod_list_remove_entry(Moderation *moderation, const uint8_t *public_sig_key)\n+{\n+    if (moderation->num_mods == 0) {\n+        return false;\n+    }\n+\n+    const int idx = mod_list_index_of_sig_pk(moderation, public_sig_key);\n+\n+    if (idx == -1) {\n+        return false;\n+    }\n+\n+    assert(idx <= UINT16_MAX);\n+\n+    return mod_list_remove_index(moderation, (uint16_t)idx);\n+}\n+\n+bool mod_list_add_entry(Moderation *moderation, const uint8_t *mod_data)\n+{\n+    if (moderation->num_mods >= MOD_MAX_NUM_MODERATORS) {\n+        return false;\n+    }\n+\n+    uint8_t **tmp_list = (uint8_t **)realloc(moderation->mod_list, (moderation->num_mods + 1) * sizeof(uint8_t *));\n+\n+    if (tmp_list == nullptr) {\n+        return false;\n+    }\n+\n+    moderation->mod_list = tmp_list;\n+\n+    tmp_list[moderation->num_mods] = (uint8_t *)malloc(sizeof(uint8_t) * MOD_LIST_ENTRY_SIZE);\n+\n+    if (tmp_list[moderation->num_mods] == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(tmp_list[moderation->num_mods], mod_data, MOD_LIST_ENTRY_SIZE);\n+    ++moderation->num_mods;\n+\n+    return true;\n+}\n+\n+void mod_list_cleanup(Moderation *moderation)\n+{\n+    free_uint8_t_pointer_array(moderation->mod_list, moderation->num_mods);\n+    moderation->num_mods = 0;\n+    moderation->mod_list = nullptr;\n+}\n+\n+uint16_t sanctions_creds_pack(const Mod_Sanction_Creds *creds, uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t packed_len = 0;\n+\n+    net_pack_u32(data + packed_len, creds->version);\n+    packed_len += sizeof(uint32_t);\n+    memcpy(data + packed_len, creds->hash, MOD_SANCTION_HASH_SIZE);\n+    packed_len += MOD_SANCTION_HASH_SIZE;\n+    net_pack_u16(data + packed_len, creds->checksum);\n+    packed_len += sizeof(uint16_t);\n+    memcpy(data + packed_len, creds->sig_pk, SIG_PUBLIC_KEY_SIZE);\n+    packed_len += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(data + packed_len, creds->sig, SIGNATURE_SIZE);\n+    packed_len += SIGNATURE_SIZE;\n+\n+    return packed_len;\n+}\n+\n+int sanctions_list_pack(uint8_t *data, uint16_t length, const Mod_Sanction *sanctions,\n+                        const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    assert(sanctions != nullptr || num_sanctions == 0);\n+\n+    uint16_t packed_len = 0;\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (packed_len + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(data + packed_len, &sanctions[i].type, sizeof(uint8_t));\n+        packed_len += sizeof(uint8_t);\n+        memcpy(data + packed_len, sanctions[i].setter_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+        packed_len += SIG_PUBLIC_KEY_SIZE;\n+        net_pack_u64(data + packed_len, sanctions[i].time_set);\n+        packed_len += TIME_STAMP_SIZE;\n+\n+        const uint8_t sanctions_type = sanctions[i].type;\n+\n+        if (sanctions_type == SA_OBSERVER) {\n+            if (packed_len + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(data + packed_len, sanctions[i].target_public_enc_key, ENC_PUBLIC_KEY_SIZE);\n+            packed_len += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (packed_len + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        /* Signature must be packed last */\n+        memcpy(data + packed_len, sanctions[i].signature, SIGNATURE_SIZE);\n+        packed_len += SIGNATURE_SIZE;\n+    }\n+\n+    if (creds == nullptr) {\n+        return packed_len;\n+    }\n+\n+    const uint16_t cred_len = sanctions_creds_pack(creds, data + packed_len, length - packed_len);\n+\n+    if (cred_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    return (int)(packed_len + cred_len);\n+}\n+\n+uint16_t sanctions_creds_unpack(Mod_Sanction_Creds *creds, const uint8_t *data, uint16_t length)\n+{\n+    if (MOD_SANCTIONS_CREDS_SIZE > length) {\n+        return 0;\n+    }\n+\n+    uint16_t len_processed = 0;\n+\n+    net_unpack_u32(data + len_processed, &creds->version);\n+    len_processed += sizeof(uint32_t);\n+    memcpy(creds->hash, data + len_processed, MOD_SANCTION_HASH_SIZE);\n+    len_processed += MOD_SANCTION_HASH_SIZE;\n+    net_unpack_u16(data + len_processed, &creds->checksum);\n+    len_processed += sizeof(uint16_t);\n+    memcpy(creds->sig_pk, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+    len_processed += SIG_PUBLIC_KEY_SIZE;\n+    memcpy(creds->sig, data + len_processed, SIGNATURE_SIZE);\n+    len_processed += SIGNATURE_SIZE;\n+\n+    return len_processed;\n+}\n+\n+int sanctions_list_unpack(Mod_Sanction *sanctions, Mod_Sanction_Creds *creds, uint16_t max_sanctions,\n+                          const uint8_t *data, uint16_t length, uint16_t *processed_data_len)\n+{\n+    uint16_t num = 0;\n+    uint16_t len_processed = 0;\n+\n+    while (num < max_sanctions && num < MOD_MAX_NUM_SANCTIONS && len_processed < length) {\n+        if (len_processed + sizeof(uint8_t) + SIG_PUBLIC_KEY_SIZE + TIME_STAMP_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(&sanctions[num].type, data + len_processed, sizeof(uint8_t));\n+        len_processed += sizeof(uint8_t);\n+        memcpy(sanctions[num].setter_public_sig_key, data + len_processed, SIG_PUBLIC_KEY_SIZE);\n+        len_processed += SIG_PUBLIC_KEY_SIZE;\n+        net_unpack_u64(data + len_processed, &sanctions[num].time_set);\n+        len_processed += TIME_STAMP_SIZE;\n+\n+        if (sanctions[num].type == SA_OBSERVER) {\n+            if (len_processed + ENC_PUBLIC_KEY_SIZE > length) {\n+                return -1;\n+            }\n+\n+            memcpy(sanctions[num].target_public_enc_key, data + len_processed, ENC_PUBLIC_KEY_SIZE);\n+            len_processed += ENC_PUBLIC_KEY_SIZE;\n+        } else {\n+            return -1;\n+        }\n+\n+        if (len_processed + SIGNATURE_SIZE > length) {\n+            return -1;\n+        }\n+\n+        memcpy(sanctions[num].signature, data + len_processed, SIGNATURE_SIZE);\n+        len_processed += SIGNATURE_SIZE;\n+\n+        ++num;\n+    }\n+\n+    const uint16_t creds_len = sanctions_creds_unpack(creds, data + len_processed, length - len_processed);\n+\n+    if (creds_len != MOD_SANCTIONS_CREDS_SIZE) {\n+        return -1;\n+    }\n+\n+    if (processed_data_len != nullptr) {\n+        *processed_data_len = len_processed + creds_len;\n+    }\n+\n+    return num;\n+}\n+\n+\n+/** @brief Creates a new sanction list hash and puts it in hash.\n+ *\n+ * The hash is derived from the signature of all entries plus the version number.\n+ * hash must have room for at least MOD_SANCTION_HASH_SIZE bytes.\n+ *\n+ * If num_sanctions is 0 the hash is zeroed.\n+ *\n+ * Return true on success.\n+ */\n+non_null(4) nullable(1)\n+static int sanctions_list_make_hash(const Mod_Sanction *sanctions, uint32_t new_version, uint16_t num_sanctions,\n+                                    uint8_t *hash)\n+{\n+    if (num_sanctions == 0 || sanctions == nullptr) {\n+        memset(hash, 0, MOD_SANCTION_HASH_SIZE);\n+        return true;\n+    }\n+\n+    const size_t sig_data_size = num_sanctions * SIGNATURE_SIZE;\n+    const size_t data_buf_size = sig_data_size + sizeof(uint32_t);\n+\n+    // check for integer overflower\n+    if (data_buf_size < num_sanctions) {\n+        return false;\n+    }\n+\n+    uint8_t *data = (uint8_t *)malloc(data_buf_size);\n+\n+    if (data == nullptr) {\n+        return false;\n+    }\n+\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        memcpy(&data[i * SIGNATURE_SIZE], sanctions[i].signature, SIGNATURE_SIZE);\n+    }\n+\n+    memcpy(&data[sig_data_size], &new_version, sizeof(uint32_t));\n+    crypto_sha256(hash, data, data_buf_size);\n+\n+    free(data);\n+\n+    return true;\n+}\n+\n+/** @brief Verifies that sanction contains valid info and was assigned by a current mod or group founder.\n+ *\n+ * Returns true on success.\n+ */\n+non_null()\n+static bool sanctions_list_validate_entry(const Moderation *moderation, const Mod_Sanction *sanction)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, sanction->setter_public_sig_key)) {\n+        return false;\n+    }\n+\n+    if (sanction->type >= SA_INVALID) {\n+        return false;\n+    }\n+\n+    if (sanction->time_set == 0) {\n+        return false;\n+    }\n+\n+    uint8_t packed_data[MOD_SANCTION_PACKED_SIZE];\n+    const int packed_len = sanctions_list_pack(packed_data, sizeof(packed_data), sanction, nullptr, 1);\n+\n+    if (packed_len <= (int) SIGNATURE_SIZE) {\n+        return false;\n+    }\n+\n+    return crypto_signature_verify(sanction->signature, packed_data, packed_len - SIGNATURE_SIZE,\n+                                   sanction->setter_public_sig_key);\n+}\n+\n+non_null()\n+static uint16_t sanctions_creds_get_checksum(const Mod_Sanction_Creds *creds)\n+{\n+    uint16_t sum = 0;\n+\n+    for (size_t i = 0; i < MOD_SANCTION_HASH_SIZE; ++i) {\n+        sum += creds->hash[i];\n+    }\n+\n+    return sum;\n+}\n+\n+non_null()\n+static void sanctions_creds_set_checksum(Mod_Sanction_Creds *creds)\n+{\n+    creds->checksum = sanctions_creds_get_checksum(creds);\n+}\n+\n+bool sanctions_list_make_creds(Moderation *moderation)\n+{\n+    const Mod_Sanction_Creds old_creds = moderation->sanctions_creds;\n+\n+    ++moderation->sanctions_creds.version;\n+\n+    memcpy(moderation->sanctions_creds.sig_pk, moderation->self_public_sig_key, SIG_PUBLIC_KEY_SIZE);\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(moderation->sanctions, moderation->sanctions_creds.version,\n+                                  moderation->num_sanctions, hash)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    memcpy(moderation->sanctions_creds.hash, hash, MOD_SANCTION_HASH_SIZE);\n+\n+    sanctions_creds_set_checksum(&moderation->sanctions_creds);\n+\n+    if (!crypto_signature_create(moderation->sanctions_creds.sig, moderation->sanctions_creds.hash,\n+                                 MOD_SANCTION_HASH_SIZE, moderation->self_secret_sig_key)) {\n+        moderation->sanctions_creds = old_creds;\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/** @brief Validates sanction list credentials.\n+ *\n+ * Verifies that:\n+ * - the public signature key belongs to a mod or the founder\n+ * - the signature for the hash was made by the owner of the public signature key.\n+ * - the received hash matches our own hash of the new sanctions list\n+ * - the received checksum matches the received hash\n+ * - the new version is >= our current version\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1, 3) nullable(2)\n+static bool sanctions_creds_validate(const Moderation *moderation, const Mod_Sanction *sanctions,\n+                                     const Mod_Sanction_Creds *creds, uint16_t num_sanctions)\n+{\n+    if (!mod_list_verify_sig_pk(moderation, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials signature pk\");\n+        return false;\n+    }\n+\n+    uint8_t hash[MOD_SANCTION_HASH_SIZE];\n+\n+    if (!sanctions_list_make_hash(sanctions, creds->version, num_sanctions, hash)) {\n+        return false;\n+    }\n+\n+    if (memcmp(hash, creds->hash, MOD_SANCTION_HASH_SIZE) != 0) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials hash\");\n+        return false;\n+    }\n+\n+    if (creds->checksum != sanctions_creds_get_checksum(creds)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid credentials checksum\");\n+        return false;\n+    }\n+\n+    if (moderation->shared_state_version > 0) {\n+        if ((creds->version < moderation->sanctions_creds.version)\n+                && !(creds->version == 0 && moderation->sanctions_creds.version == UINT32_MAX)) {\n+            LOGGER_WARNING(moderation->log, \"Invalid version\");\n+            return false;\n+        }\n+    }\n+\n+    if (!crypto_signature_verify(creds->sig, hash, MOD_SANCTION_HASH_SIZE, creds->sig_pk)) {\n+        LOGGER_WARNING(moderation->log, \"Invalid signature\");\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool sanctions_list_check_integrity(const Moderation *moderation, const Mod_Sanction_Creds *creds,\n+                                    const Mod_Sanction *sanctions, uint16_t num_sanctions)\n+{\n+    for (uint16_t i = 0; i < num_sanctions; ++i) {\n+        if (!sanctions_list_validate_entry(moderation, &sanctions[i])) {\n+            LOGGER_WARNING(moderation->log, \"Invalid entry\");\n+            return false;\n+        }\n+    }\n+\n+    return sanctions_creds_validate(moderation, sanctions, creds, num_sanctions);\n+}\n+\n+/** @brief Removes index-th sanction list entry.\n+ *\n+ * New credentials will be validated if creds is non-null.\n+ *\n+ * Returns true on success.\n+ */\n+non_null(1) nullable(3)\n+static bool sanctions_list_remove_index(Moderation *moderation, uint16_t index, const Mod_Sanction_Creds *creds)\n+{\n+    if (index >= moderation->num_sanctions) {\n+        return false;\n+    }\n+\n+    const uint16_t new_num = moderation->num_sanctions - 1;\n+\n+    if (new_num == 0) {\n+        if (creds != nullptr) {\n+            if (!sanctions_creds_validate(moderation, nullptr, creds, 0)) {\n+                return false;\n+            }\n+\n+            moderation->sanctions_creds = *creds;\n+        }\n+\n+        sanctions_list_cleanup(moderation);\n+\n+        return true;\n+    }\n+\n+    /** Operate on a copy of the list in case something goes wrong. */\n+    const size_t old_count =  moderation->num_sanctions;\n+    Mod_Sanction *sanctions_copy = (Mod_Sanction *)calloc(old_count, sizeof(Mod_Sanction));\n+\n+    if (sanctions_copy == nullptr) {\n+        return false;\n+    }\n+\n+    memcpy(sanctions_copy, moderation->sanctions, old_count * sizeof(Mod_Sanction));\n+\n+    if (index != new_num) {\n+        sanctions_copy[index] = sanctions_copy[new_num];\n+    }\n+\n+    Mod_Sanction *new_list = (Mod_Sanction *)realloc(sanctions_copy, new_num * sizeof(Mod_Sanction));\n+\n+    if (new_list == nullptr) {\n+        free(sanctions_copy);\n+        return false;\n+    }\n+\n+    if (creds != nullptr) {\n+        if (!sanctions_creds_validate(moderation, new_list, creds, new_num)) {",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r831631273",
            "id": 831631273,
            "in_reply_to_id": 831617630,
            "line": null,
            "node_id": "PRRC_kwDOA7zIGs4xka-p",
            "original_commit_id": "31522652206b97fc60476ec11b795b699d2758ae",
            "original_line": 623,
            "original_position": 623,
            "original_start_line": null,
            "path": "toxcore/group_moderation.c",
            "position": null,
            "pull_request_review_id": 916491157,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831631273/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-03-21T23:50:07Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/831631273",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8304462?v=4",
                "events_url": "https://api.github.com/users/robinlinden/events{/privacy}",
                "followers_url": "https://api.github.com/users/robinlinden/followers",
                "following_url": "https://api.github.com/users/robinlinden/following{/other_user}",
                "gists_url": "https://api.github.com/users/robinlinden/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robinlinden",
                "id": 8304462,
                "login": "robinlinden",
                "node_id": "MDQ6VXNlcjgzMDQ0NjI=",
                "organizations_url": "https://api.github.com/users/robinlinden/orgs",
                "received_events_url": "https://api.github.com/users/robinlinden/received_events",
                "repos_url": "https://api.github.com/users/robinlinden/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robinlinden/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robinlinden/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robinlinden"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r836936811"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169"
                },
                "self": {
                    "href": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/836936811"
                }
            },
            "author_association": "MEMBER",
            "body": "C_TOXCORE_TOXCORE_GROUP_MODERATION_H",
            "commit_id": "015305a0880b2f28ef90b388082e0d4eeb77e558",
            "created_at": "2022-03-28T23:40:31Z",
            "diff_hunk": "@@ -0,0 +1,288 @@\n+/* SPDX-License-Identifier: GPL-3.0-or-later\n+ * Copyright © 2016-2020 The TokTok team.\n+ * Copyright © 2015 Tox project.\n+ */\n+\n+/**\n+ * An implementation of massive text only group chats.\n+ */\n+\n+#ifndef GROUP_MODERATION_H",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/2169#discussion_r836936811",
            "id": 836936811,
            "line": null,
            "node_id": "PRRC_kwDOA7zIGs4x4qRr",
            "original_commit_id": "65872d82ab5b0df6be86e8bf400f6ce0c30f3758",
            "original_line": 10,
            "original_position": 10,
            "original_start_line": null,
            "path": "toxcore/group_moderation.h",
            "position": null,
            "pull_request_review_id": 923867524,
            "pull_request_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/836936811/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "subject_type": "line",
            "updated_at": "2022-03-28T23:41:40Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments/836936811",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
                "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
                "followers_url": "https://api.github.com/users/iphydf/followers",
                "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
                "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/iphydf",
                "id": 10647936,
                "login": "iphydf",
                "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
                "organizations_url": "https://api.github.com/users/iphydf/orgs",
                "received_events_url": "https://api.github.com/users/iphydf/received_events",
                "repos_url": "https://api.github.com/users/iphydf/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/iphydf"
            }
        }
    ],
    "comment_regular_data": [
        {
            "author_association": "NONE",
            "body": "# [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) Report\n> Merging [#2169](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) (015305a) into [master](https://codecov.io/gh/TokTok/c-toxcore/commit/09575dc05b82f94115fc7578cc2b9e683797a4ff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) (09575dc) will **increase** coverage by `0.22%`.\n> The diff coverage is `86.21%`.\n\n```diff\n@@            Coverage Diff             @@\n##           master    #2169      +/-   ##\n==========================================\n+ Coverage   77.85%   78.08%   +0.22%     \n==========================================\n  Files         117      119       +2     \n  Lines       21826    22414     +588     \n==========================================\n+ Hits        16992    17501     +509     \n- Misses       4834     4913      +79     \n```\n\n\n| [Impacted Files](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) | Coverage Δ | |\n|---|---|---|\n| [toxcore/util.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS91dGlsLmM=) | `57.89% <50.00%> (-6.40%)` | :arrow_down: |\n| [toxcore/group\\_moderation.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9ncm91cF9tb2RlcmF0aW9uLmM=) | `82.98% <82.98%> (ø)` | |\n| [toxcore/DHT.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9ESFQuYw==) | `82.92% <100.00%> (+0.01%)` | :arrow_up: |\n| [toxcore/Messenger.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9NZXNzZW5nZXIuYw==) | `83.02% <100.00%> (-0.09%)` | :arrow_down: |\n| [toxcore/crypto\\_core.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9jcnlwdG9fY29yZS5j) | `93.95% <100.00%> (+0.38%)` | :arrow_up: |\n| [toxcore/crypto\\_core\\_test.cc](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9jcnlwdG9fY29yZV90ZXN0LmNj) | `100.00% <100.00%> (ø)` | |\n| [toxcore/group\\_moderation\\_test.cc](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9ncm91cF9tb2RlcmF0aW9uX3Rlc3QuY2M=) | `100.00% <100.00%> (ø)` | |\n| [toxav/bwcontroller.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94YXYvYndjb250cm9sbGVyLmM=) | `38.55% <0.00%> (-7.23%)` | :arrow_down: |\n| [toxcore/ping.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9waW5nLmM=) | `85.71% <0.00%> (-1.25%)` | :arrow_down: |\n| [toxcore/group.c](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok#diff-dG94Y29yZS9ncm91cC5j) | `84.40% <0.00%> (-0.07%)` | :arrow_down: |\n| ... and [3 more](https://codecov.io/gh/TokTok/c-toxcore/pull/2169/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok). Last update [09575dc...015305a](https://codecov.io/gh/TokTok/c-toxcore/pull/2169?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=TokTok).\n",
            "created_at": "2022-03-31T00:17:01Z",
            "html_url": "https://github.com/TokTok/c-toxcore/pull/2169#issuecomment-1083834409",
            "id": 1083834409,
            "issue_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/2169",
            "node_id": "IC_kwDOA7zIGs5AmgAp",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/1083834409/reactions"
            },
            "updated_at": "2022-03-31T00:18:10Z",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/issues/comments/1083834409",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/in/254?v=4",
                "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
                "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
                "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
                "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/apps/codecov",
                "id": 22429695,
                "login": "codecov[bot]",
                "node_id": "MDM6Qm90MjI0Mjk2OTU=",
                "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
                "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
                "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
                "type": "Bot",
                "url": "https://api.github.com/users/codecov%5Bbot%5D"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/2169/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
                "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
                "followers_url": "https://api.github.com/users/JFreegman/followers",
                "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
                "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JFreegman",
                "id": 1646057,
                "login": "JFreegman",
                "node_id": "MDQ6VXNlcjE2NDYwNTc=",
                "organizations_url": "https://api.github.com/users/JFreegman/orgs",
                "received_events_url": "https://api.github.com/users/JFreegman/received_events",
                "repos_url": "https://api.github.com/users/JFreegman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JFreegman"
            },
            "comments_url": "https://api.github.com/repos/TokTok/c-toxcore/commits/015305a0880b2f28ef90b388082e0d4eeb77e558/comments",
            "commit": {
                "author": {
                    "date": "2022-03-31T00:09:50Z",
                    "email": "jfreegman@gmail.com",
                    "name": "jfreegman"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-03-31T00:09:50Z",
                    "email": "jfreegman@gmail.com",
                    "name": "jfreegman"
                },
                "message": "Merge moderation portion of new groupchats codebase",
                "tree": {
                    "sha": "ff24cd1078bb6dfaa67a6626e39810a706e610ce",
                    "url": "https://api.github.com/repos/TokTok/c-toxcore/git/trees/ff24cd1078bb6dfaa67a6626e39810a706e610ce"
                },
                "url": "https://api.github.com/repos/TokTok/c-toxcore/git/commits/015305a0880b2f28ef90b388082e0d4eeb77e558",
                "verification": {
                    "payload": "tree ff24cd1078bb6dfaa67a6626e39810a706e610ce\nparent 09575dc05b82f94115fc7578cc2b9e683797a4ff\nauthor jfreegman <jfreegman@gmail.com> 1648685390 -0400\ncommitter jfreegman <jfreegman@gmail.com> 1648685390 -0400\n\nMerge moderation portion of new groupchats codebase\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCgAyFiEEur0AVzoGW/qQ1T1WNifzFEB2rmMFAmJE8U4UHGpmcmVlZ21h\nbkBnbWFpbC5jb20ACgkQNifzFEB2rmMOeQgAitoelU7xkWVPT/IVvdnVF2Kh/cvk\nX/P54yqoOoy9r7vTq5vIWVwNmIw0ytuBmE51/cfVrPZDXGkzxItiMPr1SagDRnvK\nWnT/YrCE7qY3J2e8vRH3pmVcRH/ZE8TQh5/iuFP3sRgXSEN6vQNrABXKPFXRsEBr\nvDmR9eCeqb5AUWkoE1q9DYy+O/57gy4Mkyxkfk74ZUA0jxVBzjIQXy4dyMRfEwqh\nCQ2qTi3IXbTmd8zoxqiCDFoPfeIRSJaeXUfNHp7RAxxeTIDuT3ndhiBLBvGw1PlM\nwEmsDxSL3fPqu5VE4AOGCwuvH0Eo+pTEAtEYx1u3ACHk/RkFNuZBlTKPOw==\n=3+cw\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
                "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
                "followers_url": "https://api.github.com/users/JFreegman/followers",
                "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
                "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JFreegman",
                "id": 1646057,
                "login": "JFreegman",
                "node_id": "MDQ6VXNlcjE2NDYwNTc=",
                "organizations_url": "https://api.github.com/users/JFreegman/orgs",
                "received_events_url": "https://api.github.com/users/JFreegman/received_events",
                "repos_url": "https://api.github.com/users/JFreegman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JFreegman"
            },
            "html_url": "https://github.com/TokTok/c-toxcore/commit/015305a0880b2f28ef90b388082e0d4eeb77e558",
            "node_id": "C_kwDOAQ6L0toAKDAxNTMwNWEwODgwYjJmMjhlZjkwYjM4ODA4MmUwZDRlZWI3N2U1NTg",
            "parents": [
                {
                    "html_url": "https://github.com/TokTok/c-toxcore/commit/09575dc05b82f94115fc7578cc2b9e683797a4ff",
                    "sha": "09575dc05b82f94115fc7578cc2b9e683797a4ff",
                    "url": "https://api.github.com/repos/TokTok/c-toxcore/commits/09575dc05b82f94115fc7578cc2b9e683797a4ff"
                }
            ],
            "sha": "015305a0880b2f28ef90b388082e0d4eeb77e558",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/commits/015305a0880b2f28ef90b388082e0d4eeb77e558"
        }
    ],
    "commits_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169/commits",
    "created_at": "2022-03-21T21:52:33Z",
    "diff_url": "https://github.com/TokTok/c-toxcore/pull/2169.diff",
    "draft": false,
    "head": {
        "label": "JFreegman:ngc_moderation_merge",
        "ref": "ngc_moderation_merge",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/JFreegman/toxcore/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/JFreegman/toxcore/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/JFreegman/toxcore/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/JFreegman/toxcore/branches{/branch}",
            "clone_url": "https://github.com/JFreegman/toxcore.git",
            "collaborators_url": "https://api.github.com/repos/JFreegman/toxcore/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/JFreegman/toxcore/comments{/number}",
            "commits_url": "https://api.github.com/repos/JFreegman/toxcore/commits{/sha}",
            "compare_url": "https://api.github.com/repos/JFreegman/toxcore/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/JFreegman/toxcore/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/JFreegman/toxcore/contributors",
            "created_at": "2014-03-14T00:23:47Z",
            "default_branch": "ngc_merge",
            "deployments_url": "https://api.github.com/repos/JFreegman/toxcore/deployments",
            "description": "The future of online communications (new groupchats version)",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/JFreegman/toxcore/downloads",
            "events_url": "https://api.github.com/repos/JFreegman/toxcore/events",
            "fork": true,
            "forks": 3,
            "forks_count": 3,
            "forks_url": "https://api.github.com/repos/JFreegman/toxcore/forks",
            "full_name": "JFreegman/toxcore",
            "git_commits_url": "https://api.github.com/repos/JFreegman/toxcore/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/JFreegman/toxcore/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/JFreegman/toxcore/git/tags{/sha}",
            "git_url": "git://github.com/JFreegman/toxcore.git",
            "has_discussions": false,
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://tox.chat",
            "hooks_url": "https://api.github.com/repos/JFreegman/toxcore/hooks",
            "html_url": "https://github.com/JFreegman/toxcore",
            "id": 17730514,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/JFreegman/toxcore/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/JFreegman/toxcore/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/JFreegman/toxcore/issues{/number}",
            "keys_url": "https://api.github.com/repos/JFreegman/toxcore/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/JFreegman/toxcore/labels{/name}",
            "language": "C",
            "languages_url": "https://api.github.com/repos/JFreegman/toxcore/languages",
            "license": {
                "key": "gpl-3.0",
                "name": "GNU General Public License v3.0",
                "node_id": "MDc6TGljZW5zZTk=",
                "spdx_id": "GPL-3.0",
                "url": "https://api.github.com/licenses/gpl-3.0"
            },
            "merges_url": "https://api.github.com/repos/JFreegman/toxcore/merges",
            "milestones_url": "https://api.github.com/repos/JFreegman/toxcore/milestones{/number}",
            "mirror_url": null,
            "name": "toxcore",
            "node_id": "MDEwOlJlcG9zaXRvcnkxNzczMDUxNA==",
            "notifications_url": "https://api.github.com/repos/JFreegman/toxcore/notifications{?since,all,participating}",
            "open_issues": 3,
            "open_issues_count": 3,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
                "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
                "followers_url": "https://api.github.com/users/JFreegman/followers",
                "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
                "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/JFreegman",
                "id": 1646057,
                "login": "JFreegman",
                "node_id": "MDQ6VXNlcjE2NDYwNTc=",
                "organizations_url": "https://api.github.com/users/JFreegman/orgs",
                "received_events_url": "https://api.github.com/users/JFreegman/received_events",
                "repos_url": "https://api.github.com/users/JFreegman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/JFreegman"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/JFreegman/toxcore/pulls{/number}",
            "pushed_at": "2024-02-23T14:45:54Z",
            "releases_url": "https://api.github.com/repos/JFreegman/toxcore/releases{/id}",
            "size": 22505,
            "ssh_url": "git@github.com:JFreegman/toxcore.git",
            "stargazers_count": 31,
            "stargazers_url": "https://api.github.com/repos/JFreegman/toxcore/stargazers",
            "statuses_url": "https://api.github.com/repos/JFreegman/toxcore/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/JFreegman/toxcore/subscribers",
            "subscription_url": "https://api.github.com/repos/JFreegman/toxcore/subscription",
            "svn_url": "https://github.com/JFreegman/toxcore",
            "tags_url": "https://api.github.com/repos/JFreegman/toxcore/tags",
            "teams_url": "https://api.github.com/repos/JFreegman/toxcore/teams",
            "topics": [],
            "trees_url": "https://api.github.com/repos/JFreegman/toxcore/git/trees{/sha}",
            "updated_at": "2023-07-04T12:38:01Z",
            "url": "https://api.github.com/repos/JFreegman/toxcore",
            "visibility": "public",
            "watchers": 31,
            "watchers_count": 31,
            "web_commit_signoff_required": false
        },
        "sha": "015305a0880b2f28ef90b388082e0d4eeb77e558",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
            "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
            "followers_url": "https://api.github.com/users/JFreegman/followers",
            "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
            "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/JFreegman",
            "id": 1646057,
            "login": "JFreegman",
            "node_id": "MDQ6VXNlcjE2NDYwNTc=",
            "organizations_url": "https://api.github.com/users/JFreegman/orgs",
            "received_events_url": "https://api.github.com/users/JFreegman/received_events",
            "repos_url": "https://api.github.com/users/JFreegman/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/JFreegman"
        }
    },
    "html_url": "https://github.com/TokTok/c-toxcore/pull/2169",
    "id": 885351033,
    "issue_url": "https://api.github.com/repos/TokTok/c-toxcore/issues/2169",
    "labels": [
        {
            "color": "84b6eb",
            "default": true,
            "description": "New feature for the user, not a new feature for build script",
            "id": 403702218,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw0MDM3MDIyMTg=",
            "url": "https://api.github.com/repos/TokTok/c-toxcore/labels/enhancement"
        }
    ],
    "locked": false,
    "merge_commit_sha": "015305a0880b2f28ef90b388082e0d4eeb77e558",
    "merged_at": "2022-03-31T00:18:11Z",
    "milestone": {
        "closed_at": "2022-04-18T17:55:11Z",
        "closed_issues": 117,
        "created_at": "2022-02-23T23:17:57Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/10647936?v=4",
            "events_url": "https://api.github.com/users/iphydf/events{/privacy}",
            "followers_url": "https://api.github.com/users/iphydf/followers",
            "following_url": "https://api.github.com/users/iphydf/following{/other_user}",
            "gists_url": "https://api.github.com/users/iphydf/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/iphydf",
            "id": 10647936,
            "login": "iphydf",
            "node_id": "MDQ6VXNlcjEwNjQ3OTM2",
            "organizations_url": "https://api.github.com/users/iphydf/orgs",
            "received_events_url": "https://api.github.com/users/iphydf/received_events",
            "repos_url": "https://api.github.com/users/iphydf/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/iphydf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iphydf/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/iphydf"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/TokTok/c-toxcore/milestone/47",
        "id": 7708300,
        "labels_url": "https://api.github.com/repos/TokTok/c-toxcore/milestones/47/labels",
        "node_id": "MI_kwDOA7zIGs4AdZ6M",
        "number": 47,
        "open_issues": 0,
        "state": "closed",
        "title": "v0.2.18",
        "updated_at": "2023-11-13T15:43:59Z",
        "url": "https://api.github.com/repos/TokTok/c-toxcore/milestones/47"
    },
    "node_id": "PR_kwDOA7zIGs40xWJ5",
    "number": 2169,
    "patch_url": "https://github.com/TokTok/c-toxcore/pull/2169.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/TokTok/c-toxcore/statuses/015305a0880b2f28ef90b388082e0d4eeb77e558",
    "title": "feat: Merge moderation portion of new groupchats codebase",
    "updated_at": "2022-03-31T00:18:32Z",
    "url": "https://api.github.com/repos/TokTok/c-toxcore/pulls/2169",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1646057?v=4",
        "events_url": "https://api.github.com/users/JFreegman/events{/privacy}",
        "followers_url": "https://api.github.com/users/JFreegman/followers",
        "following_url": "https://api.github.com/users/JFreegman/following{/other_user}",
        "gists_url": "https://api.github.com/users/JFreegman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/JFreegman",
        "id": 1646057,
        "login": "JFreegman",
        "node_id": "MDQ6VXNlcjE2NDYwNTc=",
        "organizations_url": "https://api.github.com/users/JFreegman/orgs",
        "received_events_url": "https://api.github.com/users/JFreegman/received_events",
        "repos_url": "https://api.github.com/users/JFreegman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/JFreegman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JFreegman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/JFreegman"
    }
}